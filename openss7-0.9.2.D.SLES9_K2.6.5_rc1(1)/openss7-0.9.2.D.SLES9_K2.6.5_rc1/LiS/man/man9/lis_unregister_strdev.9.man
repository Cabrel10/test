'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) lis_unregister_strdev.9.man,v 1.1.4.5 2006/04/05 09:42:44 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:42:44 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" lis_unregister_strdev.9.man,v
.\" Revision 1.1.4.5  2006/04/05 09:42:44  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database lis.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so lis.macros
.\"
.\"
.TH LIS_UNREGSITER_STRDEV 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B lis_unregister_strdev
\- unregister a \fISTREAMS\fR device
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP 8
.BI "int lis_unregister_strdev(major_t " major );
.\"
.\"
.SH ARGUMENTS
.PP
.TP
.I major
the major device number to unregister.
.\"
.\"
.SH DESCRIPTION
.PP
.BR lis_unregister_strdev ()
deregisters a
.I STREAMS
driver previously registered with
.BR lis_register_strdev (9).
.PP
.BR lis_unregister_strdev ()
removes the
.I STREAMS
driver identified by its major device number,
.IR major ,
from the
.I STREAMS
device switch table and deregisters the character major
number,
.IR major ,
from the
.B Linux
kernel using
.BR unregister_chrdev ().
Before removing the
.I STREAMS
driver,
.B LiS
.[
LiS
.]
will also clear any autopush list associated with the
.I STREAMS
driver.
.\"
.\"
.SH USAGE
.PP
.BR lis_unregister_strdev ()
can be called multiple times for the same device driver with different
selections of the
.I major
device number.  This has the effect that multiple (external) character major
device numbers will be disassociated with the
.I STREAMS
device.
.\"
.\"
.SH RETURN
.PP
Upon succes,
.BR lis_unregister_strdev ()
returns zero (0).
Upon failure,
.BR lis_unregister_strdev ()
returns a negative error number.
.\"
.\"
.SH ERRORS
.PP
When
.BR lis_unregister_strdev ()
fails, it returns the negative of one of the following errors:
.PP
.TP 12
.RB [ ENODEV ]
The character device major number
.IR major ,
is not registered to
.B LiS\c
.
.[
LiS
.]
.TP 12
.RB [ EBUSY ]
The
.I STREAMS
driver identified by
.I major
has open file descriptors.
.\"
.\"
.SH CONTEXT
.PP
.BR lis_unregister_strdev ()
can be called from any blocking context.  Consideration for import on
performance and latency should be given before calling
.BR lis_unregister_strdev ()
from soft or hard interrupt context.  Typically,
.BR lis_unregister_strdev ()
is called from the
.BR module_exit (9)
procedure of a kernel module associated with a
.I STREAMS
device.
.\"
.\"
.SH MP-STREAMS
.PP
.BR lis_unregister_strdev ()
is MP-safe.
.\"
.\"
.SH NOTICES
.PP
Although
.B LiS
.[
LiS
.]
will demand load a
.B Linux
kernel module supporting a
.I STREAMS
driver, it will not remove that module once
it is deregistered.
.B Linux
does, however, provide a mechanism for autocleaning kernel modules that have a
zero reference count and this facility could be used instead.
.\"
.\"
.SH EXAMPLES
.PP
Following is an example that demonstrates how 4 major device numbers could be
registered and deregistered against a
.I STREAMS
driver:
.sp
.in +4
.nf
\fC\s-2\
#define X_MAJOR 222
#define X_NMAJOR 4
#define X_NMINOR 255
#define X_DRV_NAME "example"

int x_initialized = 0;
ushort x_majors[X_NMAJOR] = { X_CMAJOR, };

void x_init(void)
{
    int err, mindex;
    for (mindex = 0; mindex < X_NMAJOR; mindex++) {
	if ((err = lis_register_strdev(x_majors[mindex], &x_info,
		                       X_NMINOR, X_DRV_NAME)) < 0) {
	    if (!mindex) {
		cmn_err(CE_PANIC,
			"%s: could not register 1'st major %d",
			X_DRV_NAME, x_majors[mindex]);
		x_initialized = err;
		return;
	    }
	    cmn_err(CE_WARN, "%s: could not register %d'th major",
		    X_DRV_NAME, mindex + 1);
	    x_majors[mindex] = 0;
	} else if (mindex)
	    x_majors[mindex] = err;
    }
    x_initialized = 1;
    return;
}

void x_terminate(void)
{
    int err, mindex;
    for (mindex = 0; mindex < X_NMAJOR; mindex++) {
	if (x_majors[mindex]) {
	    if ((err = lis_unregister_strdev(x_majors[mindex])))
		cmn_err(CE_PANIC, "%s: could not unregister major %d",
			X_DRV_NAME, x_majors[mindex]);
	    if (mindex)
		x_majors[mindex] = 0;
	}
    }
    return;
}
\s+2\fR
.fi
.\"
.\"
.\".SH IMPLEMENTATION
.\".PP
.\"
.\"
.SH "SEE ALSO"
.PP
.BR lis_register_strdev (9),
.BR lis_register_strmod (9),
.BR lis_unregister_strdev (9).
.\"
.\"
.SH BUGS
.PP
.BR lis_unregister_strdev ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR lis_unregister_strdev ()
is an
.I LiS
.[
LiS
.]
implementation specific function.  Registration of
.I STREAMS
drivers and modules is inherently implementation specific and non-portable.
Different implementation provide different mechanisms.
.PP
For a fully functional and compatible
.I STREAMS
implementation, use
.BR "Linux Fast-STREAMS" .
.[
LfS
.]
.\"
.\"
.SH CONFORMANCE
.PP
Registration and unregistration of
.I STREAMS
drivers is implementation specific and not subject to standardization.
.BR lis_unregister_strdev ()
is an
.I LiS
.[
LiS
.]
implementation specific function.
.\"
.\"
.SH HISTORY
.PP
.BR lis_unregister_strdev ()
is an
.IR LiS -specific
function that first appeared in early version of
.BR LiS .
.[
LiS
.]
.\"
.\"
.[
$LIST$
.]
.TI
