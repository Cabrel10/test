'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) bcanputnext.9.man,v 1.1.4.5 2006/04/05 09:42:43 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:42:43 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" bcanputnext.9.man,v
.\" Revision 1.1.4.5  2006/04/05 09:42:43  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database lis.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so lis.macros
.\"
.\"
.TH BCANPUTNEXT 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B bcanputnext, lis_bcanputnext
\- test flow control on a \fISTREAMS\fR message queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP 8
.BI "int bcanputnext(queue_t *" q ", int " band );
.\"
.\"
.SH ARGUMENTS
.PP
.TP
.I q
the queue upstream of the queue to test for flow control.
.TP
.I band
the queue band of the queue to test for flow control.
.\"
.\"
.SH DESCRIPTION
.PP
It is the responsibility of a
.I STREAMS
module putting a banded non-priority
message to a subsequent queue to check for flow control on that queue using
.BR bcanputnext ()
for the band associated with the message before placing a message on that
queue with
.BR putnext (9).
.PP
.BR bcanputnext ()
checks whether the stream is flow controlled starting at the specified queue,
.IR q ,
and for the specified
.IR band .
Starting at the
.I q
specified and for the
.I band
specified,
.BR bcanputnext ()
looks for the next forward queue which has a service routine or which has no
further forward queue.
.PP
If this forward queue has the
.B QB_FULL
flag clear indicating that it is not full for the specified
.IR band ,
.BR bcanputnext ()
will return true (1).
.PP
If this forward queue has the
.B QB_FULL
flag set indicating that it is full for the specified
.IR band ,
.BR bcanputnext ()
will return fails (0).
.PP
When
.BR bcanputnext ()
return false (0), it also sets the
.B QB_WANTW
flag for the specified
.IR band ,
indicating that the
.I STREAMS
executive should backenable service procedures
backwards up the queues when the flow controlled
.I band
is no longer full.
.\"
.\"
.SH RETURN
.PP
.BR bcanputnext ()
will return false (0) when the specified
.I STREAMS
message queue is flow
controlled for the specified band, and return true (1) when the specified
.I STREAMS
message queue is not flow controlled for the specified band.
.\"
.\"
.SH ERRORS
.PP
.BR bcanputnext ()
always succeed.
.\"
.\"
.SH CONTEXT
.PP
.BR bcanputnext ()
can be called from any context, including user context, module procedures,
callouts, callbacks, soft interrupts and interrupt service routines.
.\"
.\"
.SH MP-STREAMS
.PP
.BR bcanputnext ()
is supposed to be an MP-safe version of
.BI bcanput( q->q_next );
however, under
.B LiS
this function is not MP-safe.
.\"
.\"
.SH NOTICES
.PP
In the
.B LiS
.[
LiS
.]
implementation, if
.BR bcanputnext ()
suffers an internal error, it will return false (0).
.PP
.B LiS
.[
LiS
.]
implements
\fB\)canput(\fI\)q\fB\))\fR\),
\fB\)canputnext(\fI\)q\fB\))\fR\) and
\fB\)bcanputnext(\fI\)q\fB\), \fI\)band\fB\))\fR\)
with a macros that call
\fB\)bcanput(\fI\)q\fB\), \fI\)band\fB\))\fR\).
This does not protect the
.I q->q_next
dereference and can cause problems when modules are being pushed onto or
popped from running streams.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR putnext (9),
.BR canput (9),
.BR canputnext (9),
.BR bcanput (9),
.BR freezestr (9),
.BR noenable "(9), and "
.BR enableok (9).
.\"
.\"
.SH BUGS
.PP
Because
.B LiS
calls
.BR bcanput (9)
with
.IR q->q_next ,
without locking the stream against module pushes, pops and other changes to
the
.I q->q_next
pointer, it is not MP-safe, largely defeating the purpose of the function.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR bcanputnext ()
is compatible with
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
and implementations based on
.IR "SVR 4" ,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.BR bcanputnext ()
is supposed to be MP-safe.
Under LiS,
.BR bcanputnext ()
does not protect dereferencing of queue pointers during the search for a queue
or band limited queue.
.IP \(em
.BR bcanputnext ()
always succeeds.  Under LiS,
.BR bcanput ()
will return zero (0 - flow controlled) if an internal error occurs, without
setting the
.BR QWANTW " or " QB_WANTW
flag for the queue or band.  This means that, although flow controlled, no
backenable procedure will be run.  This can lead to indefinite postponement of
a queue service procedure under LiS.
.IP \(em
The declaration for
.BR bcanputnext ()
provides that
.I band
is of type
.BR int .
Under LiS,
.I band
is
.BR "unsigned char" .
.IP \(em
.BR bcanputnext ()
normally protects dereferences of the
.I q->q_next
pointer with a stream head lock.
Under LiS,
.BR bcanputnext ()
is simply a macro that calls
.BR bcanput (9)
without protection for the
.I q->q_next
pointer dereference.
.IP \(em
.BR bcanputnext ()
may be called on a stream frozen with
.BR freezestr (9).
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
.IR Solaris \(rg,
.[
solspg
.]
.IR SUPER-UX \(rg
.[
suxspg
.]
and
.IR UnixWare \(rg
.[
uw7spg
.]
do not permit
.BR bcanputnext ()
to be called on a stream frozen with
.BR freezestr (9).
Portable
.I STREAMS
drivers and modules should not call
.BR bcanputnext ()
on a stream frozen with
.BR freezestr (9).
.PP
For a fully functional
.I STREAMS
implementation, use
.BR "Linux Fast-STREAMS" .
.[
LfS
.]
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP DDI/DKI" ;
.[
usldk
.]
.IR AIX \(rg,
.IR HP-UX \(rg,
.IR OSF/1 \(rg,
.IR Solaris \(rg
and
.IR UnixWare \(rg
documentation;
.[
aixdoc
.]
.[
hpuxdoc
.]
.[
osfdoc
.]
.[
soldoc
.]
.[
uw7doc
.]
and
.IR LiS 
.[
LiS
.]
source code.
.\"
.\"
.SH HISTORY
.PP
.BR bcanputnext ()
first appeared in SVR 4 MP.
.[
svr4
.]
.\"
.\"
.[
$LIST$
.]
.TI
