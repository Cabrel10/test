'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) M_IOCDATA.9.man,v 0.9.2.14 2006/04/05 09:44:03 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:03 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" M_IOCDATA.9.man,v
.\" Revision 0.9.2.14  2006/04/05 09:44:03  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH M_IOCDATA 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B M_IOCDATA
\- \fISTREAMS\fP IO control data message
.\"
.\"
.SH FORMAT
.PP
The
.B M_IOCDATA
message block is a
.BR datab (9)
structure and associated data buffer that contains structured data.
.PP
An
.B M_IOCDATA
message is a high priority message that consists of one
.B M_IOCDATA
message block followed by one or more
.BR M_DATA (9)
message blocks.
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
The
.B M_IOCDATA
message is generated by the
Stream head
and sent downstream as a response to an
.BR M_COPYIN (9)
or
.BR M_COPYOUT (9)
message.  The message format is one
.B M_IOCDATA
message block followed by zero or more
.BR M_DATA (9)
blocks.  The
.B M_IOCDATA
message block contains a
.BR copyresp (9)
structure, defined in
.BR <sys/stream.h> :
.PP
.nf
\fC\s-1\
struct copyresp {
    int cp_cmd;         /* command being performed */
    cred_t *cp_cr;      /* credentials */
    uint cp_id;         /* id of this ioctl */
    caddr_t cp_rval;    /* result 0 - success, 1 - failure */
    uint cp_pad1;       /* reserved */
    int cp_pad2;        /* reserved */
    mblk_t *cp_private; /* private state information */
    long cp_filler[4];  /* SVR4 compatibility */
#define cp_flag cp_filler[0] /* IOC_NATIVE or IOC_ILP32 */
};

#define cp_uid cp_cr->cr_uid
#define cp_gid cp_cr->cr_gid

#define IOC_MASK   0xff000000 /* mask of model bits */
#define IOC_NONE   0x00000000 /* no indication */
#define IOC_NATIVE 0x01000000 /* native ioctl request */
#define IOC_ILP32  0x02000000 /* 32bit ioctl request */
\s+1\fP
.fi
.PP
The first three members of the structure
.RI ( cp_cmd ", " cp_cr ", " cp_id )
correspond to those of the
.BR iocblk (9)
structure in the
.BR M_IOCTL (9)
message which allows the same message blocks to be reused for all of the related transparent
messages
.RB ( M_COPYIN (9),
.BR M_COPYOUT (9),
.BR M_IOCACK (9),
.BR M_IOCNAK (9)).
The
.I cp_rval
field contains the result of the request at the
Stream head.
Zero
.RB ( (caddr_t)(0) )
indicates success and non-zero (typically
.BR (caddr_t)(1) )
indicates failure.  If failure is indicated, the module should not
generate an
.BR M_IOCNAK (9)
message.  It must abort all
.BR ioctl (2s)
processing, clean up its data structures,
remove and free any message blocks linked to the
.I cp_private
member,
free the
.B M_IOCDATA
message, and return.
.PP
The
.I cp_private
field is copied from the
.I cq_private
field in the associated
.BR M_COPYIN (9)
or
.BR M_COPYOUT (9)
message.  It is included in the
.B M_IOCDATA
message so the message can be self-describing.  This is intended to simplify
.BR ioctl (2s)
processing by drivers and modules.
.PP
The
.I cp_flag
field is set by the Stream head and has the same value as the
.I ioc_flag
field in the original corresponding
.BR M_IOCTL (9)
message.  The
.I cp_flag
field can have the values as follows:
.TP \w'IOC_NATIVE\(em'u
.B IOC_NONE
indicates that the
.BR copyin (9)
or
.BR copyout (9)
operation was performed for a process with the same data model as the driver.
No conversions are required on data copied in.
.TP
.B IOC_NATIVE
indicates that the 
.BR copyin (9)
or
.BR copyout (9)
operation was performed for a process with the same data model as the driver (i.e.
.BR LP64 ).
No conversion are required on data copied in.
.TP
.B IOC_ILP32
indicates that the 
.BR copyin (9)
or
.BR copyout (9)
operation was performed for a process with a different data model (31- or 32-bit) from the kernel
(i.e. ILP32 instead of LP64).
Conversion is required on data copied in.
.PP
If the message is in response to an
.BR M_COPYIN (9)
message and success is indicated, the
.B M_IOCDATA
block will be followed by
.BR M_DATA (9)
blocks containing the data copied in.  If an
.B M_IOCDATA
block is reused, any unused fields defined for the resultant message block should be cleared
(particularly in an
.BR M_IOCACK
or
.BR M_IOCNAK ).
.PP
This message should not be queued by a driver or module unless it intends to process the data for
the
.BR ioctl (2s)
in some way.
.\"
.B M_IOCDATA
messages cannot be generated directly by a user level process.
.B M_IOCDATA
messages arriving at the
Stream head
are discarded (ignored and freed).
.B M_IOCDATA
messages are generated by the
Stream head
in response to received
.BR M_COPYIN (9)
or
.BR M_COPYOUT (9)
messages.
.B M_IOCDATA
messages must be consumed by the driver or module that issued the
.BR M_COPYIN (9)
or
.BR M_COPYOUT (9)
message.
.\"
.\"
.SH USAGE
.PP
The guidelines for processing the
.B M_IOCDATA
message are as follows:
.IP \(bu  \w'\(bu\(em'u
If a module receives an
.B M_IOCDATA
message to its write-side
.IR qi_putp (9)
procedure, and the module is not processing an
.BR M_COPYIN (9)
or
.BR M_COPYOUT (9)
request, the module passes the
.B M_IOCDATA
downstream, directly from its
.IR qi_putp (9)
procedure, with a call to
.BR putnext (9).
.IP \(bu
If a driver receives an
.B M_IOCDATA
message to its write-side
.IR qi_putp (9)
procedure, and the driver is not processing an
.BR M_COPIN (9)
or
.BR M_COPYOUT (9)
request, the driver discards the
.B M_IOCDATA
message.
.IP \(bu
If a module receives an
.B M_IOCDATA
message to its read-side
.IR qi_putp (9)
procedure, the module should either pass the message upstream using
.BR putnext (9)
or discard the message.
.IP \(bu
Drivers should not generate
.B M_IOCDATA
messages upstream.
.IP \(bu
If an
.B M_IOCDATA
message is received at the
Stream head,
the message is discarded.
.IP \(bu
If a driver or module is processing an
.BR M_COPYIN (9)
or
.BR M_COPYOUT (9)
request, and an
.B M_IOCDATA
message is received to the write-side
.IR qi_putp (9)
procedure, the driver or module must process the message, but may queue the message for processing
out of the module's
.IR qi_srvp (9)
procedure.
.IP \(bu
When processing the message the driver or module examines the
.I cp_rval
member of the contained
.BR copyresp (9)
structure to determine if the operation was successful or not.
.IP \(bu
If not successful, all operations
associated with the
.BR M_IOCTL (9)
must be aborted and cleaned up.  No
.BR M_IOCNAK (9)
message is sent.
.IP \(bu
If successful and a
.BR M_COPYIN (9)
request was being performed,
.BR M_DATA (9)
blocks following the message contain the copied in data.
.IP \(bu
If successful and a
.BR M_COPYOUT (9)
request was being performed,
only success is indicated.
.IP \(bu
When successful, the driver or module may continue the
.BR M_IOCTL (9)
operation with additional
.BR M_COPYIN (9)
or
.BR M_COPYOUT (9)
requests, or by concluding the 
.BR M_IOCTL (9)
operation with a
.BR M_IOCACK (9)
or
.BR M_IOCNAK (9)
acknowledgement.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR M_COPYIN (9),
.BR M_COPYOUT (9),
.BR M_DATA (9),
.BR M_IOCTL (9),
.BR M_IOCACK (9),
.BR M_IOCNAK (9),
.BR copyresp (9),
.BR iocblk (9),
.BR ioctl (2s),
.BR datab (9),
.BR msgb (9),
.BR STREAMS (9).
.\"
.\"
.SH COMPATIBILITY
.PP
The
.B M_IOCDATA
.I STREAMS
message is compatible with
.IR "SVR 4.2 MP STREAMS" ,
and implementations based on
.IR "SVR 4" ,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
Alignment of
.BR iocblk (9),
.BR copyreq (9),
and
.BR copyresp (9),
structures to each other and which members are overlaid over which other members, and what the
differences are between the 32-bit architecture structures and the 64-bit architecture structures,
is complicated and problematic among
.IR UNIX \(rg
implementations of
.IR STREAMS .
.IP ""
Portable
.I STREAMS
drivers and modules will not rely upon the ordering or overlap of members within the
.BR copyresp (9)
structure, and will only examine and modify members in accordance with the
.IR "SVR 4 STREAMS Programmer's Guide" .
.[
svr4spg
.]
.IP \(em
The
.I cp_flag
field is documented only by
.IR Solaris \(rg
.[
soldoc
.]
with the same sematics as provided by
.B @PACKAGE_TITLE@
as described above, for compatibility with
.IR Solaris \(rg.
.[
soldoc
.]
Nevertheless, the interpretation of the
.I cp_flag
is non-portable, and, as the
.I cp_flag
occupies one of the
.I cp_filler
elements in the SVR 4.2 structure, examining it on implementations other than
.IR Solaris \(rg
.[
soldoc
.]
or
.B @PACKAGE_TITLE@
could have undefined results.
.IP ""
Portable
.I STREAMS
drivers and modules will not examine the
.I cp_flag
field.
.IP \(em
When a driver or module receives an
.B M_IOCDATA
indicating an error
.RI ( cp_rval
is non-zero), it is supposed to free any private resources associated with the
.BR ioctl (2s),
abort the 
.BR ioctl (2s)
operation, free the message, and return.
.[
svr4spg
.]
When the
Stream head
sends such a message, it aborts the current
.BR M_IOCTL (9)
operation and returns the error number to the user in
.BR errno (3)
indicating the cause of failure of the operation.
In the error case, the
Stream head
does not block awaiting any further
.BR ioctl (2s)
message blocks, and release the
.B STRIOWAIT
bit in the
Stream head.
.IP ""
.I LiS
.[
lis
.]
has the bug that it waits for a subsequent
.BR M_IOCACK (9)
or
.BR M_IOCNAK (9)
block.
(Note however, that drivers and modules previously written to work with
.I LiS
.[
lis
.]
will also work with
.BR "@PACKAGE_TITLE@" ;
.[
lfs
.]
however, the extraneous
.BR M_IOCACK (9)
or
.BR M_IOCNAK (9)
will be discarded by the
Stream head
as the input-output control transaction has been closed, and the error number reported will be that
of the failed
.BR copyin (9)
or
.BR copyout (9)
operation, i.e.
.RB [ EFAULT ],
and not that contained in any
.BR M_IOCNAK (9)
message.)
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B @PACKAGE_TITLE@
.[
lfs
.]
instead of
.IR LiS .
.[
lis
.]
.IP \(em
.B M_IOCDATA
has a different constant value on
.IR HP-UX \(rg,
.[
hpuxspg
.]
.IR MacOT \(rg,
.[
macspg
.]
.IR OSF/1 \(rg,
.[
osfspg
.]
and older versions of
.IR LiS .
.[
lis
.]
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B @PACKAGE_TITLE@
.[
lfs
.]
instead of
.IR LiS .
.[
lis
.]
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP STREAMS" .
.[
svr42spg
.]
.\"
.\"
.SH HISTORY
.PP
The
.B M_IOCDATA
message first appeared in
.IR "SVR 3" .
.[
svr3spg
.]
.\"
.\"
.[
$LIST$
.]
.TI
