'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) getq.9.man,v 0.9.2.29 2006/04/05 09:44:12 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:12 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" getq.9.man,v
.\" Revision 0.9.2.29  2006/04/05 09:44:12  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH GETQ 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B getq
\- gets a message from a \fISTREAMS\fP message queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP
.BI "mblk_t *getq(queue_t *" q ");
.\"
.\"
.SH ARGUMENTS
.TP
.I q
the queue from which to retrieve a message.
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
.BR getq ()
retrieves a message from the specified queue,
.IR q ,
and returns a pointer to that message to the caller.  If there are no message
on the specified queue,
.IR q ,
.BR getq ()
returns a
.B NULL
pointer.
.\"
.SS Flow Control
.PP
Whenever
.BR getq ()
retrieves a message from the queue, the following actions are performed:
.IP 1. \w'\ 3.\ 'u
The
.B QWANTR
bit is cleared for the queue.
.IP 2.
.BR getq ()
checks whether the queue count has dropped to zero, or beneath the low water mark.  When the queue
or queue band count drops to zero or beneath the low water mark, the
.BR QFULL " or " QB_FULL
bit is cleared for the queue or queue band.
.IP 3.
.BR getq ()
checks whether the low water mark has been achieved.  If the low water mark has been crossed and the
backward queue needs back-enabling (that is, the
.BR QWANTW " or " QB_WANTW
bit is set for the queue or queue band),
.BR getq ()
performs the necessary back-enabling by scheduling queue
.IR qi_srvp (9)
service procedure backwards up the queue
chain.
.PP
When
.BR getq ()
returns
.B NULL
(the queue,
.IR q ,
is empty),
the following actions are performed:
.IP 1. \w'\ 3.\ 'u
.BR getq ()
sets the
.B QWANTR
flag for the queue.
The
.B QWANTR
flag indicates to the
.I STREAMS
scheduler that back-enabling has already been performed for the empty
queue, and subsequent calls to
.BR getq ()
for the same empty queue will not generate another back-enable.
The
.B QWANTR
flag indicates to
.BR putq (9),
.BR putbq (9),
.BR insq (9)
that the queue should be enabled when a message is enqueued.
.PP
.BR getq ()
is normally called from within a queue
.IR qi_srvp (9)
service procedure.
.\"
.\"
.SH USAGE
.PP
.BR getq (9)
is normally called from a
.IR qi_srvp (9)
procedure of a queue, or other procedures of the queue (e.g. open) for special purposes.
Also,
.BR getq (9)
can be called by a driver's output routines (e.g., tasklets, bottom halves, interrupt service
routines) to retrieve a message from the driver's write queue.
.BR getq (9)
can also be called for a queue across a multiplexing driver, but there is less use for such
functionality.
The latter two uses are less portable.
.\"
.\"
.SH RETURN
.PP
Upon success,
.BR getq ()
returns a pointer to the message which has been removed from the queue,
.IR q .
.PP
Upon failure,
.BR getq ()
returns a
.B NULL
pointer.
.\"
.\"
.SH ERRORS
.PP
When the queue specified by
.I q
is empty,
.BR getq ()
returns a
.B NULL
pointer.
If the
.B QWANTR
flag is not already set for the queue,
.BR getq ()
will set the
.B QWANTR
flag and back-enable the Stream.
.\"
.\"
.SH CONTEXT
.PP
.BR getq ()
can be called from any context, including user context, module procedures, callouts, callbacks, soft
interrupts (tasklets and bottom halves), and interrupt service routines.
.\"
.\"
.SH MP-STREAMS
.PP
.BR getq ()
is MP-safe when called from any context; however, the caller is responsible for the validity of the
passed in
.I q
pointer across the call.
The caller obtains exclusive access to the returned message.
.PP
The validity of either queue in the pair, and either
.I q_next
pointer for a queue in the pair, for the queue pointer passed to a module
procedure, callout or synchronous callback functions, is guaranteed by
.BR "@PACKAGE_TITLE@" .
Any queue pointer in the pair passed as an argument to an asynchronous callback
function are also valid, providing the driver or module observes the rules for
cancellation of asynchronous callbacks on close.
.BR "@PACKAGE_TITLE@"
also provides that a queue pointer in the pair within whose procedures an
asynchronous callback was invoked, and either
.I q_next
pointer, are also valid in an asynchronous callback.
.\"
.\"
.\".SH NOTICES
.\".PP
.\"
.\"
.\".SH IMPLEMENTATION
.\".PP
.\"
.\"
.SH EXAMPLES
.PP
The following service procedures and interrupt service routine examples demonstrate the use of
.BR getq (9)
within a module, driver, and ISR:
.\"
.SS Example #1 \(em Module Read Service Procedure
.PP
The following example illustrates the use of
.BR getq (9)
from within a module read
.IR qi_srvp (9)
service procedure:
.PP
.nf
\fC\s-2\
 1  int
 2  example_module_srvp(queue_t *q)
 3  {
 4      mblk_t *mp;
 5  
.B " 6      while ((mp = getq(q))) {
 7          if (mp->b_datap->db_type >= QPCTL) {
.B " 8              putnext(q, mp);
 9              continue;
10          }
.B "11          if (bcanputnext(q, mp->b_band)) {
.B "12              putnext(q, mp);
13              continue;
14          }
.B "15          putbq(q, mp);
16          break;
17      }
18      return (0);
19  }
\s+2\fP
.fi
.\"
.SS Example #2 \(em Driver Write Service Procedure
.PP
The following example illustrates the use of
.BR getq (9)
from within a driver write
.IR qi_srvp (9)
service procedure:
.PP
Following is the driver write queue put procedure that simply places data for tranmission on the
message queue with
.BR putq (9):
.PP
.nf
\fC\s-2\
 1  int
 2  example_driver_putp(queue_t *q)
 3  {
 4      switch (mp->b_datap->db_type) {
 5      case M_FLUSH:
 6          /* ... */
 7          break;
 8      case M_IOCTL:
 9          /* ... */
10          break;
11      case M_DATA:
.B "12          putq(q, mp);
13          break;
14      default:
15          freemsg(mp);
16          break;
17      }
18      return (0);
19  }
\s+2\fP
.fi
.PP
Following is a procedure for filling the transmit FIFO from messages taken from the write queue
with
.BR getq (9):
.PP
.nf
\fC\s-2\
 1  void
 2  example_service_xmitbuf(queue_t *q)
 3  {
 4      priv_t *p = (priv_t *) q->q_ptr;
 5      int count = 0;
 6      mblk_t *mp;
 7  
 8      if (!(inb(p->ctlport) & XMITBUF_NEEDS_SERVICE))
 9          return (0);
10  
.B "11      while ((mp = getq(q))) {
12          mblk_t *b_cont = mp;
13  
14          while ((mp = b_cont)) {
15              b_cont = mp->b_cont;
16              while (mp->b_wptr > mp->b_rptr) {
.B "17                  outb(mp->b_rptr[0], p->outport);
18                  mp->b_rptr++;
19                  if (++count == XMITBUF_DEPTH) {
.B "20                      putbq(mp);
21                      return;
22                  }
23              }
24              freeb(mp);
25          }
26      }
27      return;
28  }
\s+2\fP
.fi
.PP
Now, there are two ways of invoking the transmit buffer service procedure.
.PP
The first is from a driver write queue service procedure as follows:
.PP
.nf
\fC\s-2\
 1  int
 2  example_driver_srvp(queue_t *q)
 3  {
 4      example_service_xmitbuf(q);
 5  }
 6  
 7  void
 8  example_driver_xmit_isr(priv_t * p)
 9  {
10      qenable(p->wq);
11  }
\s+2\fP
.fi
.PP
The second approach is to no define a driver write service procedure at all, and to directly
invoke the procedure from the interrupt service routine:
.PP
.nf
\fC\s-2\
 1  void
 2  example_driver_xmit_isr(priv_t * p)
 3  {
 4      example_service_xmitbuf(p->wq);
 5  }
\s+2\fP
.fi
.\"
.\"
.SH "SEE ALSO"
.PP
.BR freezestr (9),
.BR rmvq (9),
.BR putbq (9),
.BR putq (9).
.\"
.\"
.SH BUGS
.PP
.BR getq ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR getq ()
is compatible with
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
and implementations based on
.IR "SVR 4" ,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.BR getq ()
passed a
.B NULL
or invalid queue pointer,
.IR q ,
will have undefined results.
.IP ""
Under
.IR LiS ,
an
.B NULL
.I q
pointer will return
.B NULL
(but an invalid queue pointer can still have undefined results because
.I LiS
mistakenly locks the queue before testing the validity of the queue pointer).
As most
.IR qi_srvp (9)
service procedures pass
.BR getq ()
the queue pointer passed to the
.IR qi_srvp (9)
service procedure, these corner cases should
rarely be encountered.
.IP \(em
.BR getq ()
will retrieve messages from a queue that has had
.BR qprocsoff (9)
called or which is closing
.RI ( qi_qclose (9)
has been called).
.IP ""
Under
.IR LiS ,
.BR getq ()
will return
.B NULL
in these cases.
.I LiS
behavior is incorrect for these cases.
.BR qprocsoff (9)
only effects the running of queue procedures and should not affect
.BR getq ().
.IR qi_qclose (9)
may need to exchange messages with lower level queue pairs and making
.BR getq ()
return
.B NULL
during close is an
.I LiS
bug.
.IP ""
Potable
.I STREAMS
drivers and modules will use
.B "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
.BR getq ()
may be called on a Stream frozen with
.BR freezestr (9),
but it is not recommended.
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
.IR Solaris \(rg,
.[
solspg
.]
.IR SUPER-UX \(rg
.[
suxspg
.]
and
.IR UnixWare \(rg
.[
uw7spg
.]
do not permit
.BR getq ()
to be called on a Stream frozen with
.BR freezestr (9).
.IP ""
Portable
.I STREAMS
drivers and modules should not call
.BR getq ()
on a Stream frozen with
.BR freezestr (9),
they should call
.BI rmvq( q ", " q->q_first )
instead.  See
.BR rmvq (9).
.IP \(em
.IR HP-UX \(rg
.[
hpuxspg
.]
lists
.BR getq ()
as a function that can only be passed a queue in the queue pair currently
being synchronized within a module procedure.
.IR HP-UX \(rg
.[
hpuxspg
.]
also lists
.BR getq ()
as a utility that cannot be called from user functions or
.RI non- STREAMS
code; that is, contexts asynchronous to the Stream containing
.IR q .
.IP ""
.IR HP-UX \(rg
compatible drivers and modules will not call
.BR getq ()
from outside of a
.BR qinit (9)
routine for the queue pair of
.IR q .
As
.B "@PACKAGE_TITLE@"
permits this more restricted operation as a subset of its capabilities, there are no portability
issues.
.IP \(em
.IR Solaris \(rg
.[
solspg
.]
permits
.BR getq ()
to be called from outside of
.I STREAMS
(e.g., by a driver taking messages off its own write queue from an ISR, or across a multiplexing
driver).
.IP ""
As
.B "@PACKAGE_TITLE@"
permits the same, there are no portability issues.
.\".IP \(em
.\".BR getq ()
.\"cannot be called from an interrupt service routine.
.\".IP ""
.\".B @PACKAGE_TITLE@
.\"does not permit
.\".BR getq ()
.\"to be called from an interrupt service routine context to remove the need for suppressing
.\"local interrupts throughout the
.\".I STREAMS
.\"executive.  The only queue procedure that
.\".B @PACKAGE_TITLE@
.\"permits to be called from an interrupt service routine context is
.\".IR qi_putp (9),
.\"and that function defers until the next
.\".BR runqueues (9)
.\"pass.
.\".IP ""
.\"Portable
.\".I STREAMS
.\"drivers and modules will not call
.\".BR getq ()
.\"from any context outside a
.\".I STREAMS
.\"queue procedure or callback function.  At the Stream end (Stream head or driver), from a context
.\"other than a
.\".I STREAMS
.\"coroutine, only
.\".BR put (9)
.\"will be used by a portable
.\".I STREAMS
.\"driver or module.
.\".IP \(em
.\"Symbol
.\".BR lis_getq ()
.\"is provided for compatibility with
.\".IR LiS .
.\"See
.\".BR liscompat (9).
.\".BR lis_getq ()
.\"calls
.\".BR getq ()
.\"directly.
.IP \(em
All versions of
.I LiS
contain the bug that they keep track of message queue counts,
.IR q_count ,
.IR qb_count ,
in terms of the sum of the absolute sizes of the data buffers referenced by message blocks,
.RB ( "db_lim - db_base" ),
and not the sizes of the message blocks themselves,
.RB ( "b_wptr - b_rptr" ),
which does not conform to
.IR "SVR 4.2 STREAMS" .
.[
svr42spg
.]
See
.BR msgsize (9).
No other implementation has this bug.
.IP ""
Portable
.I STREAMS
applications programs, drivers and modules will use
.BR "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
.IR Solaris \(rg
documentation.
.\"
.\"
.SH HISTORY
.PP
.BR getq ()
appears as part of
.IR "SVR 4.0 STREAMS" .
.[
svr4spg
.]
.PP
.BR getq ()
first appeared in
.IR "SVR 3" .
.[
svr3spg
.]
.\"
.\"
.[
$LIST$
.]
.TI
