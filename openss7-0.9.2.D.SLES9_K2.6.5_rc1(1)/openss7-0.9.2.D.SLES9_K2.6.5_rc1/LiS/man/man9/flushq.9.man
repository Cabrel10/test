'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) flushq.9.man,v 1.1.4.5 2006/04/05 09:42:43 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:42:43 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" flushq.9.man,v
.\" Revision 1.1.4.5  2006/04/05 09:42:43  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database lis.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so lis.macros
.\"
.\"
.TH FLUSHQ 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B flushq, lis_flushq
\- flushes messages from a \fISTREAMS\fR message queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP 8
.BI "flushq(queue_t *" q ", int " flag );
.\"
.\"
.SH ARGUMENTS
.PP
.TP
.I q
the queue to flush.
.TP
.I flag
how to flush the queue.
.\"
.\"
.SH DESCRIPTION
.PP
.BR flushq ()
is used to flush messages from a
.I STREAMS
message queue.  It is typically
called in a
.B M_FLUSH
handling routine to flush the requested messages from a queue.
.PP
The arguments to
.B flushq
are interpreted as follows:
.TP 8
.I q
The queue to flush.
.TP 8
.I flag
How to flush the queue.
.I flag
can be one of the following:
.RS
.TP 12
.B FLUSHDATA
Flush only data messages; do not flush the control messages from the queue.
.PD 0
.TP 12
.B FLUSHALL
Flush all the messages from queue: both data messages and control messages.
.PD
.RE
.PP
If
.I flag
is other than
.BR FLUSHDATA " or " FLUSHALL
.BR flushq ()
will perform
.BR FLUSHALL .
.\"
.\"
.SH RETURN
.PP
.BR flushq ()
returns
.BR void .
.\"
.\"
.SH ERRORS
.PP
If the
.I q
passed to
.BR flushq ()
is
.BR NULL ,
or the
.I q
does not point to a valid queue structure, then
.BR flushq ()
will silently fail.
.\"
.\"
.SH CONTEXT
.PP
.BR flushq ()
can be called from any context, including user context, module procedures,
callouts, callbacks, soft interrupts and interrupt service routines.
.PP
Because
.BR flushq ()
can take some time to process if there are many messages on the queue or
.I flags
is
.BR FLUSHDATA ,
.BR flushq ()
should not be called from interrupt service routines or functions with
interrupts disabled or global locks held.
.\"
.\"
.SH MP-STREAMS
.PP
.BR flushq ()
is MP-safe.
.\"
.\"
.SH NOTICES
.PP
.B LiS
.[
LiS
.]
implements the call to
.BR flushq (9)
.BI flushq( q ", " band )
as a call to
.BI flushband( q ", " 0 ", " flag ).
.\"
.\"
.SH EXAMPLES
.PP
.BR flushq ()
is normally used within the
.B M_FLUSH
handling procedures for a
.I STREAMS
module or driver as follows:
.sp
.in +4
.nf
\fC\s-2\
int x_w_flush(queue_t *q, mblk_t *mp)
{
    if (*mp->b_rptr & FLUSHW) {
        if (*mp->b_rptr & FLUSHBAND)
            flushband(WR(q), mp->b_rptr[1], FLUSHALL);
        else
            flushq(WR(q), FLUSHALL);
        if (q->q_next) {
            putnext(q, mp);
            return (0);
        }
        *mp->b_rptr &= ~FLUSHW;
    }
    if (*mp->b_rptr & FLUSHR) {
        if (*mp->b_rptr & FLUSHBAND)
            flushband(RD(q), mp->b_rptr[1], FLUSHALL);
        else
            flushq(RD(q), FLUSHALL);
        if (!q->q_next) {
            qreply(q, mp);
            return (0);
        }
        *mp->b_rptr &= ~FLUSHR;
    }
    freemsg(mp);
    return (0);
}
int x_r_flush(queue_t *q, mblk_t *mp)
{
    if (*mp->b_rptr & FLUSHR) {
        if (*mp->b_rptr & FLUSHBAND)
            flushband(RD(q), mp->b_rptr[1], FLUSHALL);
        else
            flushq(RD(q), FLUSHALL);
        if (q->q_next) {
            putnext(q, mp);
            return (0);
        }
        *mp->b_rptr &= ~FLUSHR;
    }
    if (*mp->b_rptr & FLUSHW) {
        if (*mp->b_rptr & FLUSHBAND)
            flushband(WR(q), mp->b_rptr[1], FLUSHALL);
        else
            flushq(WR(q), FLUSHALL);
        if (!q->q_next) {
            qreply(q, mp);
            return (0);
        }
        *mp->b_rptr &= ~FLUSHW;
    }
    freemsg(mp);
    return (0);
}
\s+2\fR
.fi
.PP
In addition,
.BR flushq ()
is often used when closing or
.BR I_UNLINK ing
a stream as follows:
.sp
.in +4
.nf
\fC\s-2\
void x_free_priv(queue_t *q)
{
    priv_t *p = (priv_t *) q->q_ptr;
    flushq(RD(q), FLUSHALL);
    flushq(WR(q), FLUSHALL);
    /* free some more stuff */
    free(p);
    RD(q)->q_ptr = WR(q)->q_ptr = NULL;
    return;
}
\s+2\fR
.fi
.\"
.\"
.SH "SEE ALSO"
.PP
.BR freezestr (9),
.BR flushband (9).
.\"
.\"
.SH BUGS
.PP
.BR flushq ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR flushq ()
is compatible with
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
and implementations based on
.IR "SVR 4" ,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.B LiS
removes all messages from the queue and then rebuilds the queue one message at a
time while freeing those to be flushed.  This is a rather inefficient way to do
things, and with
.B LiS
running at higher priority than soft interrupts, bottom halves and timeouts, all
these are locked out until the flush is complete.
.IP \(em
.B LiS
empties the queue and unlocks the queue and then goes about adding messages back
onto the queue that need to remain using normal utility functions.  This means
that order is not necessarily preserved (even for messages that were on the
queue) with concurrent calls to
.BR putq (9),
.BR insq (9),
.BR appq (9),
.BR rmvq (9)
or
.BR putbq (9)
functions.  Also, queue enabling and back-enabling will not necessary be
performed correctly.  There doesn't seem to be any excuse for the
.B LiS
approach, removing messages from the queue,
.BR rmvq (9),
is no more difficult than inserting them,
.BR insq (9).
.IP \(em
.B LiS
clears the
.B QWANTR
flag when flushing an empty queue.  This means that the next call to
.BR getq (9)
for the empty queue will perform an extra back-enable.
.IP \(em
.BR flushq ()
may be called on a stream frozen with
.BR freezestr (9).
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
.IR Solaris \(rg,
.[
solspg
.]
.IR SUPER-UX \(rg
.[
suxspg
.]
and
.IR UnixWare \(rg
.[
uw7spg
.]
do not permit
.BR flushq ()
to be called on a stream frozen with
.BR freezestr (9).
Portable
.I STREAMS
drivers and modules should not call
.BR flushq ()
on a stream frozen with
.BR freezestr (9).
.PP
For a fully functional
.I STREAMS
implementation, use
.BR "Linux Fast-STREAMS" .
.[
LfS
.]
.\"
.\"
.SH CONFORMANCE
.PP
SVR 4.2 MP DDI/DKI,
.[
usldk
.]
.\"
.\"
.SH HISTORY
.PP
.BR flushq ()
first appeared in SVR 3.
.[
svr3
.]
.\"
.\"
.[
$LIST$
.]
.TI
