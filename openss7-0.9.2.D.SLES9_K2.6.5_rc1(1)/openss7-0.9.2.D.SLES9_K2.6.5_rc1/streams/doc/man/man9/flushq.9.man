'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) flushq.9.man,v 0.9.2.28 2006/04/05 09:44:12 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:12 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" flushq.9.man,v
.\" Revision 0.9.2.28  2006/04/05 09:44:12  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH FLUSHQ 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B flushq
\- flushes messages from a \fISTREAMS\fR message queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP
.BI "void flushq(queue_t *" q ", int " flag ");
.\"
.\"
.SH ARGUMENTS
.TP
.I q
the queue to flush.
.PD 0
.TP
.I flag
how to flush the queue.
.PD
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
.BR flushq ()
is used to flush messages from a message queue.
It is typically called in a
.BR M_FLUSH (9)
handling routine to flush the requested messages from a queue.
.PP
.I flag
can be one of the following:
.TP \w'\ FLUSHDATA\ 'u
.B FLUSHDATA
Flush only data messages; do not flush the control messages from the queue.
.PD 0
.TP
.B FLUSHALL
Flush all the messages from queue: both data messages and control messages.
.PD
.PP
If
.I flag
is other than
.BR FLUSHDATA " or " FLUSHALL
.BR flushq ()
will perform
.BR FLUSHALL .
.PP
If
.B QWANTW
is set for the queue and the flush causes the queue's count to fall below the low water mark, or if
the queue's count is reduced to zero, the nearest feeding queue with a
.IR qi_srvp (9)
procedure or that is a
stream head or stream end (including a multiplexing driver) will be enabled.  That is, back-enabling
will be performed.  The
.B QFULL
and
.B QWANTW
flags will also be cleared.
.\"
.\"
.SH RETURN
.PP
.BR flushq ()
flushes the queue and then returns
.BR void .
.\"
.\"
.SH ERRORS
.PP
.BR flushq ()
always succeeds.
.\"
.\"
.SH CONTEXT
.PP
.BR flushq ()
can be called from any context, including user context, module procedures, callouts, callbacks, soft
interrupts (tasklets and bottom halves), and interrupt service routines.
.\"
.\"
.SH MP-STREAMS
.PP
.BR flushq ()
is MP-safe when called from any context; however, the caller is responsibility for the validity of
the passed in
.I q
pointer across the call.
.PP
The validity of either queue in the pair, and either
.I q_next
pointer for a queue in the pair, for the queue pointer passed to a module
procedure, callout or synchronous callback functions, is guaranteed by
.BR "@PACKAGE_TITLE@" .
Any queue pointer in the pair passed as an argument to an asynchronous callback
function are also valid, providing the driver or module observes the rules for
cancellation of asynchronous callbacks on close.
.BR "@PACKAGE_TITLE@"
also provides that a queue pointer in the pair within whose procedures an
asynchronous callback was invoked, and either
.I q_next
pointer, are also valid in an asynchronous callback.
.\"
.\"
.\".SH NOTICES
.\".PP
.\"
.\"
.SH IMPLEMENTATION
.PP
.BR flushq ()
performs fast flushes by linking all band messages into the per-thread free
messages list.  These messages will then later be broken into individual
message blocks and freed to the per-thread free list and finally to the
.B mdbblock
memory cache at the end of any queue run.  A new queue service run will be
scheduled if one is not already running.
.PP
.BR flushq ()
is well optimized to handle the initial stage of
.B FLUSHALL
flushes in constant time.
.\"
.\"
.SH EXAMPLES
.SS Example #1
.PP
.BR flushq ()
is normally used within the
.BR M_FLUSH (9)
handling procedures for a
.I STREAMS
driver or module as follows:
.PP
.nf
\fC\s-2\
 1  int
 2  x_w_flush(queue_t *q, mblk_t *mp)
 3  {
 4      if (*mp->b_rptr & FLUSHW) {
 5          if (*mp->b_rptr & FLUSHBAND
 6              && mp->b_rptr[1] != 0)
 7              flushband(WR(q), mp->b_rptr[1], FLUSHALL);
 8          else
 9              flushq(WR(q), FLUSHALL);
10          if (q->q_next) {
11              putnext(q, mp);
12              return (0);
13          }
14          *mp->b_rptr &= ~FLUSHW;
15      }
16      if (*mp->b_rptr & FLUSHR) {
17          if (*mp->b_rptr & FLUSHBAND
18              && mp->b_rptr[1] != 0)
19              flushband(RD(q), mp->b_rptr[1], FLUSHALL);
20          else
21              flushq(RD(q), FLUSHALL);
22          if (!q->q_next) {
23              qreply(q, mp);
24              return (0);
25          }
26          *mp->b_rptr &= ~FLUSHR;
27      }
28      freemsg(mp);
29      return (0);
30  }
31  
32  int
33  x_r_flush(queue_t *q, mblk_t *mp)
34  {
35      if (*mp->b_rptr & FLUSHR) {
36          if (*mp->b_rptr & FLUSHBAND
37              && mp->b_rptr[1] != 0)
38              flushband(RD(q), mp->b_rptr[1], FLUSHALL);
39          else
40              flushq(RD(q), FLUSHALL);
41          if (q->q_next) {
42              putnext(q, mp);
43              return (0);
44          }
45          *mp->b_rptr &= ~FLUSHR;
46      }
47      if (*mp->b_rptr & FLUSHW) {
48          if (*mp->b_rptr & FLUSHBAND
49              && mp->b_rptr[1] != 0)
50              flushband(WR(q), mp->b_rptr[1], FLUSHALL);
51          else
52              flushq(WR(q), FLUSHALL);
53          if (!q->q_next) {
54              qreply(q, mp);
55              return (0);
56          }
57          *mp->b_rptr &= ~FLUSHW;
58      }
59      freemsg(mp);
60      return (0);
61  }
\s+2\fR
.fi
.SS Example #2
.PP
.BR flushq ()
is often used when closing or
.BR I_UNLINK ing
a stream as follows:
.PP
.nf
\fC\s-2\
 1  void
 2  x_free_priv(queue_t *q)
 3  {
 4      priv_t *p = (priv_t *) q->q_ptr;
 5  
 6      flushq(RD(q), FLUSHALL);
 7      flushq(WR(q), FLUSHALL);
 8      /* free some more stuff */
 9      free(p);
10      RD(q)->q_ptr = WR(q)->q_ptr = NULL;
11      return;
12  }
\s+2\fR
.fi
.\"
.\"
.SH "SEE ALSO"
.PP
.BR freezestr (9),
.BR flushband (9).
.\"
.\"
.SH BUGS
.PP
.BR flushq ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR flushq ()
is compatible with
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
and implementations based on
.IR "SVR 4" ,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.BR flushq ()
moves messages from the queue to the per-CPU free chains list.  Freeing blocks
on the free chains list will be deferred to the next
.BR runqueues (9)
pass.  The next
.BR runqueues (9)
pass frees message blocks from the flush to the per-CPU free blocks list for
use by
.IR qi_srvp (9)
procedures in the pass.
.BR runqueues (9)
runs a normal soft interrupt priority.
.I LiS
removes all messages from the queue and then rebuilds the queue one
message at a time while freeing those to be flushed.  This is a rather
inefficient way to do things, and with
.I LiS
running at higher priority than
soft interrupts, bottom halves and timeouts, all these are locked out until
the flush is complete.
.B @PACKAGE_TITLE@
.BR flushq ()
should have far less of an impact on system latency and performance as that of
.IR LiS .
.IP ""
Performing
.I STREAMS
drivers and modules will use
.B "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
.BR flushq ()
holds the queue write lock while removing selected messages or unlinking
entire bands.  Order is preserved across concurrent attempts to perform
.BR putq (9),
.BR insq (9),
.BR appq (9),
.BR rmvq (9)
or
.BR putbq (9)
functions.
.I LiS
empties the queue and unlocks the queue and then goes about adding
messages back onto the queue that need to remain using normal utility
functions.  This means that order is not necessarily preserved (even for messages
that were on the queue) with concurrent calls to
.BR putq (9),
.BR insq (9),
.BR appq (9),
.BR rmvq (9)
or
.BR putbq (9)
functions.
Also, queue enabling and back-enabling will not necessary be performed
correctly.
There doesn't seem to be any excuse for the
.I LiS
approach, removing messages
from the queue,
.BR rmvq (9),
is no more difficult than inserting them,
.BR insq (9).
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
.BR flushq ()
does not clear the
.B QWANTR
flag when flushing an empty queue.  This is an indication to the
.I STREAMS
scheduler that
.BR getq (9)
read an empty queue and back-enabling has already been performed for the queue.
.I LiS
clears the
.B QWANTR
flag when flushing an empty queue.  This means that the next call to
.BR getq (9)
for the empty queue will perform an extra back-enable.
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
.BR flushq ()
may be called on a stream frozen with
.BR freezestr (9).
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
.IR Solaris \(rg,
.[
solspg
.]
.IR SUPER-UX \(rg
.[
suxspg
.]
and
.IR UnixWare \(rg
.[
uw7spg
.]
do not permit
.BR flushq ()
to be called on a stream frozen with
.BR freezestr (9).
.IP ""
Portable
.I STREAMS
drivers and modules will not call
.BR flushq ()
on a Stream frozen by the caller with
.BR freezestr (9).
.IP \(em
.IR HP-UX \(rg
.[
hpuxspg
.]
lists
.BR flushq ()
as a function that can only be passed a queue in the queue pair currently
being synchronized within a module procedure.
.IR HP-UX \(rg
.[
hpuxspg
.]
also lists
.BR flushq ()
as a utility that cannot be called from user functions or
.RI non- STREAMS
code; that is, contexts asynchronous to the Stream containing
.IR q .
.IP ""
.IR HP-UX \(rg
compatible drivers and modules will not call
.BR flushq ()
from outside of a
.BR qinit (9)
routine for the queue pair of
.IR q .
As
.B "@PACKAGE_TITLE@"
permits this more restricted operation as a subset of its capabilities, there are no portability
issues.
.IP \(em
.IR Solaris \(rg
.[
solspg
.]
permits
.BR flushq ()
to be called from outside of
.I STREAMS
(e.g., by a driver flushing its own write queue from an ISR, or across a multiplexing
driver).
.IP ""
As
.B "@PACKAGE_TITLE@"
permits the same, there are no portability issues.
.IP \(em
.\"Symbol
.\".BR lis_flushq ()
.\"is provided for compatibility with
.\".IR LiS .
.\"See
.\".BR liscompat (9).
.\".BR lis_flushq ()
.\"calls
.\".BR flushq ()
.\"directly.
.I LiS
appears to be rather buggy with regard to flushing queues and
.BR flushq ()
may behave rather different from that of
.IR LiS .
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP DDI/DKI" .
.[
usldk
.]
.\"
.\"
.SH HISTORY
.PP
.BR flushq ()
appears as part of
.IR "SVR 4.0 STREAMS" .
.[
svr4spg
.]
.PP
.BR flushq ()
first appeared in
.IR "SVR 3" .
.[
svr3
.]
.\"
.\"
.[
$LIST$
.]
.TI
