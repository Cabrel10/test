'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) putnext.9.man,v 0.9.2.27 2006/04/05 10:05:05 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 10:05:05 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" putnext.9.man,v
.\" Revision 0.9.2.27  2006/04/05 10:05:05  brian
.\" - get references in right place
.\"
.\" Revision 0.9.2.26  2006/04/05 09:44:15  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH PUTNEXT 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B putnext
\- put a message on the downstream \fISTREAMS\fR message queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP
.BI "void putnext(queue_t *" q ", mblk_t *" mp );
.\"
.\"
.SH ARGUMENTS
.TP
.I q
the queue beyond which to put the message.
.PD 0
.TP
.I mp
the message to put beyond the queue.
.PD
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
.BR putnext ()
invokes the
.I q->q_next->q_info->qi_putp
.IR qi_putp (9)
procedure of the queue
.I q->q_next
with the message pointed to by
.IR mp.
.PP
.BR putnext ()
is normally invoked from within the
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedure belonging to
queue
.IR q .
.PP
It is the responsibility of a procedure calling
.BR putnext ()
with a normal message pointed to by
.I mp
to first call
.BR canputnext (9)
or
.BR bcanputnext (9)
for the queue to check for flow control.
If
.BR canputnext (9)
or
.BR bcanputnext (9)
fails for queue
.IR q ,
the procedure should not normally invoke
.BR putnext ()
with a low priority message for the flow controlled queue
.IR q->q_next .
.PP
.BR putnext ()
will wake up any processes waiting with
.BR qwait (9)
or
.BR qwait_sig (9)
on the next queue,
.IR q->q_next .
.\"
.\"
.SH RETURN
.PP
.BR putnext ()
returns void.
.\"
.\"
.SH ERRORS
.PP
.BR putnext ()
fails silently when a queue band structure cannot be allocated for the band
specified in
.IR mp->b_band .
The caller can ensure that a queue band structure exists for the band in quest
by calling
.BR strqset (9)
for the band.
.\"
.\"
.SH CONTEXT
.PP
.BR putnext ()
can be called from any context, including user context, module procedures,
callouts, callbacks, soft interrupts (tasklets and bottom halves), and interrupt
service routines.  Consideration must be given when calling
.BR putnext ()
from interrupt service routine context that the next module in the Stream
might not be prepared to be called at interrupt service routine context.
.\"
.\"
.SH MP-STREAMS
.PP
.BR putnext ()
is MP-safe; however, the caller must ensure exclusive access to the passed in
message,
.IR mp .
The driver or module
.IR qi_putp (9)
procedure invoked must also be MP-safe.  Under
.B Linux Fast-STREAMS
any
.BR put (9)
procedure can be executed concurrently with any queue
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_putp (9),
.IR qi_srvp (9)
procedure,
.BR esbbcall (9),
.BR bufcall (9),
.BR qbufcall (9),
.BR timeout (9),
.BR qtimeout (9),
callback function, software interrrupt, tasklet, bottom half, or interrupt
service routine.  Either the driver or module must be synchronized using
.I STREAMS
synchronization levels, or the
.IR qi_putp (9)
procedure itself must perform its own mutual exclusion.
.\"
.\"
.\".SH NOTICES
.\".PP
.\"
.\"
.\".SH NOTICES
.\".PP
.\"
.\"
.\".SH EXAMPLES
.\".PP
.\"
.\"
.SH "SEE ALSO"
.PP
.BR putq (9),
.BR canputnext (9),
.BR bcanputnext (9),
.BR freezestr (9),
.BR unfreezestr (9),
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_putp (9),
.IR qi_srvp (9),
.BR esbbcall (9),
.BR bufcall (9),
.BR qbufcall (9),
.BR timeout (9),
.BR qtimeout (9).
.\"
.\"
.SH BUGS
.PP
.BR putnext ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR putnext ()
is compatible with
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
and implementations based on
.I SVR 4
.[
svr4dk
.]
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.BR putnext ()
results are undefined if the arguments
.IR q " or " mp
is invalid.
Under
.IR LiS ,
.BR putnext ()
fails silently if
.I q->q_next
has a
.I q_info
pointer of
.BR NULL ;
the queue pointed to by
.I q->q_next
has no
.IR qi_putp (9)
procedure; or the
queue pointed to by
.I q->q_next
is closing, or the queue has had
.IR qi_putp (9)
and
.IR qi_srvp (9)
procedure processing turned off
(e.g. with
.BR qprocsoff (9)).
.IP \(em
.BR putnext ()
is MP-safe across pushes and pops of modules and other Stream reconfiguration
because it protects dereference of the
.I q->q_next
pointer with the Stream head read lock.
Under
.IR LiS ,
.BR putnext ()
simply calls
.BR put ()
with the
.I q->q_next
pointer.
.IP \(em
.IR HP-UX \(rg
.[
hpuxspg
.]
lists
.BR putnext ()
as a function that can only be passed a queue in the queue pair currently
being synchronized within a module procedure.
.IR HP-UX \(rg
.[
hpuxspg
.]
also lists
.BR putnext ()
as a utility that cannot be called from user functions or
.RI non- STREAMS
code; that is, contexts asynchronous to the Stream containing
.IR q .
.IP ""
.IR HP-UX \(rg
compatible drivers and modules will not call
.BR putnext ()
from outside of a
.BR qinit (9)
routine for the queue pair of
.IR q .
.IP \(em
.BR put "(9), " putnext "(), " qreply (9)
will invoke a queue's
.IR qi_putp (9)
procedure shared and multi-threaded.
.IP ""
This is equivalent to
.IR Solaris \(rg
drivers with the
.B D_MP
flag set or with the
.B D_MTPUTSHARED
flag set.
.IP ""
.I LiS
holds an exclusive nesting queue procedures lock while calling
.BR putnext ()
executes.
.I LiS
.BR lis_safe_putnext ()
and
.BR lis_safe_qreply (9)
call the
.BR lis_safe_putmsg (9)
function, meaning that all message passing functions in
.I LiS
lock out interrupts until the entire thread of execution completes.
.I LiS
drivers and modules calling
.BR putnext ()
should notice superior interrupt service routine latency and performance.  It is normally the case
that
.IR qi_putp (9)
procedures are MP-safe as they normally use only MP-safe queue and message utility
functions.  Also, most
.IR qi_putp (9)
procedures are inherently invoked single threaded (from a single-threaded
.IR qi_srvp (9)
procedure).  Lack of locking should not present a problem.
.IP ""
Because
.I LiS
also uses this lock for
.IR qi_srvp (9)
procedures, this means that while the
.I LiS
scheduler is running (at kernel thread priority 50), interrupts, timeouts, bottom halves, hi
tasklets and soft interrupts are indefinitely postponed.  This is not acceptable for soft real-time
performance.  Rewrite
.I LiS
.IR qi_putp (9)
procedures to be MP-safe.
.IP \(em
.IR UnixWare \(rg
.[
uw7spg
.]
and
.IR SUPER-UX \(rg
.[
suxspg
.]
do not permit
.BR putnext ()
to be called on a Stream frozen with
.BR freezestr (9).
.IP ""
Portable
.I STREAMS
drivers and modules will not call
.BR putnext ()
on a Stream frozen by the caller with
.BR freezestr (9).
.\".IP \(em
.\"Symbol
.\".BR lis_safe_putnext ()
.\"is provided for binary compatibility with
.\".IR LiS .
.\"See
.\".BR liscompat (9).
.\".BR lis_safe_putnext ()
.\"simply calls
.\".BR putnext ().
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP DDI/DKI" .
.[
usldk
.]
.\"
.\"
.SH HISTORY
.PP
.BR putnext ()
appears as part of
.IR "SVR 4.0 STREAMS" .
.[
svr4spg
.]
.PP
.BR putnext ()
first appeared in
.IR "SVR 3" .
.[
svr3spg
.]
In
.IR "SVR 3" ,
.I SVR 4
and
.IR "SVR 4.2" ,
.BR putnext ()
returned
.BR int .
.[
svr3spg
.]
.[
svr4dk
.]
.[
usldk
.]
.\"
.\"
.[
$LIST$
.]
.TI
