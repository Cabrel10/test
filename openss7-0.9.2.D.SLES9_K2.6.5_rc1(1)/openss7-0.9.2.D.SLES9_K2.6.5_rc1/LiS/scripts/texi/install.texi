@c -*- texinfo -*- vim: ft=texinfo
@c =========================================================================
@c
@c @(#) install.texi,v 0.9.2.26 2006/07/03 06:04:44 brian Exp
@c
@c =========================================================================
@c
@c Copyright (c) 2001-2006  OpenSS7 Corporation <www.openss7.com>
@c Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
@c
@c All Rights Reserved.
@c
@c Permission is granted to make and distribute verbatim copies of this
@c manual provided the copyright notice and this permission notice are
@c preserved on all copies.
@c
@c Permission is granted to copy and distribute modified versions of this
@c manual under the conditions for verbatim copying, provided that the
@c entire resulting derived work is distributed under the terms of a
@c permission notice identical to this one.
@c 
@c Since the Linux kernel and libraries are constantly changing, this
@c manual page may be incorrect or out-of-date.  The author(s) assume no
@c responsibility for errors or omissions, or for damages resulting from
@c the use of the information contained herein.  The author(s) may not
@c have taken the same level of care in the production of this manual,
@c which is licensed free of charge, as they might when working
@c professionally.
@c 
@c Formatted or processed versions of this manual, if unaccompanied by
@c the source, must acknowledge the copyright and authors of this work.
@c
@c -------------------------------------------------------------------------
@c
@c U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
@c on behalf of the U.S. Government ("Government"), the following
@c provisions apply to you.  If the Software is supplied by the Department
@c of Defense ("DoD"), it is classified as "Commercial Computer Software"
@c under paragraph 252.227-7014 of the DoD Supplement to the Federal
@c Acquisition Regulations ("DFARS") (or any successor regulations) and the
@c Government is acquiring only the license rights granted herein (the
@c license rights customarily provided to non-Government users).  If the
@c Software is supplied to any unit or agency of the Government other than
@c DoD, it is classified as "Restricted Computer Software" and the
@c Government's rights in the Software are defined in paragraph 52.227-19
@c of the Federal Acquisition Regulations ("FAR") (or any successor
@c regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
@c NASA Supplement to the FAR (or any successor regulations).
@c
@c =========================================================================
@c 
@c Commercial licensing and support of this software is available from
@c OpenSS7 Corporation at a fee.  See http://www.openss7.com/
@c 
@c =========================================================================
@c
@c Last Modified 2006/07/03 06:04:44 by brian
@c
@c =========================================================================

@menu
* Downloading::			Downloading the package
* Configuration::		Configuration of the package
* Building::			Building the package
* Installing::			Installing the package
* Removing::			Removing the package
* Loading::			Loading the package
* Maintenance::			Maintaining the package
@end menu

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Downloading
@section Downloading
@cindex downloading

The @value{PACKAGE_TITLE} package releases can be downloaded from the downloads
page of @uref{http://www.openss7.org/download.html, The OpenSS7 Project}.  The
package is available as a binary RPM (for popular architectures) a source RPM,
Debian binary DEB and source DSC, or as a tar ball.  If you are using a
browsable viewer, you can obtain the OpenSS7 release of
@command{@value{PACKAGE_NAME}} from the links in the sections that follow.

By far the easiest form for installing and using
@command{@value{PACKAGE}-@value{VERSION}} is to download and install binary RPM.
If a binary RPM is not available for your distribution,  but your distribution
supports RPM, the next best method for installing and using
@command{@value{PACKAGE}-@value{VERSION}} is to download and rebuild the source
RPM.  If your architecture does not support RPM at all, or you have special
needs (such as cross-compiling for embedded targets), the final resort method is
to download, configure, build and install from the source tarball.

@menu
* Downloading the Binary RPM::		the easiest approach
* Downloading the Debian DEB::		the easiest approach for Debian
* Downloading the Source RPM::		the next best approach
* Downloading the Debian DSC::		the next best approach for Debian
* Downloading the Tar Ball::		last resort
* Downloading from CVS::		mid-release download
@end menu

@c ----------------------------------------------------------------------------

@node Downloading the Binary RPM
@subsection Downloading the Binary RPM
@cindex downloading, binary rpms
@cindex binary rpms

To install from binary RPM, you will need several of the RPM for a complete
installation.  Binary RPM fall into several categories.  To download and install a
complete package requires the appropriate RPM from each of the several categories
below, as applicable.  Some release packages do not provide RPMs in each of the
several categories.

To install from Binary RPM, you will need all of the following kernel
indepdendent packages for your architecture, and one of the kernel-depdendent
packages from the next section.

@subsubheading Independent RPM
Independent RPM are
dependent on neither the Linux kernel version, nor the STREAMS package.
For example, the
source package
@samp{@value{PACKAGE}@--source@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm},
is not dependent on
kernel nor STREAMS package.

@noindent
All of the following kernel and STREAMS independent RPM are required for your architecture.
Binary RPMs listed here are for example only: additional binary RPMs are
available from the downloads site.  If your architecture is not available, you
can build binary RPM from the source RPM (see @pxref{Building from the Source
RPM}).

@subsubheading Architecture Independent
@table @asis
@item @uref{http://www.openss7.org/@-rpms/@-RPMS/@-noarch/@-@value{PACKAGE}@--dev@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm, @value{PACKAGE}@--dev@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}
The @file{@value{PACKAGE}@--dev} package contains the device definitions necessary
to run applications programs developed for @value{PACKAGE_TITLE}.@footnote{Not
all distributions support the @samp{%dev} RPM macro: a case in point is the SuSE
8.0 distribution which uses an older version of @command{rpm}.  Distributions
that do not support the @samp{%dev} macro will build devices as a @samp{%post}
operation.  Note also that not all release packages contain devices.  Only
packages that provide STREAMS character device drivers need devices, and then
only when the @samp{specfs} or @samp{devfsd} is not being used.}

@item @uref{http://www.openss7.org/@-rpms/@-RPMS/@-noarch/@-@value{PACKAGE}@--doc@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm, @value{PACKAGE}@--doc@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}
The @file{@value{PACKAGE}@--doc} package contains this manual in plaintext,
postscript, PDF and HTML forms, along with the meta-information from the
@file{@value{PACKAGE_NAME}} package.  It also contains all of the manual pages
necessary for developing @value{PACKAGE_TITLE} applications and
@value{PACKAGE_TITLE} STREAMS modules or drivers.

@item @uref{http://www.openss7.org/@-rpms/@-RPMS/@-noarch/@-@value{PACKAGE}@--init@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm, @value{PACKAGE}@--init@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}
The @file{@value{PACKAGE}@--init} package contains the init scripts and provides
the postinst scripts necessary to create kernel module preloads and modules
definitions for all kernel module @samp{core} subpackages.

@item @uref{http://www.openss7.org/@-rpms/@-RPMS/@-noarch/@-@value{PACKAGE}@--source@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm, @value{PACKAGE}@--source@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}
The @file{@value{PACKAGE}@--source} package contains the source code necessary for
building the @value{PACKAGE_TITLE} release.  It includes the @command{autoconf}
configuration utilities necessary to create and distribute tarballs, rpms and
deb/dscs.
@footnote{Note that not all releases have source RPM packages.  Release packages
that do not contain kernel modules do not generate a source RPM package.}
@end table

@subsubheading Architecture Dependent
@table @asis
@item @uref{http://www.openss7.org/@-rpms/@-RPMS/@-i686/@-@value{PACKAGE}@--devel@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm, @value{PACKAGE}@--devel@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--devel} package contains library archives for static
compilation, header files to develop @value{PACKAGE_TITLE} modules and drivers.
This also includes the header files and static libraries required to compile
@value{PACKAGE_TITLE} applications programs.

@item @uref{http://www.openss7.org/@-rpms/@-RPMS/@-i686/@-@value{PACKAGE}@--lib@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm, @value{PACKAGE}@--lib@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--lib} package contains the run-time shared libraries
necessary to run application programs and utilities developed for the
@file{@value{PACKAGE_NAME}} package.
@footnote{Note that not all release packages contain shared libraries, and,
therefore, not all release packages contain this package.}

@ignore
@item @uref{http://www.openss7.org/@-rpms/@-RPMS/@-i686/@-@value{PACKAGE}@--util@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm, @value{PACKAGE}@--util@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--util} package provides administrative and
configuration test utilities and commands associated with the
@value{PACKAGE_TITLE} package.
@end ignore
@end table

@subsubheading STREAMS-Dependent RPM
STREAMS-Dependent RPM are dependent upon the specific STREAMS package being
used, either @cite{Linux STREAMS} or @cite{Linux Fast-STREAMS}.  Packages
dependent upon @cite{Linux STREAMS} will have @file{LiS} in the package name.
Packages dependent upon @cite{Linux Fast-STREAMS} will have @file{streams} in
the package name.  Note that some STREAMS-Dependent RPM are also
Kernel-Dependent RPM as described below.

@noindent
One of the following STREAMS-Dependent packages is required for your
architecture.  If your architecture is not on the list, you can build binary RPM
from the source RPM (see @pxref{Building from the Source RPM}).

@table @asis
@item @uref{http://www.openss7.org/@-rpms/@-RPMS/@-i686/@-@value{PACKAGE}@--LiS@--util@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm, @value{PACKAGE}@--LiS@--util@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--LiS@--util} package provides administrative and
configuration test utilities and commands associated with the
@value{PACKAGE_TITLE} package.  Because this package must link a
STREAMS-specific library, it is a STREAMS-Dependent package.  Use the
@file{@value{PACKAGE}@--LiS@--util} package if you have LiS installed.

@item @uref{http://www.openss7.org/@-rpms/@-RPMS/@-i686/@-@value{PACKAGE}@--streams@--util@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm, @value{PACKAGE}@--streams@--util@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--streams@--util} package provides administrative and
configuration test utilities and commands associated with the
@value{PACKAGE_TITLE} package.  Because this package must link a
STREAMS-specific library, it is a STREAMS-Dependent package.  Use the
@file{@value{PACKAGE}@--streams@--util} package if you have streams installed.
@end table

@subsubheading Kernel-Dependent RPM
Kernel-Dependent RPM are dependent on specific Linux Kernel Binary RPM releases.
Packages are provided for popular released @cite{RedHat} kernels.  Packages
dependent upon @cite{RedHat} or other kernel RPM will have the @samp{_kversion}
kernel package version in the package name.

One of the following Kernel-Dependent packages is required for your architecture
and kernel version.  If your architecture or kernel version is not on the list,
you can build binary RPM from the source RPM (see @pxref{Building from the
Source RPM}).@footnote{Note that on @cite{Mandrakelinux}, unlike other RPM
kernel distributions, kernel packages for the ix86 architectures are always
placed in i586 architecture packages regardless of the true processor
architecture of the kernel package.  @command{configure} detects this and builds
the appropriate packages.}

@table @asis
@item @uref{http://www.openss7.org/@-rpms/@-RPMS/@-i686/@-@value{PACKAGE}@--core@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm, @value{PACKAGE}@--core@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--core} package contains the loadable kernel modules
that depend only on the kernel.  This package is heavily tied to the kernel for
which it was compiled.  This particular package applies to kernel version
@samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.  Note also that only release
packages that contain kernel modules will contain a @file{core} subpackage.}

@item @uref{http://www.openss7.org/@-rpms/@-RPMS/@-i686/@-@value{PACKAGE}@--info@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm, @value{PACKAGE}@--info@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--info} package@footnote{Note that only release packages
that contain kernel modules and that export versioned symbols will contain a
@file{info} subpackage.  Also, this subpackage is only applicable to 2.4 series
kernels and is not necessary and not built for 2.6 series kernels.} contains the
module symbol version information for the @file{core} subpackage, above.  It is
possible to load this subpackage and compile modules that use the exported
symbols without loading the actual kernel modules (from the @file{core}
subpackage above).  This package is heavily tied to the kernel for which it was
compiled.  This particular package applies to kernel version
@samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.}

@item @uref{http://www.openss7.org/@-rpms/@-RPMS/@-i686/@-@value{PACKAGE}@--LiS@--core@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm, @value{PACKAGE}@--LiS@--core@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--LiS@--core} package contains the kernel modules that
provide the @value{PACKAGE_TITLE} STREAMS modules and drivers.  This package is
heavily tied to the STREAMS package and kernel for which it was compiled.  This
particular package applies to @file{LiS} (@cite{Linux STREAMS}) on kernel
version @samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.}

@item @uref{http://www.openss7.org/@-rpms/@-RPMS/@-i686/@-@value{PACKAGE}@--streams@--core@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm, @value{PACKAGE}@--streams@--core@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--streams@--core} package contains the kernel modules that
provide the @value{PACKAGE_TITLE} STREAMS modules and drivers.  This package is
heavily tied to the STREAMS package and kernel for which it was compiled.  This
particular package applies to @file{streams} (@cite{Linux Fast@--STREAMS}) on
kernel version @samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion}
of @samp{@value{_kversion}} is only an example.}

@item @uref{http://www.openss7.org/@-rpms/@-RPMS/@-i686/@-@value{PACKAGE}@--LiS@--info@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm, @value{PACKAGE}@--LiS@--info@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--LiS@--info} package@footnote{Note that only release
packages that contain kernel modules and that export versioned symbols will
contain a @file{LiS@--info} subpackage.} contains the module symbol version
information for the @file{LiS@--core} subpackage, above.  It is possible to load
this subpackage and compile modules that use the exported symbols without loaded
the actual kernel modules (from the @file{LiS@--core} subpackage above).  This
package is heavily tied to the STREAMS package and kernel for which it was
compiled.  This particular package applies to @file{LiS} (@cite{Linux STREAMS})
on kernel version @samp{@value{_kversion}}.@footnote{Note that the
@samp{_kversion} of @samp{@value{_kversion}} is only an example.}

@item @uref{http://www.openss7.org/@-rpms/@-RPMS/@-i686/@-@value{PACKAGE}@--streams@--info@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm, @value{PACKAGE}@--streams@--info@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--streams@--info} package@footnote{Note that only release
packages that contain kernel modules and that export versioned symbols will
contain a @file{streams@--info} subpackage.} contains the module symbol version
information for the @file{streams@--core} subpackage, above.  It is possible to
load this subpackage and compile modules that use the exported symbols without
loaded the actual kernel modules (from the @file{streams@--core} subpackage
above).  This package is heavily tied to the STREAMS package and kernel for
which it was compiled.  This particular package applies to @file{streams}
(@cite{Linux Fast@--STREAMS}) on kernel version
@samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.}
@end table

@subsubheading Configuration and Installation
To configure, build and install the binary RPM, @xref{Configuring the Binary
RPM}.

@c ----------------------------------------------------------------------------

@node Downloading the Debian DEB
@subsection Downloading the Debian DEB
@cindex downloading, debian debs
@cindex binary debs

To install from binary DEB, you will need several of the DEB for a complete
installation.  Binary DEB fall into several categories.  To download and install a
complete package requires the appropriate DEB from each of the several categories
below, as applicable.  Some release packages do not provide DEBs in each of the
several categories.

To install from Binary DEB, you will need all of the following kernel
indepdendent packages for your architecture, and one of the kernel-depdendent
packages from the next section.

@subsubheading Independent DEB
Independent DEB are dependent on neither the Linux kernel version, nor the
STREAMS package.  For example, the source package
@samp{@value{PACKAGE}@--source_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb},
is not dependent on kernel nor STREAMS package.

@noindent
All of the following kernel and STREAMS independent DEB are required for your
architecture.  Binary DEBs listed here are for example only: additional binary
DEBs are available from the downloads site.  If your architecture is not
available, you can build binary DEB from the Debian DSC (see @pxref{Building
from the Debian DSC}).

@subsubheading Architecture Independent
@table @asis
@item @uref{http://www.openss7.org/@-debian/@-@value{PACKAGE}@--dev_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_all@-.deb, @value{PACKAGE}@--dev_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_all@-.deb}
The @file{@value{PACKAGE}@--dev} package contains the device definitions necessary
to run applications programs developed for @value{PACKAGE_TITLE}.
@footnote{Note that not all release packages contain devices.  Only packages
that provide STREAMS character device drivers need devices, and then only when
the @samp{specfs} or @samp{devfsd} is not being used.}

@item @uref{http://www.openss7.org/@-debian/@-@value{PACKAGE}@--doc_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_all@-.deb, @value{PACKAGE}@--doc_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_all@-.deb}
The @file{@value{PACKAGE}@--doc} package contains this manual in plaintext,
postscript, PDF and HTML forms, along with the meta-information from the
@file{@value{PACKAGE_NAME}} package.  It also contains all of the manual pages
necessary for developing @value{PACKAGE_TITLE} applications and
@value{PACKAGE_TITLE} STREAMS modules or drivers.

@item @uref{http://www.openss7.org/@-debian/@-@value{PACKAGE}@--init_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_all@-.deb, @value{PACKAGE}@--init_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_all@-.deb}
The @file{@value{PACKAGE}@--init} package contains the init scripts and provides
the postinst scripts necessary to create kernel module preloads and modules
definitions for all kernel module @samp{core} subpackages.

@item @uref{http://www.openss7.org/@-debian/@-@value{PACKAGE}@--source_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_all@-.deb, @value{PACKAGE}@--source_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_all@-.deb}
The @file{@value{PACKAGE}@--source} package contains the source code necessary for
building the @value{PACKAGE_TITLE} release.  It includes the @command{autoconf}
configuration utilities necessary to create and distribute tarballs, rpms and
deb/dscs.
@footnote{Note that not all releases have source DEB packages.  Release packages
that do not contain kernel modules do not generate a source DEB package.}
@end table

@subsubheading Architecture Dependent
@table @asis
@item @uref{http://www.openss7.org/@-debian/@-@value{PACKAGE}@--devel_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb, @value{PACKAGE}@--devel_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--devel} package contains library archives for static
compilation, header files to develop @value{PACKAGE_TITLE} modules and drivers.
This also includes the header files and static libraries required to compile
@value{PACKAGE_TITLE} applications programs.

@item @uref{http://www.openss7.org/@-debian/@-@value{PACKAGE}@--lib_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb, @value{PACKAGE}@--lib_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--lib} package contains the run-time shared libraries
necessary to run application programs and utilities developed for the
@file{@value{PACKAGE_NAME}} package.
@footnote{Note that not all release packages contain shared libraries, and,
therefore, not all release packages contain this package.}

@ignore
@item @uref{http://www.openss7.org/@-debian/@-@value{PACKAGE}@--util_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb, @value{PACKAGE}@--util_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--util} package provides administrative and
configuration test utilities and commands associated with the
@value{PACKAGE_TITLE} package.
@end ignore
@end table

@subsubheading STREAMS-Dependent DEB
STREAMS-Dependent DEB are dependent upon the specific STREAMS package being
used, either @cite{Linux STREAMS} or @cite{Linux Fast-STREAMS}.  Packages
dependent upon @cite{Linux STREAMS} will have @file{LiS} in the package name.
Packages dependent upon @cite{Linux Fast-STREAMS} will have @file{streams} in
the package name.  Note that some STREAMS-Dependent DEB are also
Kernel-Dependent DEB as described below.

@noindent
One of the following STREAMS-Dependent packages is required for your
architecture.  If your architecture is not on the list, you can build binary DEB
from the Debian DSC (see @pxref{Building from the Debian DSC}).

@table @asis
@item @uref{http://www.openss7.org/@-debian/@-@value{PACKAGE}@--LiS@--util_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb, @value{PACKAGE}@--LiS@--util_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--LiS@--util} package provides administrative and
configuration test utilities and commands associated with the
@value{PACKAGE_TITLE} package.  Because this package must link a
STREAMS-specific library, it is a STREAMS-Dependent package.  Use the
@file{@value{PACKAGE}@--LiS@--util} package if you have LiS installed.

@item @uref{http://www.openss7.org/@-debian/@-@value{PACKAGE}@--streams@--util_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb, @value{PACKAGE}@--streams@--util_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--streams@--util} package provides administrative and
configuration test utilities and commands associated with the
@value{PACKAGE_TITLE} package.  Because this package must link a
STREAMS-specific library, it is a STREAMS-Dependent package.  Use the
@file{@value{PACKAGE}@--streams@--util} package if you have streams installed.
@end table

@subsubheading Kernel-Dependent DEB
Kernel-Dependent DEB are dependent on specific Linux Kernel Binary DEB releases.
Packages are provided for popular released @cite{RedHat} kernels.  Packages
dependent upon @cite{RedHat} or other kernel DEB will have the @samp{_kversion}
kernel package version in the package name.

One of the following Kernel-Dependent packages is required for your architecture
and kernel version.  If your architecture or kernel version is not on the list,
you can build binary DEB from the source DEB (see @pxref{Building from the
Debian DSC}).@footnote{Note that on @cite{Mandrakelinux}, unlike other DEB
kernel distributions, kernel packages for the ix86 architectures are always
placed in i586 architecture packages regardless of the true processor
architecture of the kernel package.  @command{configure} detects this and builds
the appropriate packages.}

@table @asis
@item @uref{http://www.openss7.org/@-debian/@-@value{PACKAGE}@--core@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb, @value{PACKAGE}@--core@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--core} package contains the loadable kernel modules
that depend only on the kernel.  This package is heavily tied to the kernel for
which it was compiled.  This particular package applies to kernel version
@samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.  Note also that only release
packages that contain kernel modules will contain a @file{core} subpackage.}

@item @uref{http://www.openss7.org/@-debian/@-@value{PACKAGE}@--info@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb, @value{PACKAGE}@--info@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--info} package@footnote{Note that only release packages
that contain kernel modules and that export versioned symbols will contain a
@file{info} subpackage.  Also, this subpackage is only applicable to 2.4 series
kernels and is not necessary and not built for 2.6 series kernels.} contains the
module symbol version information for the @file{core} subpackage, above.  It is
possible to load this subpackage and compile modules that use the exported
symbols without loading the actual kernel modules (from the @file{core}
subpackage above).  This package is heavily tied to the kernel for which it was
compiled.  This particular package applies to kernel version
@samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.}

@item @uref{http://www.openss7.org/@-debian/@-@value{PACKAGE}@--LiS@--core@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb, @value{PACKAGE}@--LiS@--core@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--LiS@--core} package contains the kernel modules that
provide the @value{PACKAGE_TITLE} STREAMS modules and drivers.  This package is
heavily tied to the STREAMS package and kernel for which it was compiled.  This
particular package applies to @file{LiS} (@cite{Linux STREAMS}) on kernel
version @samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.}

@item @uref{http://www.openss7.org/@-debian/@-@value{PACKAGE}@--streams@--core@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb, @value{PACKAGE}@--streams@--core@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--streams@--core} package contains the kernel modules that
provide the @value{PACKAGE_TITLE} STREAMS modules and drivers.  This package is
heavily tied to the STREAMS package and kernel for which it was compiled.  This
particular package applies to @file{streams} (@cite{Linux Fast@--STREAMS}) on
kernel version @samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion}
of @samp{@value{_kversion}} is only an example.}

@item @uref{http://www.openss7.org/@-debian/@-@value{PACKAGE}@--LiS@--info@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb, @value{PACKAGE}@--LiS@--info@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--LiS@--info} package@footnote{Note that only release
packages that contain kernel modules and that export versioned symbols will
contain a @file{LiS@--info} subpackage.} contains the module symbol version
information for the @file{LiS@--core} subpackage, above.  It is possible to load
this subpackage and compile modules that use the exported symbols without loaded
the actual kernel modules (from the @file{LiS@--core} subpackage above).  This
package is heavily tied to the STREAMS package and kernel for which it was
compiled.  This particular package applies to @file{LiS} (@cite{Linux STREAMS})
on kernel version @samp{@value{_kversion}}.@footnote{Note that the
@samp{_kversion} of @samp{@value{_kversion}} is only an example.}

@item @uref{http://www.openss7.org/@-debian/@-@value{PACKAGE}@--streams@--info@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb, @value{PACKAGE}@--streams@--info@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--streams@--info} package@footnote{Note that only release
packages that contain kernel modules and that export versioned symbols will
contain a @file{streams@--info} subpackage.} contains the module symbol version
information for the @file{streams@--core} subpackage, above.  It is possible to
load this subpackage and compile modules that use the exported symbols without
loaded the actual kernel modules (from the @file{streams@--core} subpackage
above).  This package is heavily tied to the STREAMS package and kernel for
which it was compiled.  This particular package applies to @file{streams}
(@cite{Linux Fast@--STREAMS}) on kernel version
@samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.}
@end table

@subsubheading Configuration and Installation
To configure, build and install the Debian DEB, @xref{Configuring the Debian
DEB}.

@c ----------------------------------------------------------------------------

@node Downloading the Source RPM
@subsection Downloading the Source RPM
@cindex downloading, source srpm
@cindex source rpms

If you cannot obtain a binary RPM for your architecture, or would like to roll
you own binary RPM, download the following source RPM.

@table @asis
@item @uref{http://www.openss7.org/@-rpms/@-SRPMS/@-@value{PACKAGE}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@-.src@-.rpm, @value{PACKAGE}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@-.src@-.rpm}
This is the source RPM for the package.  From this source RPM it is possible to
build binary RPM for any supported architecture and for any 2.4 or 2.6 kernel,
for either @cite{Linux STREAMS} or @cite{Linux Fast@--STREAMS}.
@end table

@subsubheading Configuration
To configure the source RPM, @xref{Configuring the Source RPM}.

@c ----------------------------------------------------------------------------

@node Downloading the Debian DSC
@subsection Downloading the Debian DSC
@cindex downloading, debian dscs
@cindex source dscs

If you cannot obtain a binary DEB for your architecture, or would like to roll
your own DEB, download the following Debian DSC.

@table @asis
@item @uref{http://www.openss7.org/@-debian/@-@value{PACKAGE}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}@-.dsc, @value{PACKAGE}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}@-.dsc}
@itemx @uref{http://www.openss7.org/@-debian/@-@value{PACKAGE}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}@-.tar@-.gz, @value{PACKAGE}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}@-.tar@-.gz}
This is the Debian DSC for the package.  From this Debian DSC it is possible to
build binary DEB for any supported architecture and for any 2.4 or 2.6 kernel,
for either @cite{Linux STREAMS} or @cite{Linux Fast@--STREAMS}.
@end table

@subsubheading Configuration
To configure the source RPM, @xref{Configuring the Debian DSC}.

@c ----------------------------------------------------------------------------

@node Downloading the Tar Ball
@subsection Downloading the Tar Ball
@cindex downloading, tar ball
@cindex tar ball

For non-RPM architectures, such as @cite{Nex@-us@-Ware} embedded target, download
the tarball as follows:

@table @asis
@item @uref{http://www.openss7.org/@-@value{PACKAGE}@--@value{VERSION}@-.tar@-.gz, @value{PACKAGE}@--@value{VERSION}@-.tar@-.gz}
@itemx @uref{http://www.openss7.org/@-@value{PACKAGE}@--@value{VERSION}@-.tar@-.bz2, @value{PACKAGE}@--@value{VERSION}@-.tar@-.bz2}
These are the @command{tar} balls for the release.  These @command{tar} balls
contain the @command{autoconf} distribution which includes all the source
necessary for building and installing the package.  These tarballs will even
build Source RPM and Binary RPM on RPM architectures and Debian DSC and DEB on
DPKG architectures.
@end table

The tar ball may be downloaded easily with @command{wget} as follows:

@cartouche
@example
% wget http://www.openss7.org/@-@value{PACKAGE}-@value{VERSION}.tar.bz2
@end example
@end cartouche

@noindent
or

@cartouche
@example
% wget http://www.openss7.org/@-@value{PACKAGE}-@value{VERSION}.tar.gz
@end example
@end cartouche

@subsubheading  Unpacking the Archive

After downloading one of the tar balls, unpack the archive using one of the
following commands:

@cartouche
@example
% wget http://www.openss7.org/@-@value{PACKAGE}-@value{VERSION}.tar.gz
% tar -xzvf @value{PACKAGE}-@value{VERSION}.tar.gz
@end example
@end cartouche

@noindent
or

@cartouche
@example
% wget http://www.openss7.org/@-@value{PACKAGE}-@value{VERSION}.tar.bz2
% tar -xjvf @value{PACKAGE}-@value{VERSION}.tar.bz2
@end example
@end cartouche

@noindent
Either will create a subdirectory name
@file{@value{PACKAGE}-@value{VERSION}}
containing all of the files and subdirectories for the
@command{@value{PACKAGE_NAME}} package.


@subsubheading Configuration
To configure and install the tar ball, @xref{Configuring the Tar Ball}.

@c ----------------------------------------------------------------------------

@node Downloading from CVS
@subsection Downloading from CVS
@cindex checkout, cvs
@cindex cvs

If you are a subscriber or sponsor of @uref{http://www.openss7.org/, The OpenSS7
Project} with CVS archive access privileges then you can download release or
mid-release versions of the @file{@value{PACKAGE_NAME}} package from the project
CVS archive.

The @value{PACKAGE_TITLE} package is located in the @file{@value{PACKAGE}}
subdirectory of @file{/var/cvs}.  For release tag information, see
@ref{Releases}.

To access the archive from the project CVS pserver, use the following commands
to check out a version from the archive:

@cartouche
@example
% export CVSROOT='-d:pserver:@var{username}@@cvs.openss7.com:2401/var/cvs'
% cvs login
Password: *********
% cvs co -r @value{PACKAGE}_@value{VERSION} @value{PACKAGE}
% cvs logout
@end example
@end cartouche

It is, of course, possible to check out by date or by other criteria.  For more
information, see @ref{cvs(1), cvs(1), cvs(1), *manpages*, The Manual Pages}.

@subsubheading Preparing the CVS Working Directory

Although public releases of the @file{@value{PACKAGE_NAME}} package do not
require reconfiguration, creating a configurable directory from the CVS archive
requires tools not normally distributed with the other releases.

The build host requires the following GNU tools:

@itemize
@item @command{autoconf 2.59}
@item @command{automake 1.9.6}
@item @command{libtool 1.5.22}
@item @command{gettext 0.14.5}
@end itemize

It should be stressed that, in particular, the @command{autoconf} and
@command{automake} must be at version releases @command{2.59} and @command{1.9}.
@emph{The versions normally distributed in mainstream GNU/Linux distributions
are, in fact, much older than these versions.}@footnote{A notable exception is
Debian.}  GNU version of these packages configured and installed to default
directories will install in @file{/usr/local/} allowing them to coexist with
distribution installed versions.

For building documentation, the build host also requires the following
documentation tools:

@itemize
@item @command{gs 8.15}
@item @command{tetex 3.0}
@item @command{texinfo 4.8}
@item @command{transfig 3.2.5}
@item @command{imagemagick 6.2.4}
@item @command{groff 1.17.2}
@end itemize

Most desktop GNU/Linux distributions will have these tools; however, some
server-style installations (e.g. @cite{Ubuntu}-server) will not and they must
be installed separately.

For uncooked manual pages, the entire @command{groff} package is required on
@cite{Debian} and @cite{Ubuntu} systems (the base package does not include
grefer which is used extensively by uncooked manual pages).  The following will
get what you need:

@cartouche
@example
Debian: % apt-get install groff_ext
Ubuntu: % apt-get install groff
@end example
@end cartouche

In addition, the build host requires a complete tool chain for compiling for the
target host, including kernel tools such as @command{genksyms} and others.

If you wish to package rpms on an @command{rpm} system, or debs on a
@command{dpkg} system, you will need the appropriate tool chain.  Systems based
on @command{rpm} typically have the necessary toolchain available, however,
@command{dpkg} systems do not.  The following on a @cite{Debian} or
@cite{Ubuntu} system will get what you need:

@cartouche
@example
% apt-get install debhelper
% apt-get install fakeroot
@end example
@end cartouche

To generate a configuration script and the necessary scriptlets required by the
GNU @command{autoconf} system, execute the following commands on the working
directory:

@cartouche
@example
% autoreconf -fiv @value{PACKAGE}
@end example
@end cartouche

@noindent
where, @file{@value{PACKAGE}} is the name of the directory to where the working
copy was checked out under the previous step.  This command generates the
@command{configure} script and other missing pieces that are normally
distributed with the release Tar Balls, SRPMs and DSCs.

Make sure that @samp{autoreconf --version} returns @samp{2.59}.  Otherwise, you
may need to perform something like the following:

@cartouche
@example
% PATH="/usr/local/bin:$PATH"
% autoreconf -fiv @value{PACKAGE}
@end example
@end cartouche

@noindent
After reconfiguring the directory, the package can then be configured and built
using the same instructions as are used for the Tar Ball, see @ref{Configuring
the Tar Ball}, and @ref{Building from the Tar Ball}.

Do note, however, that @command{make} will rebuild the documentation that is
normally released with the package.  Additional tools may be necessary for
building the documentation.

When configuring the package in a working directory and while working a
change-compile-test cycle that involves configuration macros or documentation, I
find it of great advantage to invoke the GNU @command{configure} options
@command{--enable-maintainer-mode} and @command{--enable-dependency-tracking}.
The first of these two options will add maintainer-specific targets to any
generated @file{Makefile}, and the later will invoke automatic dependency
tracking within the @file{Makefile} so rebuilds after changes to macro, source
or documentation files will be automatically rebuilt.

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Configuration
@section Configuration
@cindex configuration

@menu
* Configuring the Binary RPM::		the easiest approach
* Configuring the Debian DEB::		the easiest approach for Debian
* Configuring the Source RPM::		the next best approach
* Configuring the Debian DSC::		the next best approach for Debian
* Configuring the Tar Ball::		last resort
@end menu

@c ----------------------------------------------------------------------------

@node Configuring the Binary RPM
@subsection Configuring the Binary RPM
@cindex configuring, binary rpms
@cindex binary rpms

In general the binary RPM do not require any configuration, however, during
installation it is possible to relocate some of the installation directories.
This allows some degree of customization.  Relocations that are available on the
binary RPM are as follows:

@table @file
@item @value{PACKAGE}@--LiS@--core@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--LiS@--core@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@itemx @value{PACKAGE}@--streams@--core@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--streams@--core@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}/lib/@-modules/@-@value{_kversion}}
This relocatable directory contains the kernel modules that provide the
@value{PACKAGE_NAME} STREAMS core, drivers and modules.@footnote{Note that the
@samp{_kversion} of @samp{@value{_kversion}} is only an example.}
@end table

@item @value{PACKAGE}@--LiS@--info@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--LiS@--info@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@itemx @value{PACKAGE}@--streams@--info@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--streams@--info@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}/usr/@-include/@-@value{PACKAGE}/@-@value{_kversion}}
This relocatable directory contains the kernel module exported symbol
information that allows other kernel modules to be compiled against the correct
version of the @value{PACKAGE} package.@footnote{Note that the @samp{_kversion}
of @samp{@value{_kversion}} is only an example.  Also, note that the @samp{info}
subpackage is only applicable to the 2.4 kernel series.}
@end table

@item @value{PACKAGE}@--dev@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--dev@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
(not relocatable)

@item @value{PACKAGE}@--devel@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--devel@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}@value{_libdir}}
This relocatable directory contains @value{PACKAGE} libraries.
@item @file{@value{_rootdir}@value{_includedir}/@-@value{PACKAGE}}
This relocatable directory contains @value{PACKAGE} header files.
@end table

@item @value{PACKAGE}@--doc@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--doc@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}@value{_datadir}/@-doc}
This relocatable directory contains all package specific documentation
(including this manual).  The subdirectory in this directory is the
@file{@value{PACKAGE}@--@value{VERSION}} directory.
@item @file{@value{_rootdir}@value{_infodir}}
This relocatable directory contains info files (including the info version of
this manual).
@item @file{@value{_rootdir}@value{_mandir}}
This relocatable directory contains manual pages.
@end table

@item @value{PACKAGE}@--LiS@--lib@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--LiS@--lib@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@itemx @value{PACKAGE}@--streams@--lib@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--streams@--lib@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}@value{_libdir}}
This relocatable directory contains the run-time shared libraries necessary to
run applications programs and utilities developed for @value{PACKAGE_TITLE}.
@item @file{@value{_rootdir}@value{_datadir}/@-locale}
This relocatable directory contains the locale information for shared library
files.
@end table

@item @value{PACKAGE}@--source@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--source@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}@value{_prefix}/@-src}
This relocatable directory contains the source code.
@end table

@item @value{PACKAGE}@--LiS@--util@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--LiS@--util@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@itemx @value{PACKAGE}@--streams@--util@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--streams@--util@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}@value{_bindir}}
This relocatable directory contains binary programs and utilities.
@item @file{@value{_rootdir}@value{_sbindir}}
This relocatable directory contains system binary programs and utilities.
@item @file{@value{_rootdir}@value{_libexecdir}}
This relocatable directory contains test programs.
@item @file{@value{_rootdir}@value{_sysconfdir}}
This relocatable directory contains init scripts and configuration information.
@end table

@end table

@subsubheading Installation
To install the binary RPM, @xref{Installing the Binary RPM}.

@c ----------------------------------------------------------------------------

@node Configuring the Debian DEB
@subsection Configuring the Debian DEB
@cindex configuring, binary debs
@cindex binary debs

In general the binary DEB do not require any configuration.

@subsubheading Installation
To install the Debian DEB, @xref{Installing the Debian DEB}.

@c ----------------------------------------------------------------------------

@node Configuring the Source RPM
@subsection Configuring the Source RPM
@cindex configuring, source srpm
@cindex source rpms

When building from the source RPM (@pxref{Building from the Source RPM}), the
rebuild process uses a number of macros from the user's @file{.rpmmacros} file
as described in @ref{rpm(8), rpm(8), rpm(8), *manpages*, The Manual Pages}.

Following is an example of the @file{~/.rpmmacros} file that I use for
rebuilding RPMS:

@cartouche
@smallexample
#
# RPM macros for building rpms
#

%_topdir /usr/src/openss7.rpms

%vendor OpenSS7 Corporation
%distribution OpenSS7
%disturl http://www.openss7.org/
%packager Brian Bidulock <bidulock@@openss7.org>
%url http://www.openss7.org/

%_signature gpg
%_gpg_path /home/brian/.gnupg
%_gpg_name openss7@@openss7.org
%_gpgbin /usr/bin/gpg

%_source_payload w9.bzdio
%_binary_payload w9.bzdio

%_unpackaged_files_terminate_build 1
%_missing_doc_files_terminate_build 1
%_enable_debug_packages 1

# 
# Template for debug information sub-package.
# with our little addition of release
# 
%debug_package \
%ifnarch noarch\
%global __debug_package 1\
%package debug\
Summary: Debug information for package %@{name@}\
Group: Development/Debug\
AutoReqProv: 0\
%@{?fullrelease:Release: %@{fullrelease@}@}\
%description debug\
This package provides debug information for package %@{name@}.\
Debug information is useful when developing applications that use this\
package or when debugging this package.\
%files debug -f debugfiles.list\
%defattr(-,root,root)\
%endif\
%@{nil@}

@end smallexample
@end cartouche


When building from the source RPM (@pxref{Building from the Source RPM}), it is
possible to pass a number of additional configuration options to the
@command{rpmbuild} process.

The additional configuration options are described below.

Note that distributions that use older versions of rpm do not have the
@samp{--with} or @samp{--without} options defined.  To acheive the same effect
as:
@example
--with someparm=somearg
@end example
do:
@example
--define "_with_someparm --with-someparm=somearg"
@end example

This is a generic description of common @command{rpmbuild} options.  Not all
@command{rpmbuild} options are applicable to all SRPMs.  Options that are kernel
module specific are only applicable to SRPMs that build kernel modules.  STREAMS
options are only applicable to SRPMs that provide or require STREAMS.

@table @code
@item --define "_kversion $PACKAGE_KVERSION"
@vindex PACKAGE_KVERSION
@opindex k-release
Specifies the kernel version other than the running kernel for which to build.
If @command{_kversion} is not defined when rebuilding, the environment variable
@var{PACKAGE_KVERSION} is used.  If the environment variable
@var{PACKAGE_KVERSION} is not defined, then the version of the running kernel
(i.e. discovered with @samp{uname -r}) is used as the target version for
kernel-dependent packages.  This option can also be defined in an
@file{.rpmspec} file using the macro name @samp{_kversion}.

@item --with checks
@itemx --without checks
@opindex checks
Enable or disable preinstall checks.  Each packages supports a number of
preinstall checks that can be performed by invoking the @samp{check} target with
@command{make}.  These currently consist of checking each kernel module for
unresolved kernel symbols, checking for documentation for exported kernel module
symbols, checking for documentation for exported library symbols, checking for
standard options for build and installable programs, checking for documentation
for built and installable programs.  Normally these checks are only run in
maintainer mode, but can be enabled and disabled with this option.

@ignore
@item --with autotest
@itemx --without autotest
@opindex autotest
@end ignore

@item --with k-optimize=HOW
@itemx --without k-optimize
@opindex k-optimize
Specify @samp{HOW} optimization, @var{normal}, @var{size}, @var{speed} or
@var{quick}.  @var{size} compiles kernel modules @code{-Os}, @var{speed}
compiles kernel modules @code{-O3}, and @var{quick} compiles kernel modules
@code{-O0}.  The default is @var{normal}.  Use with care.

@item --with cooked-manpages
@itemx --without cooked-manpages
@opindex cooked-manpages
Some systems do not like @command{grefer} references in manpages.@footnote{In
particular, some @cite{Debian} systems do not load the @command{groff}
extensions package and do not have @command{grefer} installed.  Although this is
an oversight on the configuration of the particular @cite{Debian} system, we
accomodate such misconfiguration with this feature.}  This option will cook
@command{soelim}, @command{refer}, @command{tbl} and @command{pic} commands from
the manpages and also strip @command{groff} comments.  The default is to leave
manpages uncooked: they are actually smaller that way.

@item --with public
@itemx --without public
@opindex public
Release public packages or private packages.  This option has no effect on the
@file{@value{PACKAGE_NAME}} package.  The default is to release public packages.

@item --with k-debug
@itemx --without k-debug
@opindex k-debug
Specifies whether kernel debugging is to be performed on the build kernel
modules.  Mutually exclusive with @code{test} and @code{safe} below.  This has
the effect of removing static and inline attributes from functions and invoking
all debugging macros in the code.  The default is to not perform kernel
debugging.

@item --with k-test
@itemx --without k-test
@opindex k-test
Specifies whether kernel testing is to be performed.  Mutually exclusive with
@code{debug} above and @code{safe} below.  This has the effect of removing
static and inline attributes from functions and invoking most debugging macros
in the code.  The default is to not perform kernel testing.

@item --with k-safe
@itemx --without k-safe
@opindex k-safe
Specifies whether kernel saftey is to be performed.  Mutually exclusive with
@code{debug} and @code{test} above.  This has the effect of invoking some more
pedantic assertion macros in the code.  The default is not to apply kernel
safety.

@item --with k-inline
@itemx --without k-inline
@opindex k-inline
Specifies whether kernel @code{inline} functions are to be place inline.  This
has the effect of adding the @command{-finline-functions} flag to @var{CFLAGS}
for compiling kernel modules.  Linux 2.4 kernels are normally compiled
@command{-O2} which does not respect the @code{inline} directive.  This compiles
kernel modules with @command{-finline-functions} to get closer to @command{-O3}
optimization.  For better optimization controls, @xref{Configuring the Tar
Ball}.

@item --with k-modversions
@itemx --without k-modversions
@opindex k-modversions
Specifies whether kernel symbol versioning is to be applied to symbols exported
by package kernel modules.  The default is to version exported module symbols.
This package does not export symbols so this option has no effect.

@item --with devfs
@itemx --without devfs
Specifies whether the build is for a device filesystem daemon enabled system
with autoloading, or not.  The default is to build for devfsd autoloading when
CONFIG_DEVFS_FS is defined in the target kernel.  The @command{reuild} target
uses this option to signal to the RPM spec file that the @samp{dev} subpackage
need not be built.  This option does not appear when the package has no devices.

@item --with devel
@itemx --without devel
@opindex devel
Specifies whether to build development environment packages such as those that
include header files, static libraries, manual pages and texinfo
documentation.  The default is to build development environment packages.
This option can be useful when building for an embedded target where only the
runtime components are desired.

@item --with tools
@itemx --without tools
@opindex tools
Specifies whether user space packages are to be built.  The default is to build
user space packages.  This option can be useful when rebuilding for multiple
architectures and target kernels.  The @command{rebuild} automake target uses
this feature when rebuilding for all available architectures and kernels, to
rebuild user packages once per architecture instead of once per kernel.

@item --with modules
@itemx --without modules
@opindex modules
Specifies whether kernel modules packages are to be built.  The default is to
build kernel module packages.  This option can be useful when rebuilding for
multiple architectures and target kernels.  The @command{rebuild} automake
target uses this feature to rebuild for all available architectures and kernels.

@item --with lis
@itemx --without lis
@opindex lis
Specifies that the package is to be rebuilt against @cite{Linux STREAMS}.  The
default is to automatically identify whether @file{LiS} or @file{streams} is
loaded on the build system and build accordingly.

@item --with lfs
@itemx --without lfs
@opindex lfs
Specifies that the package is to be rebuilt against @cite{Linux Fast-STREAMS}.
The default is to automatically identify whether @file{LiS} or @file{streams} is
loaded on the build system and build accordingly.
@end table

@include rpm.texi

In general, the default values of these options are sufficient for most purposes
and no options need be provided when rebuilding the Source RPMs.

@subsubheading Build
To build from the source RPM, @xref{Building from the Source RPM}.

@c ----------------------------------------------------------------------------

@node Configuring the Debian DSC
@subsection Configuring the Debian DSC
@cindex configuring, source dscs
@cindex source dscs

The Debian DSC can be configured by passing options in the environment variable
@var{BUILD_DEBOPTIONS}.  The options placed in this variable take the same form
as those passed to the @command{configure} script, @xref{Configuring the Tar
Ball}.  For an example, @xref{Building from the Debian DSC}.

@subsubheading Build
To build from the Debian DSC, @xref{Building from the Debian DSC}.

@c ----------------------------------------------------------------------------

@node Configuring the Tar Ball
@subsection Configuring the Tar Ball
@cindex configuring, tar ball
@cindex tar ball

All of the normal GNU @command{autoconf} configuration options and environment
variables apply.  Additional options and environment variables are provided to
tailor or customize the build and are described below.

@menu
* Configure Options::		Options to @command{configure}
* Environment Variables::	Environment variables to @command{configure}
@end menu

@c ----------------------------------------------------------------------------

@node Configure Options
@subsubsection Configure Options
@cindex configure options

This is a generic description of common @command{configure} options.  Not all
@command{configure} options are applicable to all release packages.  Options
that are kernel module specific are only applicable to release packages that
build kernel modules.  STREAMS options are only applicable to release packages
that provide or require STREAMS.

Following are the additional @command{configure} options, their meaning and use:

@table @command
@item --enable-checks
@itemx --disable-checks
@opindex checks
Enable or disable preinstall checks.  Each packages supports a number of
preinstall checks that can be performed by invoking the @samp{check} target with
@command{make}.  These currently consist of checking each kernel module for
unresolved kernel symbols, checking for documentation for exported kernel module
symbols, checking for documentation for exported library symbols, checking for
standard options for build and installable programs, checking for documentation
for built and installable programs.  Normally these checks are only run in
maintainer mode, but can be enabled and disabled with this option.

@ignore
@item --enable-autotest
@itemx --disable-autotest
@opindex autotest
@end ignore

@item --disable-compress-manpages
@opindex compress-manpages
Compress manpages with @samp{gzip -9} or @samp{bzip2 -9} or leave them
uncompressed.  The default is to compress manpages with @samp{gzip -9}
or @samp{bzip2 -9} if a single compressed manpage exists in the target
installation directory (@command{--mandir}).  This disables automatic
compression.

@item --disable-public
@opindex public
Disable public release.  Has no effect on the @file{@value{PACKAGE_NAME}} release.
No private components exist in @file{@value{PACKAGE_NAME}} releases.

@item --disable-initscripts
@opindex initscripts
Disables the installation of init scripts.
The default is to configure and install init scripts and their associated
configuration files.

@item --disable-devel
@opindex devel
Disables the installation of development environment components such as
header files, static libraries, manual pages and texinfo documentation.  The
default is to install development environment components.  This option can be
useful when configuring for an embedded target where only the runtime
components are desired.

@item --enable-tools
@opindex tools
Specifies whether user space programs and libraries are to be built and
installed.  The default is to build and install user space programs and
libraries.  This option can be useful when rebuilding for multiple architectures
and target kernels, particularly under rpm.  The @command{rebuild} target uses
this feature when rebuilding RPMs for all available architectures and kernels,
to rebuild user packages once per architecture instead of once per kernel.

@item --enable-modules
@opindex modules
Specifies whether kernel modules are to be built and installed.  The default is
to build and install kernel modules.  This option can be useful when rebuilding
for multiple architectures and target kernels, particularly under rpm.  The
@command{rebuild} automake target uses this feature to rebuild for all available
architectures and kernels.
This option has no effect if there are no kernel modules in the package.

@item --enable-arch
@opindex arch
Specifies whether architectural dependent package components are to be built and
installed.  This option can be useful when rebuilding for multiple architectures
and target kernels, particularly under dpkg.  The default is to configure, build
and install architecture dependent package components.
This option has no effect if there are no architecture dependent components in
the package.

@item --enable-indep
@opindex indep
Specifies whether architecture independent package components are to be built
and installed.  This option can be useful when rebuilding for multiple
architectures and target kernels, particularly under dpkg.  The default is to
configure, build and install architecture independent package components.
This options has no effect if there are no architecture independent components
in the package.

@item --enable-k-inline
@opindex k-inline
Enable kernel inline functions.  Most Linux kernels build without
@command{-finline-functions}.  This option adds the @command{-finline-functions}
and @command{-Winline} flags to the compilation of kernel modules.  Use with
care.
This option has no effect if there are no kernel modules in the package.

@item --enable-k-safe
@opindex k-safe
Enable kernel module run-time safety checks.  Specifies whether kernel safety is
to be performed.  This option is mutually exclusive with
@command{--enable-k-test} and @command{--enable-k-debug} below.  This has the
effect of invoking some more pedantic assertion macros in the code.  The default
is not to apply kernel safety.
This option has no effect if there are no kernel modules in the package.

@item --enable-k-test
@opindex k-test
Enable kernel module run-teim testing.  Specifies whether kernel testing is to
be performed.  This option is mutually exclusive with @command{--enable-k-safe}
above and @command{--enable-k-debug} below.  This has the effect of remove
@code{static} and @code{inline} attributes from functions and invoking most
non-performance affecting debugging macros in the code.  The default is not to
perform kernel testing.
This option has no effect if there are no kernel modules in the package.

@item --enable-k-debug
@opindex k-debug
Enable kernel module run-time debugging.  Specifies whether kernel debugging is
to be performed.  This option is mutuallly exclusive with
@command{--enable-k-safe} and @command{--enable-k-test} above.  This has the
effect of removing @code{static} and @code{inline} attributes from functions and
invoking all debuggin macros in the code (including performance-affecting debug
macros).  The default is to not perform kernel debugging.
This option has no effect if there are no kernel modules in the package.

@itemx --disable-k-modversions
@opindex k-modversions
Disable module versions on @command{@value{PACKAGE_NAME}} symbols.  Specifies
whether kernel symbol versioning is to be used on symbols exported from built
@command{@value{PACKAGE_NAME}} modules.  The default is to provide kernel symbol
versioning on all exported symbols.
This option has no effect if there are no kernel modules in the package.

@item --enable-devfs
@itemx --disable-devfs
@opindex devfs
Specifies whether the build is for a device filesystem daemon enabled system
with autoloading, or not.  The default is to build for devfsd autoloading when
CONFIG_DEVFS_FS is defined in the target kernel.  The @command{reuild} target
uses this option to signal to the RPM spec file that the @samp{dev} subpackage
need not be built.  This option does not appear when the package has no devices.

@item --with-gpg-user=GNUPGUSER
@opindex gpg-user
Specify the @command{gpg} @samp{GNUPGUSER} for signing RPMs and tarballs.  The
default is the content of the environment variable @var{GNUPGUSER}.  If
unspecified, the @command{gpg} program will normally use the user name of the
account invoking the @command{gpg} program.  For building source RPMs, the RPM
macro @samp{_gpg_name} will override this setting.

@item --with-gpg-home=GNUPGHOME
@opindex gpg-home
Specify the @samp{GNUPGHOME} directory for signing RPMs and tarballs.  The
default is the user's @file{~/.gpg} directory.  For building source RPMs, the
RPM macro @samp{_gpg_path} will override this setting.

@item --with-pkg-epoch=EPOCH
@opindex pkg-epoch
Specifies the epoch for the package.  This is neither used for RPM nor Debian
packages, it applies to the tarball release as a whole.  The default is the
contents of the @file{.pkgepoch} file in the source directory or, if that file
does not exist, zero (0).

@item --with-pkg-release=RELEASE
@opindex pkg-release
Specifies the release for the package.  This is neither used for RPM nor Debian
packages, it applies to the tarball release as a whole.  The default is the
contents of the @file{.pkgrelease} file in the source directory or, if that file
does not exist, one (1).  This is the number after the last point in ther
package version number.

@item --with-pkg-distdir=DIR
@opindex pkg-distdir
Specifies the distribution directory for the package.  This is used by the
maintainer for building distributions of tarballs.  This is the directory into
which archives are copied for distribution.  The default is the top build
directory.

@item --with-cooked-manpages
@opindex cooked-manpages
Convert manual pages to remove macro dependencies and @command{grefer}
references.  Some systems do not like @command{grefer} references in
manpages.@footnote{In particular, some @cite{Debian} systems do not load the
@command{groff} extensions package and do not have @command{grefer} installed.
Although this is an oversight on the configuration of the particular
@cite{Debian} system, we accomodate such misconfiguration with this feature.}
This option will cook @command{soelim}, @command{refer}, @command{tbl} and
@command{pic} commands from the manpages and also strip @command{groff}
comments.  The default is to leave manpages uncooked (they are actually smaller
that way).

@item --with-rpm-epoch=PACKAGE_EPOCH
@opindex rpm-epoch
Specify the @samp{PACKAGE_EPOCH} for the RPM spec file.  The default is to use
the RPM epoch conatined in the file @file{.rpmepoch}.

@item --with-rpm-release=PACKAGE_RPMRELEASE
@opindex rpm-release
Specify the @samp{PACKAGE_RPMRELEASE} for the RPM rspec file.  The default is to
use the RPM release contained in the file @file{.rpmrelease}.

@item --with-rpm-extra=PACKAGE_RPMEXTRA
@opindex rpm-extra
Specify the @samp{PACKAGE_RPMEXTRA} extra release information for the RPM spec
file.  The default is to use the RPM extra release information contained in the
file @file{.rpmextra}.  Otherwise, this value will be determined from automatic
detection of the RPM distribution.

@item --with-rpm-topdir=PACKAGE_RPMTOPDIR
@opindex rpm-topdir
Specify the @samp{PACKAGE_RPMTOPDIR} top directory for RPMs.  If specified
with a null @samp{PACKAGE_RPMTOPDIR}, the default directory for the RPM
distribution will be used.  If this option is not provided on the command line,
the top build directory will be used as the RPM top directory as well.

@item --with-deb-epoch=EPOCH
@opindex deb-epoch
Specify the @samp{PACKAGE_DEBEPOCH} for the DEB control file.  The default is to
use the DEB epoch contained int he file @file{.debepoch}.

@item --with-deb-release=RELEASE
@opindex deb-release
Specify the @samp{PACKAGE_DEBRELEASE} for the DEB control file.  The default is to
use the DEB release contained in the file @file{.debrelease}.

@item --with-deb-topdir=DIR
@opindex deb-topdir
Specify the @samp{PACKAGE_DEBTOPDIR} top directory for DEBs.  If specified
with a null @samp{PACKAGE_DEBTOPDIR}, the default directory for the DEB
distribution will be used.  If this option is not provided on the command line,
the top build directory will be used as the DEB top directory as well.

@item --with-k-release=PACKAGE_KRELEASE
@opindex k-release
Specify the @samp{PACKAGE_KRELEASE} release of the Linux kernel for which the
build is targeted.  When not cross compiling, if this option is not set, the
build will be targeted at the kernel running in the build environment (e.g.,
@samp{uname -r}).  When cross-compiling this option must be specified or the
configure script will generate an error and terminate.

@ignore
@item --with-k-prefix=K-PREFIX-DIR
@opindex k-prefix
Specify the @samp{K-PREFIX-DIR} kernel directory prefix for install.  The
default is the root directory (@file{/}) of the build machine.  This directory
is normally located by the @command{configure} script and need only be provided
for special cross-build environments or when requested by a @command{configure}
script error message.

@item --with-k-rootdir=K-ROOTDIR
@opindex k-rootdir
Specify the @samp{K-ROOTDIR} root directory for configure.  The default is the
setting of environment variable @var{DESTDIR}, and if @var{DESTDIR} is not set,
the root directory (@file{/}) of the build machine.  This directory is normally
located by the @command{configure} script and need only be provided for special
cross-build environments or when requested by a @command{configure} script error
message.
@end ignore

@item --with-k-linkage=PACKAGE_KLINKAGE
@opindex k-linkage
Specify the @samp{PACKAGE_KLINKAGE} for kernel module linkage.  This can be one
of the following:
@itemize
@item @samp{loadable}
-- loadable kernel modules
@item @samp{linkable}
-- linkable kernel objects
@end itemize
The default is to build loadable kernel modules.

@item --with-k-modules=K-MODULES-DIR
@opindex k-modules
Specify the @samp{K-MODULES-DIR} directory to which kernel modules will be
installed.  The default is based on the option @command{--with-k-release},
@command{--with-k-prefix} and @command{--with-k-rootdir}.  The default is
@file{DESTDIR}/@-@file{K@--MODULES@--DIR} which is typically
@file{@var{DESTDIR}/@-lib/@-modules/@-@var{PACKAGE_KRELEASE}/@-}.  This directory is
normally located by the @command{configure} script and need only be provided for
special cross-build environments or when requested by a @command{configure}
script error message.

@item --with-k-build=K-BUILD-DIR
@opindex k-build
Specify the @samp{K-BUILD-DIR} base kernel build directory in which configured
kernel source resides.  The default is
@file{@var{DESTDIR}/@-@var{K@--MODULES@--DIR}/@-build}.  This directory is normally
located by the @command{configure} script and need only be provided for special
cross-build environments or when requested by a @command{configure} script error
message.

@item --with-k-source=K-SOURCE-DIR
@opindex k-build
Specify the @samp{K-SOURCE-DIR} base kernel build directory in which configured
kernel source resides.  The default is
@file{@var{DESTDIR}/@-@var{K@--MODULES@--DIR}/@-source}.  This directory is normally
located by the @command{configure} script and need only be provided for special
cross-build environments or when requested by a @command{configure} script error
message.

@item --with-k-modver=K-MODVER-FILE
@opindex k-sysmap
Specify the @samp{K-MODVER-FILE} kernel module versions file.  The default is
@file{@var{K@--BUILD@--DIR}/@-Module.symvers}.  This file is normally located by the
@command{configure} script and need only be provided for special cross-build
environments or when requested by a @command{configure} script error message.

@item --with-k-sysmap=K-SYSMAP-FILE
@opindex k-sysmap
Specify the @samp{K-SYSMAP-FILE} kernel system map file.  The default is
@file{@var{K@--BUILD@--DIR}/@-System.map}.  This file is normally located by the
@command{configure} script and need only be provided for special cross-build
environments or when requested by a @command{configure} script error message.

@ignore
@item --with-k-includes=K-INCLUDES-DIR
@opindex k-includes
Specify the @samp{K-INCLUDES-DIR} include directory of the kernel for which the
build is targeted.  The default is
@file{@var{DESTDIR}/@-@var{K@--BUILD@--DIR}/@-include}.  This directory is normally
located by the @command{configure} script and need only be provided for special
cross-build environments or when requested by a @command{configure} script error
message.
@end ignore

@item --with-k-archdir=K-ARCHDIR
@opindex k-archdir
Specify the @samp{K-ARCHDIR} kernel source architecture specific directory.  The
default is @file{@var{DESTDIR}/@-@var{K@--SOURCE@--DIR}/@-arch}.  This directory is
normally located by the @command{configure} script and need only be provided for
special cross-build environments or when requested by a @command{configure}
script error message.

@item --with-k-machdir=K-MACHDIR
@opindex k-machdir
Specify the @samp{K-MACHDIR} kernel source machine specific directory.  The
default is @file{@var{DESTDIR}/@-@var{K@--SOURCE@--DIR}/@-@var{target_cpu}}.  This
directory is normally located by the @command{configure} script and need only be
provided for special cross-build environments or when requested by a
@command{configure} script error message.

@item --with-k-config=K-CONFIG
@opindex k-config
Specify the @samp{K-CONFIG} kernel configuration file.  The default is
@file{@var{BOOT}/@-config@--@var{K@--RELEASE}}.  This configuration file is normally
located by the @command{configure} script and need only be provided forspecial
cross-build environments or when requested by a @command{configure} script error
message.

@item --with-k-optimize=HOW
@itemx --without-k-optimize
@opindex k-optimize
Specify @samp{HOW} optimization, @var{normal}, @var{size}, @var{speed} or
@var{quick}.  @var{size} compiles kernel modules @code{-Os}, @var{speed}
compiles kernel modules @code{-O3}, and @var{quick} compiles kernel modules
@code{-O0}.  The default is @var{normal}.  Use with care.

@item --with-lis[=LIS-DIR]
@itemx --without-lis
@opindex lis
Specify the @samp{LIS-DIR} directory in which to find LiS headers.  Also
specifies that the build is to be made against Linux STREAMS.  The default is
@file{/usr/@-include/@-LiS} if it exists, @samp{no} otherwise.  This directory is
normally located by the @command{configure} script and need only be provided for
special cross-build environments or when requested by a @command{configure}
script error message.
This option has no effect on packages that do not use the STREAMS subsystem.

@item --with-lfs[=LFS-DIR]
@itemx --without-lfs
@opindex lfs
Specify the @samp{LFS-DIR} directory in which to find LfS headers.  Also
specifies that the build is to be made against Linux Fast-STREAMS.  The default
is @file{/usr/@-include/@-streams} if it exists, @samp{no} otherwise.  This
directory is normally located by the @command{configure} script and need only be
provided for special cross-build environments or when requested by a
@command{configure} script error message.
This option has no effect on packages that do not use the STREAMS subsystem.

@item --with-strconf-master=STRCONF_CONFIG
@opindex strconf-master
Specify the @samp{STRCONF_CONFIG} file name to which the configuration master
file is written.  The default is @file{Config.master}.
This option has no effect on packages that do not use the STREAMS subsystem and
the strconf scripts.

@item --with-base-major=STRCONF_MAJBASE
@opindex base-major
Start numbering for major devices at @samp{STRCONF_MAJBASE}.  The default is
@samp{230}.
This option has no effect on packages that do not use the STREAMS subsystem and
the strconf scripts.

@end table

@include configure.texi

@c ----------------------------------------------------------------------------

@node Environment Variables
@subsubsection Environment Variables
@cindex configure environment variables

Following are additional environment variables to @command{configure}, their
meaning and use:

@vtable @var
@item GPG
GPG signature command.  This is used for signing distributions by the
maintainer.  By default, @command{configure} will search for this tool.

@item GNUPGUSER
GPG user name.  This is used for signing distributions by the maintainer.

@item GNUPGHOME
GPG home directory.  This is used for signing distributions by the maintainer.

@item GPGPASSWD
GPG password for signing.  This is used for signing distributions by the
maintainer.  This environment variable is not maintained by the
@command{configure} script and should only be used on an isolated system.

@item SOELIM
Roff source elimination command.  This is only necessary when the option
@command{--with-cooked-manpages} has been specified and @command{configure}
cannot find the proper @command{soelim} command.  By default,
@command{configure} will search for this tool.

@item REFER
Roff references command.  This is only necessary when the option
@command{--with-cooked-manpages} has been specified and @command{configure}
cannot find the proper @command{refer} command.  By default, @command{configure}
will search for this tool.

@item TBL
Roff table command.  This is only necessary when the option
@command{--with-cooked-manpages} has been specified and @command{configure}
cannot find the proper @command{tbl} command.  By default, @command{configure}
will search for this tool.

@item PIC
Roff picture command.  This is only necessary when the option
@command{--with-cooked-manpages} has been specified and @command{configure}
cannot find the proper @command{pic} command.  By default, @command{configure}
will search for this tool.

@item GZIP
Default compression options provided to @command{GZIP_CMD}.

@item GZIP_CMD
Manpages (and kernel modules) compression commands.  This is only necessary when
the option @command{--without-compressed-manpages} has @emph{not} been specified
and @command{configure} cannot find the proper @command{gzip} command.  By
default, @command{configure} will search for this tool.

@item BZIP2
Default compression options provided to @command{BZIP2_CMD}

@item BZIP2_CMD
Manpages compression commands.  This is only necessary when the option
@command{--without-compressed-manpages} has @emph{not} been specified and
@command{configure} cannot find the proper @command{bzip2} command.  By default,
@command{configure} will search for this tool.

@item MAKEWHATIS
Manpages apropros database rebuild command.  By default, @command{configure}
will search for this tool.  By default, @command{configure} will search for this
tool.

@item CHKCONFIG
Chkconfig command.  This was used for installation of init scripts.  All
pacakges now come with @command{init_install} and @command{init_remove} scripts
used to install and remove init scripts on both RPM and debian systems.

@item RPM
Rpm command.  This is only necessary for RPM builds.  By default,
@command{configure} will search for this tool.

@item RPMBUILD
Build RPM command.  This is only necessary for RPM builds.  By default,
@command{configure} will search for this tool.  @command{rpm} will be used
instead of @command{rpmbuild} only if @command{rpmbuild} cannot be found.

@item DPKG
Dpkg comand.
This command is used for building debian packages.
By default, @command{configure} will search for this tool.

@item DPKG_SOURCE
Dpkg-source command.
This command is used for building debian dsc packages.
By default, @command{configure} will search for this tool.

@item DPKG_BUILDPACKAGE
Dpkg-buildpackage command.
This command is used for building debian deb packages.
By default, @command{configure} will search for this tool.

@item DEB_BUILD_ARCH
Debian build architecture.
This variable is used for building debian packages.
The default is the autoconf build architecutre.

@item DEB_BUILD_GNU_CPU
Debian build cpu.
This variable is used for building debian packages.
The default is the autoconf build cpu.

@item DEB_BUILD_GNU_SYSTEM
Debian build os.
This variable is used for building debian packages.
The default is the autoconf build os.

@item DEB_BUILD_GNU_TYPE
Debian build alias.
This variable is used for building debian packages.
The default is the autoconf build alias.

@item DEB_HOST_ARCH
Debian host architecture.
This variable is used for building debian packages.
The default is the autoconf host architecture.

@item DEB_HOST_GNU_CPU
Debian host cpu.
This variable is used for building debian packages.
The default is the autoconf host cpu.

@item DEB_HOST_GNU_SYSTEM
Debian host os.
This variable is used for building debian packages.
The default is the autoconf host os.

@item DEB_HOST_GNU_TYPE
Debian host alias.
This variable is used for building debian packages.
The default is the autoconf host alias.

@item LDCONFIG
Configure loader command.  Command used to configure the loader when libraries
are installed.  By default, @command{configure} will search for this tool.

@item DESTDIR
Cross build root directory.  Specifies the root directory for build and
installation.  For example, for @cite{Nex@-us@-Ware} cross-builds, this is set to
environment variable @var{NEX@-US@-WARE@-_@-PRE@-FIX} on configuration to point to the
root of the cross-build tree for both configuration and installation.

@item DEPMOD
Build kernel module dependencies command.  This is used during installation of
kernel modules to a running kernel to rebuild the modules dependency database.
By default, @command{configure} will search for this tool.

@item MODPROBE
Probe kernel module dependencies command.  This is used during installation of
kernel modules to a running kernel to remove old modules.  By default,
@command{configure} will search for this tool.

@item LSMOD
List kernel modules command.  This is used during installation of kernel modules
to a running kernel to detect old modules for removal.  By default,
@command{configure} will search for this tool.

@item LSOF
List open files command.  This is used during installation of kernel modules to
a running kernel to detect old modules for removal.  Processes owning the old
kernel modules will be killed and the module removed.  If the process restarts,
the new module will be demand loaded.  By default, @command{configure} will
search for this tool.

@item GENKSYMS
Generate kernel symbols command.  This is used for generating module symbol
versions during build.  By default, @command{configure} will search for this
tool.

@item KGENKSYMS
Linux 2.6 generate kernel symbols command.  This is used for generating module
symbol version during build.  By default, @command{configure} will search for
this tool.

@item OBJDUMP
Object dumping command.  This is used for listing information about object
files.  By default, @command{configure} will search for this tool.

@item NM
Object symbol listing command.  This is used for listing information about
object files.
By default, @command{configure} will search for this tool.

@item MODPOST_CACHE
Cache file for modpost.  The version of the @command{modpost.sh} script that
ships with each package can cache information to a cache file to speed multiple
builds.  This environment variable is used to specify a cache file.

@item AUTOM4TE
Autom4te command.
This is the executable used by autotest for pre- and post-installation checks.
By default, @command{configure} will search for this tool.

@item AUTOTEST
Autotest macro build command.
This is the executable used by autotest for pre- and post-installation checks.
By default, @command{configure} will search for this tool.
@end vtable

@subsubsection Build
To build from the tar ball, @xref{Building from the Tar Ball}.

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Building
@section Building
@cindex building

@menu
* Building from the Source RPM::	the next best approach
* Building from the Debian DSC::	the next best approach for Debian
* Building from the Tar Ball::		last resort
@end menu

@c ----------------------------------------------------------------------------

@node Building from the Source RPM
@subsection Building from the Source RPM
@cindex building, source srpm
@cindex source rpms

If you have downloaded the necessary source RPM (@pxref{Downloading the Source
RPM}), then the following instructions will rebuild the binary RPMs on your
system.  Once the binary RPMs are rebuilt, you may install them as described
above (@pxref{Installing the Binary RPM}).

@noindent
The source RPM is rebuilt to binary RPMs as follows:

@cartouche
@example
% wget http://www.openss7.org/@-rpms/@-SRPMS/@-@value{PACKAGE}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@-.src@-.rpm
% rpmbuild --rebuild -vv @value{PACKAGE}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}.src.rpm
@end example
@end cartouche

@noindent
The rebuild process can also recognize a number of options that can be used to
tweak the resulting binaries, @xref{Configuring the Source RPM}.  These options
are provided on the @command{rpm} command line.  For example:

@cartouche
@example
% rpmbuild --rebuild -vv --target athlon-redhat-linux \ 
  --define "_kversion @value{_kversion}" \ 
  --with lis -- @value{PACKAGE}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@-.src@-.rpm
@end example
@end cartouche

@noindent
will rebuild binary RPM
for the @samp{@value{_kversion}} kernel
for the
@samp{athlon} architecture against the @cite{LiS} STREAMS package.
@footnote{Note that the @samp{_kversion} of @samp{@value{_kversion}} is only an example.}

@subsubheading Installation

To install the resulting binary RPM, @xref{Installing the Binary RPM}.

@c ----------------------------------------------------------------------------

@node Building from the Debian DSC
@subsection Building from the Debian DSC
@cindex building, source dscs
@cindex source dscs

If you have downloaded the necessary Debian DSC (@pxref{Downloading the Debian
DSC}), then the following instructions will rebuild the binary DEBs on your
system.  Once the binary DEBs are rebuilt, you may install them as described
above (@pxref{Installing the Debian DEB}).

@noindent
The Debian DSC is rebuilt to binary DEBs as follows:

@cartouche
@example
% wget http://www.openss7.org/@-debian/@-@value{PACKAGE}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}@-.dsc
% wget http://www.openss7.org/@-debian/@-@value{PACKAGE}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}@-.tar@-.gz
% dpkg-buildpackage -v @value{PACKAGE}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}.dsc
@end example
@end cartouche

@noindent
The rebuild process can also recognize a number of options that can be used to
tweak the resulting binaries, @xref{Configuring the Debian DSC}.  These options
are provided in the environment variable @var{BUILD_DPKGOPTIONS} and have the
same form as the options to @command{configure}, @xref{Configuring the Tar Ball}.
For example:

@cartouche
@example
% BUILD_DEBOPTIONS='
        --with-lis
        --with-k-release=@value{_kversion}
        --host=athlon-debian-linux-gnu'
  dpkg-buildpackage -v \
  @value{PACKAGE}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}.dsc
@end example
@end cartouche

@noindent
will rebuild binary DEB
for the @samp{@value{_kversion}} kernel
for the
@samp{athlon} architecture against the @cite{LiS} STREAMS package.
@footnote{Note that the @samp{_kversion} of @samp{@value{_kversion}} is only an example.}

@subsubheading Installation

To install the resulting binary DEB, @xref{Installing the Debian DEB}.

@c ----------------------------------------------------------------------------

@node Building from the Tar Ball
@subsection Building from the Tar Ball
@cindex building, tar ball
@cindex tar ball

If you have downloaded the tar ball (@pxref{Downloading the Tar Ball}), then the
following instructions will rebuild the package on your system.  (Note that the
build process does not required @command{root} privilege.)

@subsubsection Native Build

Folowing is an example of a native build against the running kernel:

@cartouche
@example
% wget http://www.openss7.org/@-@value{PACKAGE}@--@value{VERSION}@-.tar@-.bz2
% tar -xjvf @value{PACKAGE}-@value{VERSION}.tar.bz2
% pushd @value{PACKAGE}-@value{VERSION}
% ./configure
% make
% popd
@end example
@end cartouche

@subsubsection Cross-Build

Following is an example for a cross-build.  The kernel release version must
always be specified for a cross-build.@footnote{Because it @emph{is} a
cross-build, the kernel version on the build machine is unlikely to be the
kernel version of the target machine, except by coincidence.}  If you are
cross-building, specify the root for the build with environment variable
@var{DESTDIR}.  The cross-compile host must also be specified if different from
the build host.  Either the compiler and other tools must be in the usual places
where GNU @command{autoconf} can find them, or they must be specified with
declarations such as @samp{CC=/u5/@-Nex@-us@-Ware@-24/@-ppc@--linux/@-gcc} on the
@command{configure} command line.  Look in the file @file{configure.nexusware}
in the release package for an example.

@cartouche
@example
% wget http://www.openss7.org/@-@value{PACKAGE}@--@value{VERSION}@-.tar@-.bz2
% tar -xjvf @value{PACKAGE}@--@value{VERSION}@-.tar@-.bz2
% pushd @value{PACKAGE}@--@value{VERSION}
% ./configure DESTDIR="/some/@-other/@-root" \ 
	--with-k-release=2.4.18 --host sparc-linux
% make
% popd
@end example
@end cartouche

@subsubsection NexusWare Build

Additional support is provided for cross-building for the @cite{Performance
Technologies Inc.} @cite{Nex@-us@-Ware} embedded target for the CPC-384, CPC-388 and
CPC-396 cards.  A configuration script wrapper (@file{configure.nexusware}) is
provided to simplify the cross-build operation for these targets.  The following
steps describe the process:

@enumerate
@item Follow the normal @cite{Nex@-us@-Ware} instructions for rebuilding a
@file{generic} kernel and flash image as follows:  (Note that I keep my
@cite{Nex@-us@-Ware} build in @file{/u5/@-Nex@-us@-Ware@-24}.)

@cartouche
@example
% pushd /u5/@-Nex@-us@-Ware@-24
% source SETUP.sh
% make
% popd
@end example
@end cartouche

For more recent @cite{Nex@-us@-Ware} releases, the method for rebuilding a
kernel is a little different as follows:

@cartouche
@example
% pushd /u5/@-Nex@-us@-Ware@-80
% ./nexus 2.4
% ./nexus 8260
% ./nexus quick
% . SETUP.sh
% popd
@end example
@end cartouche

@item Next download, unpack
(@pxref{Downloading the Tar Ball}) and configure (@pxref{Configuring the Tar
Ball}) using the provided @file{configure.nexusware} wrapper for
@command{configure}.  This wrapper simply tells the @command{configure} script
where to find the @cite{Nex@-us@-Ware} sources and which @cite{Nex@-us@-Ware}
cross-building tools to use for a cross-compile.@footnote{Although I have not
tried it, because we use GNU @command{autoconf} for configuration, these
instructions should work equally well for the Solaris @cite{Nex@-us@-Ware}
cross-building environment as it does for the Linux @cite{Nex@-us@-Ware}
cross-building environment.}

Any of the normal @command{configure} script options (@pxref{Configuring the Tar
Ball}) can be used on the same line as @samp{./configure.nexusware}.  One of
particular interest to embedded targets is @samp{--with-k-optimize=size} to
attempt to reduce the size of the kernel modules.

You must specify the kernel version of the kernel for which you are configuring.
Add the --with-k-release=2.4.18 option for older @cite{Nex@-us@-Ware} releases,
--with-k-release=2.4.25 or --with-k-release=2.6.12 for more current
@cite{Nex@-us@-Ware} releases.

@item Install as normal (@pxref{Installing the Tar Ball}), however, for embedded
targets the @command{install-strip} target should be used instead of the
@command{install} target.  The @command{install-strip} target will strip
unnecessary symbols from kernel modules and further reduce the size in the root
file system flash image.

@end enumerate

Following is what I use for configuration and installation: (My @cite{Nex@-us@-Ware}
tree is rooted at @file{/u5/@-Nex@-us@-Ware}.)

@cartouche
@example
% pushd /u5/@-Nex@-us@-Ware@-80
% ./nexus 2.4
% ./nexus 8260
% ./nexus quick
% . SETUP.sh
% popd
% wget http://www.openss7.org/@-@value{PACKAGE}@--@value{VERSION}@-.tar@-.bz2
% tar -xjvf @value{PACKAGE}-@value{VERSION}.tar.bz2
% pushd @value{PACKAGE}-@value{VERSION}
% ./configure.nexusware --with-k-release=2.4.25 --with-k-optimize=size
% make
% make DESTDIR="$NEXUSWARE_PREFIX" install-strip
% popd
@end example
@end cartouche

Once built and installed in the @cite{Nex@-us@-Ware} directory, you will have to
(currently) hand edit a @file{.spec} file to include the components you want in
the @cite{Nex@-us@-Ware} root file system.  If you are cross-building for
@cite{Nex@-us@-Ware} you should already know what that means.  Objects that you
might be interested in copying to the root file system are kernel modules that
were installed in
@file{@var{$NEX@-US@-WARE@-_@-PRE@-FIX}/@-lib/@-modules/@-2.4.18/@-@value{PACKAGE_LCNAME}},
libraries installed in @file{@var{$NEX@-US@-WARE@-_@-PRE@-FIX}/@-usr/@-lib} and utility
functions installed in @file{@var{$NEX@-US@-WARE@-_@-PRE@-FIX}/@-usr/@-bin} and
@file{@var{$NEX@-US@-WARE@-_@-PRE@-FIX}/@-usr/@-sbin} and test programs in
@file{@var{$NEX@-US@-WARE@-_@-PRE@-FIX}/@-usr/@-libexec}.  If you would prefer that these
programs be installed in @file{@var{$NEX@-US@-WARE@-_@-PRE@-FIX}/@-lib},
@file{@var{$NEX@-US@-WARE@-_@-PRE@-FIX}/@-bin}, @file{@var{$NEX@-US@-WARE@-_@-PRE@-FIX}/@-sbin} and
@file{@var{$NEX@-US@-WARE@-_@-PRE@-FIX}/@-libexec}, (say because you want to remote mount
the @file{/usr} directory after boot), then specify the @samp{--exec-prefix=/}
option to @samp{./configure.nexusware}.

In addition, because @cite{Nex@-us@-Ware} does not include an
@file{/etc/@-modules.conf} file by default, it will be necessary to add one or
edit your @file{rc.4} file to @command{insmod} the necessary
@file{@value{PACKAGE_NAME}} modules at boot time.

Also, @cite{Nex@-us@-Ware} does not configure its kernels for @var{CONFIG_KMOD},
so any kernel modules must be loaded by the @file{rc.4} init script at boot.
On more recent @cite{Nex@-us@-Ware} releases, the init scripts will be installed
in @file{@var{$NEX@-US@-WARE@-_PRE@-FIX}/etc/rc.d/init.d/} but you must manually
edit your @file{rc.4} script to invoke these scripts.

Once you have completed the necessary @file{.spec} and @file{rc.4} file entries,
you need to rebuild the @samp{generic} kernel flash image once more for these
objects to be included in the flash file system.  It is important that this
second build of the kernel image be the same as the first.

When modifying and rebuilding a @cite{Nex@-us@-Ware} kernel, it will be necessary to
rebuild and install @file{@value{PACKAGE_NAME}}.  Simply perform the last @samp{make
install-strip} stage or start again with @samp{./configure.nexusware}.  You can
place the unpacked tarball in
@file{@var{$NEX@-US@-WARE@-_@-PRE@-FIX}/usr/src/@value{PACKAGE}}, and add the following to
the top-level @cite{Nex@-us@-Ware} @file{Makefile} to make the build process a
single step process instead of dual pass:

@cartouche
@smallexample
all:
...
        (cd kernels/generic; $(MAKE) depend)
        (cd usr/src/pcmcia-cs-3.2.1; $(MAKE) config)
        (cd kernels/generic; $(MAKE))
        (cd usr/src/pcmcia-cs-3.2.1; $(MAKE) pti)
        (cd usr/src/pti; $(MAKE))
        (cd drivers; $(MAKE))
        (cd utility; $(MAKE))
#       uncomment for LiS build
#       (cd usr/src/LiS; ./configure.nexusware; $(MAKE) install-strip)
#       uncomment for LfS build
        (cd usr/src/streams; ./configure.nexusware; $(MAKE) install-strip)
#       uncomment for @value{PACKAGE} build
#       (cd usr/src/@value{PACKAGE}; ./configure.nexusware; $(MAKE) install-strip)
        (cd build/generic; $(MAKE))
...
@end smallexample
@end cartouche

Another, perhaps simpler approach, is to make the necessary edits to the
@cite{Nex@-us@-Ware} top-level @file{Makefile} and @file{.spec} and @file{rc.4}
files, download and unpack the tar ball into the @cite{Nex@-us@-Ware} directory, and
build the @cite{Nex@-us@-Ware} flash image as normal:

@cartouche
@example
% wget http://www.openss7.org/@-@value{PACKAGE}@--@value{VERSION}@-.tar@-.bz2
% pushd /u5/@-Nex@-us@-Ware@-24
% source SETUP.sh
% pushd usr/src
% tar -xjvf $@{DIRSTACK[2]@}/@-@value{PACKAGE}@--@value{VERSION}@-.tar@-.bz2
% ln -sf @value{PACKAGE}-@value{VERSION} @value{PACKAGE}
% popd
% make
% popd
@end example
@end cartouche

The situation is a little more complex for recent @cite{Nex@-us@-Ware} releases.

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Installing
@section Installing
@cindex installing

@menu
* Installing the Binary RPM::		the easiest approach
* Installing the Debian DEB::		the easiest approach for Debian
* Installing the Tar Ball::		last resort
@end menu

@c ----------------------------------------------------------------------------

@node Installing the Binary RPM
@subsection Installing the Binary RPM
@cindex installing, binary rpms
@cindex binary rpms

If you have downloaded the necessary binary RPMs (@pxref{Downloading the Binary
RPM}), or have rebuilt binary RPMs using the source RPM (@pxref{Building from
the Source RPM}), then the following instructions will install the RPMs on your
system. For additional information on @command{rpm}, see @ref{rpm(8), rpm(8),
rpm(8), *manpages*, The Manual Pages}.

@cartouche
@example
% pushd RPMS/i686
% rpm -ihv @value{PACKAGE}-*-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.i686.rpm
@end example
@end cartouche

@noindent
You must have the correct binary RPMs downloaded or built for this to be
successful.

Some of the packages are relocatable and can have final installation directories
altered with the @samp{--relocate} option to @command{rpm}, see @ref{rpm, rpm(8),
rpm(8), rpm(8), *manpages*, The Manual Pages}.  For example, the following
will relocate the documentation and info directories:

@cartouche
@example
% pushd RPMS/i686
% rpm -ihv \ 
        --relocate '/usr/share/doc=/usr/local/share/doc' \ 
        --relocate '/usr/share/info=/usr/local/share/info' \ 
        -- @value{PACKAGE}-doc-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.i686.rpm
@end example
@end cartouche

@noindent
The previous example will install the @file{@value{PACKAGE}-doc} package by will
relocate the documentation an info directory contents to the @file{/usr/local}
version.

@c ----------------------------------------------------------------------------

@node Installing the Debian DEB
@subsection Installing the Debian DEB
@cindex installing, binary debs
@cindex binary debs

If you have downloaded the necessary Debian DEBs (@pxref{Downloading the Debian
DEB}), or have rebuild binary DEBs using the Debian DSC (@pxref{Building from
the Debian DSC}), then the following instructions will install the DEBs on your
system.  For additional information on @command{dpkg}, see @ref{dpkg(8),
dpkg(8), dpkg(8), *manpages*, The Manual Pages}.

@cartouche
@example
% pushd debian
% dpkg -iv @value{PACKAGE}-*_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_*.deb
@end example
@end cartouche

@noindent
You must have the correct @file{.deb} files downloaded or build for this to be
successful.

@c ----------------------------------------------------------------------------

@node Installing the Tar Ball
@subsection Installing the Tar Ball
@cindex installing, tar ball
@cindex tar ball

After the build process (@pxref{Building from the Tar Ball}), installation only
requires execution of one of two @command{make} targets:

@table @asis
@item @samp{make install}
The @samp{install} @command{make} target will install all the components of the
package.  Root privilege is required to successfully invoke this target.

@item @samp{make install-strip}
The @samp{install-strip} @command{make} target will install all the components
of the package, but will strip unnecessary information out of the objects and
compress manual pages.  Root privilege is required to successfully invoke this
target.
@end table

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Removing
@section Removing
@cindex removing

@menu
* Removing the Binary RPM::		the easiest approach
* Removing the Debian DEB::		the easiest approach for Debian
* Removing the Source RPM::		the next best approach
* Removing the Debian DSC::		the next best approach for Debian
* Removing the Tar Ball::		last resort
@end menu

@c ----------------------------------------------------------------------------

@node Removing the Binary RPM
@subsection Removing the Binary RPM
@cindex removing, binary rpms
@cindex binary rpms

To remove an installed version of the binary RPMs (whether obtained from the
OpenSS7 binary RPM releases, or whether created by the source RPM), execute the
following command:

@cartouche
@example
% rpm -evv `rpm -qa | grep '^@value{PACKAGE}-'`
@end example
@end cartouche

For more information on @command{rpm}, see @ref{rpm(8), rpm(8), rpm(8),
*manpages*, The Manual Pages}.

@c ----------------------------------------------------------------------------

@node Removing the Debian DEB
@subsection Removing the Debian DEB
@cindex removing, binary debs
@cindex binary debs

To remove and installed version of the debian DEB (whether obtained from the
OpenSS7 binary DEB releases, or whether created by the Debian DSC), execute the
following command:

@cartouche
@example
% dpkg -ev `dpkg -l | grep '^@value{PACKAGE}-'`
@end example
@end cartouche

For more information on @command{dpkg}, see @ref{dpkg(8), dpkg(8), dpkg(8),
*manpages*, The Manual Pages}.

@c ----------------------------------------------------------------------------

@node Removing the Source RPM
@subsection Removing the Source RPM
@cindex removing, source srpm
@cindex source rpms

To remove all the installed binary RPM build from the source RPM, see
@ref{Removing the Binary RPM}.  Then simply remove the binary RPM package
files and source RPM file.  A command such as:

@cartouche
@example
% find / -name '@value{PACKAGE}-*.rpm' -type f -print0 | xargs --null rm -f
@end example
@end cartouche

@noindent
should remove all @file{@value{PACKAGE_NAME}} RPMs from your system.

@c ----------------------------------------------------------------------------

@node Removing the Debian DSC
@subsection Removing the Debian DSC
@cindex removing, source dscs
@cindex source dscs

To remove all the installed binary DEB build from the Debian DSC, see
@ref{Removing the Debian DEB}.  Then simply remove the binary DEB package
files and Debian DSC file.  A command such as:

@cartouche
@example
% find / \( -name '@value{PACKAGE}-*.deb' \
         -o -name '@value{PACKAGE}-*.dsc' \
         -o -name '@value{PACKAGE}-*.tar.* \
         \) -type f -print0 | xargs --null rm -f
@end example
@end cartouche

@noindent
should remove all @file{@value{PACKAGE_NAME}} DEBs, DSCs and TARs from your
system.

@c ----------------------------------------------------------------------------

@node Removing the Tar Ball
@subsection Removing the Tar Ball
@cindex removing, tar ball
@cindex tar ball

To remove a version installed from tar ball, change to the build directory where
the package was built and use the @samp{uninstall} @command{make} target as
follows:

@cartouche
@example
% cd /usr/src/@value{PACKAGE}
% make uninstall
% cd ..
% rm -fr @value{PACKAGE}-@value{VERSION}
% rm -f @value{PACKAGE}-@value{VERSION}.tar.gz
% rm -f @value{PACKAGE}-@value{VERSION}.tar.bz2
@end example
@end cartouche

If you have inadvertently removed the build directory and, therefore, no longer
have a configured directory from which to execute @samp{make uninstall}, then
perform all of the steps for configuration and installation (@pxref{Installing
the Tar Ball}) except the final installation and then perform the steps above.

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Loading
@section Loading
@cindex loading

@subsection Normal Module Loading

When @file{@value{PACKAGE_NAME}} installs, modules and drivers are normally
configured for demand loading.  The @samp{install} and @samp{install-strip}
@command{make}
@mkindex all
@mkindex install
@mkindex install-strip
targets will make the necessary changes to the @file{/etc/@-modules@-.conf} file and
place the modules in an appropriate place in
@file{@value{_rootdir}/@-lib/@-modules/@-@value{_kversion}/@-@value{PACKAGE_LCNAME}}.
The @samp{make install} process should have copied the kernel module files
@file{streams-*.o} to the directory
@file{@value{_rootdir}/@-lib/@-modules/@-@value{_kversion}/@-@value{PACKAGE_LCNAME}}.
This means that to load any of these modules, you can simply execute, for
example, @samp{modprobe stream-@var{somedriver}}.@footnote{Note that the
@samp{_kversion} of @samp{@value{_kversion}} is only an example.}

@subsubsection Linux STREAMS Module Loading

The @file{@value{PACKAGE}} demand load system supports both the old kerneld and
the new kmod mechanisms for demand loading kernel modules.

The convention for @file{@value{PACKAGE}} kernel loadable object files is:
@itemize @bullet
@item Their name start with "streams-".
@item They are placed in @file{/@-lib@-/@-modules@-/@-@value{_kversion}@-/@-streams@-/@-}, where @samp{@value{_kversion}} is an example kernel version.
@pgindex /lib/@-modules/@-@value{_kversion}/@-streams/@-
@end itemize

If your kernel has been built using the @file{kerneld} daemon, then
@file{@value{PACKAGE_NAME}} kernel modules will automatically load as soon as
the STREAMS module is pushed or the driver is opened.  The @samp{make install}
process makes the necessary changes to the
@file{@value{_rootdir}/@-etc/@-modules.conf} file.  After the install, you will see
lines like the following added to your @file{@value{_rootdir}/@-etc/@-modules.conf}
file:

@cartouche
@example
prune modules.@value{PACKAGE_LCNAME}
if -f /lib/modules/`uname -r`/modules.@value{PACKAGE_LCNAME}
include /lib/modules/`uname -r`/modules.@value{PACKAGE_LCNAME}
endif
@end example
@end cartouche

@noindent
which will provide for demand loading of the modules if they have been built and
installed for the running kernel.  The @file{/lib/@-modules/@-@command{`uname
-r`}/@-modules.@value{PACKAGE_LCNAME}} file looks like this:

@cartouche
@smallexample
alias char-major-245  streams-@var{some_driver}
alias char-major-246  streams-@var{other_driver}
@end smallexample
@end cartouche

Note that STREAMS modules are not listed in this file, but will be loaded by
name using @file{kerneld} if available.

@subsubsection Linux Fast-STREAMS Module Loading

@cite{Linux Fast-STREAMS} has a wider range of kernel module loading mechanisms
than is provided by @cite{LiS}.  For mechanisms used for kernel module loading
under @cite{Linux Fast-STREAMS}, @xref{Top, About This Manual, , STREAMS, Linux
Fast-STREAMS Reference Manual}.


@subsection NexusWare Module Loading
@cindex NexusWare
@cindex loading kernel modules

Under exceptional circumstances, such as a @cite{Nex@-us@-Ware} build, it is
necessary to hand-edit a @file{.spec} and @file{rc.4} file to load the modules
at boot time.@footnote{At some time I expect to create an
@samp{install-nexusware} target that will make the necessary modifications to
the @file{.spec} and @file{rc.4} files automatically.}

@node Maintenance
@section Maintenance

@menu
* Makefile Targets::
@end menu

@node Makefile Targets
@subsection Makefile Targets

Automake has many targets, not all of which are obvious to the casual user.  In addition,
@cite{OpenSS7} automake files have additional rules added to make maintaining and releasing a
package somewhat easier.  This list of targets provides some help with what targets can be invoked,
what they do, and what they hope to acheive.  The available targets are as follows:

@menu
* User Targets::
* Maintainer Targets::
* Clean Targets::
* Release Targets::
* Logging Targets::
* Problem Report Targets::
* Release Archive Targets::
* RPM Build Targets::
* Debian Build Targets::
@end menu

@node User Targets
@subsubsection User Targets

The following are normal targets intended to be invoked by installers of the package.  They are
concerned with compiling, checking the compile, installing, checking the installation, and
uninstalling the package.

@table @samp
@item [all]
@mkindex all
This is also the default target.  It compiles the package.  This is performed after configuring the
source with @samp{configure}.  A makefile stub is provided so that if the package has not had
autoreconf run (such as when checked out from CVS, the package will attempt to run @samp{autoreconf
-fiv}.

All @cite{OpenSS7 Project} packages are configured without maintainer mode and without dependency
tracking by default.  This speed compilation of the package for one-time builds.  This also means
that if you are developing using the source package (edit-compile-test-cycle), changes made to
source files will not cause the automatic rebuilding due to dependencies.  There are two ways to
enable dependency tracking: specify @samp{--enable-maintainer-mode} to @command{configure}; or,
specify @samp{--enable-dependency-tracking} to @command{configure}.  I use the former during my
edit-compile-test cycle.

This is a standard @cite{GNU} @command{automake} makefile target.
This target does not require root privilege.

@item check
@mkindex check
All @cite{OpenSS7 Project} packages provide check scripts for the check target.  This step is
performed after compiling the package and will run all of the check programs against the compiled
binaries.  Which checks are performed depends on whether @samp{--enable-maintainer-mode} was
specified to configure.  If in maintainer mode, checks that assist with the release of the package
will be run (such as checking that all manual pages load properly and that they have required
sections.)  We recommend running the check stage before installing, because it catches problems that
might keep the installed package from functioning properly.

Another way to enable the greater set of checks, without invoking maintainer mode, is to specify
@samp{--enable-checks} to @command{configure}.

This is a standard @cite{GNU} @command{automake} makefile target, although the functions performed
are customized for the @cite{OpenSS7 Project}.
This target does not require root privilege.

@item install
@itemx install-strip
@mkindex install
@mkindex install-strip
The @samp{install} target installs the package.  This target also performs some actions similar to
the pre- and post-install scripts used by packaging tools such as @command{rpm} or @command{dpkg}.
The @samp{install-strip} target strips unnecessary symbols from executables and kernel modules
before installing.

This is a standard @cite{GNU} @command{automake} makefile target.
This target requires root privilege.

@item installcheck
@mkindex installcheck
All @cite{OpenSS7 Project} packages provide test scripts for the @samp{installcheck} target.  Test
scripts are created and run using autotest (part of the autoconf package).  Which test suites are
run and how extensive they are depends on whether @samp{--enable-maintainer-mode} was specified to
@command{configure}.  When in maintainer mode, all test suites will be run.  When not in maintainer
mode, only a few post-install checks will be performed, but the test suites themselves will be
installed in
@file{@value{_libexecdir}/@value{PACKAGE}}@footnote{@file{@value{_libexecdir}/@value{PACKAGE}} is
just an example, the actual location is @file{$@{libexecdir@}/$@{PACKAGE@}}, which varies from
distribution to distribution (as some distributions such as Mandriva do not have a libexec
directory).} for later use.

This is a standard @cite{GNU} @command{automake} makefile target.
This target might require root privilege.  Tests requiring root privilege will be skipped when run
as a regular user.  Tests requiring regular account privileges will be skipped when run as root.

@item retest
@mkindex retest
To complement the @samp{installcheck} target above, all @cite{OpenSS7 Project} packages provide the
@samp{retest} target as a means to rerun failed conformance testsuite test cases.  The retest target
is provided because some test cases in the testsuites have delicate timing considerations that allow
them to fail sporadically.  Invoking this target will retest the failed cases until no cases that
are not expected failures remain.

This is an @cite{OpenSS7 Project} specific makefile target.
As with @samp{installcheck}, this target might require root privilege.  Tests requiring root
privilege will be skpped when run as a regular user.  Tests requiring regular account privileges
will be skipped when run as root.

@item uninstall
@mkindex uninstall
This target will reverse the steps taken to install the package.  This target also performs pre- and
post- erase scripts used by packaging tools such as @cite{rpm} or @cite{dpkg}.  You need to have a
configured build directory from which to execute this target, however, you do not need to have
compiled any of the files in that build directory.@footnote{Therefore, it is possible to download
the package, configure it, and then uninstall it.  This is handy if you do not have the sources used
to build and install the package immediately available.}

This is a standard @cite{GNU} @command{automake} makefile target.
This target requires root privilege.

@item remove
@mkindex remove
This target is like @samp{uninstall} with the exception that it uninstalls in the reverse order that
installation was performed.@footnote{This is useful from the @cite{OpenSS7 Master Package}.}

This is an @cite{OpenSS7 Project} specific makefile target.
@end table

@node Maintainer Targets
@subsubsection Maintainer Targets

The following targets are targets intended for use by maintainers of the package, or those
responsible for rerelease and packaging of a derivative work of the package.  Some of these targets
are only effective when maintainer mode has been invoked (@samp{--enable-maintainer-mode} specified
to @command{configure}.)

@table @samp
@item dist
@mkindex dist
Creates a distribution package (tarball) in the top level build directory.  @cite{OpenSS7 Project}
packages distribute two archives: a @samp{gzip tar} archive and a @samp{bzip tar} archive.  These
archives will have the name @file{@value{PACKAGE}-@value{VERSION}.tar.gz} and
@file{@value{PACKAGE}-@value{VERSION}.tar.bz2}.

This is a standard @cite{GNU} @command{automake} makefile target.
This target does not require root privilege.

@item distcheck
@mkindex distcheck
This target is intended for use when releasing the package.  It creates the @command{tar} archives
above and then unpacks the tarball in a source directory, configures in a separate build directory,
compiles the package, installs the package in a separate install directory, tests the install
package to ensure that some components work, and, finally, uses the unpacked source tree to build
another tarball.  If you have added or removed files from the package, this is a good way to ensure
that everything is still stable for release.

This is a standard @cite{GNU} @command{automake} makefile target.
This target does not require root privilege.
@end table

@node Clean Targets
@subsubsection Clean Targets

@table @samp
@item mostlyclean
@mkindex mostlyclean
Cleans out most of the files from the compile stage.  This target is helpful if you have not enabled
dependency tracking and need to recompile with changes.

This is a standard @cite{GNU} @command{automake} makefile target.
This target does not require root privilege.

@item clean
@mkindex clean
Cleans all the files from the build directory generated during the @samp{make [all]} phase.  It does
not, however, remove files from the directory left there from the @command{configure} run.  Use the
@samp{distclean} target to remove those too.

This is a standard @cite{GNU} @command{automake} makefile target.
This target might require root privilege if the @samp{installcheck} target or the
@command{testsuite} was invoked with root privilege (leaving files belonging to root).

@item distclean
@mkindex distclean
This target cleans out the directories left behind by @samp{distcheck} and removes all the
@command{configure} and generated files from the build directory.  This will effectively remove all
the files in the build directory, with the except of files that belong to you or some other process.

This is a standard @cite{GNU} @command{automake} makefile target.
This target might require root privilege if the @samp{installcheck} target or the
@command{testsuite} was invoked with root privilege (leaving files belonging to root).

@item maintainer-clean
@mkindex maintainer-clean
This target not only removes files from the build directory, it removes generated files from the
source directory as well.  Care should be taken when invoking this target, because it removes files
generated by the maintainer and distributed with the archive that might require special tools to
regenerate.  These special tools might only be available to the maintainer (but they aren't).  It
also means that you probably need a full blown Linux system to rebuild the package.

This is a standard @cite{GNU} @command{automake} makefile target.
This target might require root privilege if the @samp{installcheck} target or the
@command{testsuite} was invoked with root privilege (leaving files belonging to root).

@item check-clean
@mkindex check-clean
This target removes log files left behind by the @samp{check} target.  By default, the check scripts
append to log files in the top level build directory.  This target can be used to clean out those
log files before the next run.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.
@end table

@node Release Targets
@subsubsection Release Targets

The following are targets used to generate complete releases into the package distribution
directory.  These are good for unattended and NFS builds, which is what I use them for.  Also, when
building from atop multiple packages, these targets also recurse down through each package.

@table @samp
@item release
@mkindex release
Build all of the things necessary to generate a release.  On an @command{rpm} system this is the
distribution archives, the source rpm, and the architecture dependent and architecture independent
binary rpms.  All items are placed in the package distribution directory that can be specified with
the @samp{--with-pkg-distdir=DIR} option to @command{configure}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item forced-release
@mkindex forced-release
The @samp{release} target will not regenerate any files that already exist in the package
distribution directory.  This forced target will.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item release-sign
@mkindex release-sign
You will be prompted for a password, unless to specify it to make with the @var{GNUPGPASS} variable.
For unattended or non-interactive builds with signing, you can do that as: @samp{make
GNUPGPASS=mypasswd release-sign}

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item forced-release-sign
@mkindex forced-release-sign
The @samp{release-sign} target will not regenerate any files that already exist in the package
distribution directory.  This forced target will.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item release-clean
@mkindex release-clean
This target will remove all distribution files for the current package from the package distribution
directory.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.
@end table

@node Logging Targets
@subsubsection Logging Targets

For convenience, to log the output of a number of targets to a file, log targets are defined.  The
log file itself is used as the target to make, but make invokes the target minus a @file{.log}
suffix.  So, for example, to log the results of target @samp{foo}, invoke the target @samp{foo.log}.
The only target that this does not apply to is @samp{compile.log}.  When you invoke the target
@samp{compile.log} a simple @command{make} is invoked and logged to the file @file{compile.log}.
The @samp{foo.log} rule applies to all other targets.  This does not work for all targets, just a
selected few.@footnote{Note that because logging targets invoke a pipe, @command{make} does not
return the correct return status (always returns success if the @command{tee} operation is
successful).  Therefore, these targets should not be invoked by scripts that need to use the return
value from @command{make}.} Following are the logging targets:

@subsubheading Common Logging Targets

Common logging targets correspond to normal user @command{automake} makefile targets as follows:

@table @samp
@item compile.log
@mkindex compile.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @command{automake} makefile target
@samp{[all]}.

@item check.log
@mkindex check.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @command{automake} makefile target
@samp{check}.

@item install.log
@mkindex install.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @command{automake} makefile target
@samp{install}.

@item installcheck.log
@mkindex installcheck.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @command{automake} makefile target
@samp{installcheck}.

@item uninstall.log
@mkindex uninstall.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @command{automake} makefile target
@samp{uninstall}.

@item remove.log
@mkindex remove.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{remove}
target.
@end table

@subsubheading Maintainer Logging Targets

Maintainer logging targets correspond to maintainer mode @command{automake} makefile targets as
follows:

@table @samp
@item dist.log
@mkindex dist.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @command{automake} makefile target
@samp{dist}.

@item distcheck.log
@mkindex distcheck.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @command{automake} makefile target
@samp{distcheck}.

@item srpm.log
@mkindex srpm.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{remove}
target.

@item rebuild.log
@mkindex rebuild.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{remove}
target.

@item resign.log
@mkindex resign.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{remove}
target.

@item release.log
@mkindex release.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{remove}
target.

@item release-sign.log
@mkindex release-sign.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{remove}
target.
@end table

If you want to add one, simply add it to @var{LOGGING_TARGETS} in @file{Makefile.am}.

@node Problem Report Targets
@subsubsection Problem Report Targets

To ease problem report generation, all logging targets will automatically generate a problem report
suitable for mailing in the file @file{@i{target}.pr} for target @samp{@i{target}.log}.  This
problem report file is in the form of an email and can be sent using the included @command{send-pr}
script or by invoking the @samp{send-pr} makefile target.

There are two additional problem report targets:

@table @samp
@item pr
@mkindex pr
The @samp{pr} target is for independently generating a problem report outside of the build or
installation process.  The target will automatically generate a problem report skeleton suitable for
editting and mailing in the file @file{problem.pr}.  This problem report file is in the form of an
email and can be editted and sent directly, or sent using the included @command{send-pr} script or
by invoking the @samp{send-pr} target.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item send-pr
@mkindex send-pr
The @samp{send-pr} target is for finalizing and mailing a problem report generated either inside or
outside the build and installation process.  The target will automatically finalize and mail the
@file{problem.pr} problem report if it has changed since the last time that @samp{send-pr} was
invoked.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege (unless the problem report file was generated as root).
@end table

@node Release Archive Targets
@subsubsection Release Archive Targets

The following targets are used to generate and clean distribution archive and signature files.
Whereas the @samp{dist} target affects archives in the top build directory, the
@samp{release-archive} targets affects archives in the package distribution directory (either the
top build directory or that specified with @samp{--with-pkg-distdir=DIR} to @command{configure}).

You can change the directory to which packages are distributed by using the
@samp{--with-pkg-distdir=DIR} option to @command{configure}.  The default directory is the top build
directory.

@table @samp
@item release-archives
@mkindex release-archives
This target creates the distribution archive files if they have not already been created.  This not
only runs the @samp{dist} target, but also copies the files to the distribution directory, which, by
default is the top build directory.

The files generated are named:

@file{@value{PACKAGE}-@value{VERSION}.tar.gz}
and
@file{@value{PACKAGE}-@value{VERSION}.tar.bz2}

You can change this distribution directory with the @samp{--with-pkg-distdir} option to
@command{configure}.  See @samp{./configure --help} for more details on options.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item release-sign-archives
@mkindex release-sign-archives
This target is like @samp{release-archives}, except that it also signs the archives using a
@cite{GPG} detached signature.  You will be prompted for a password unless you pass the
@var{GNUPGPASS} variable to make.  For automated or unattended builds, pass the @var{GNUPGPASS}
variable like so:

@samp{make GNUPGPASS=mypasswd release-sign-archives}

Signature files will be named:

@file{@value{PACKAGE}-@value{VERSION}.tar.gz.asc}
and
@file{@value{PACKAGE}-@value{VERSION}.tar.bz2.asc}

These files will be moved to the package distribution directory with the plaintext archives.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item release-clean-archives
@mkindex release-clean-archives
This target will clean the release archives and signature files from the package distribution
directory.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.
@end table

@node RPM Build Targets
@subsubsection RPM Build Targets

On @command{rpm} systems, or systems sporting rpm packaging tools, the following targets are used to
generate @command{rpm} release packages.  The epoch and release number can be controlled by the
contents of the @file{.rpmepoch} and @file{.rpmrelease} files, or with the
@samp{--with-rpm-epoch=EPOCH} and @samp{--with-rpm-release=RELEASE} options to @command{configure}.
See @samp{configure --help} for more information on options.  We always use release number @samp{1}.
You can use release numbers above @samp{1}.

@table @samp
@item srpm
@mkindex srpm
This target generates the source rpm for the package (without signing the source rpm).  The source
rpm will be named: @file{@value{PACKAGE}-@value{VERSION}-1.srpm}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item rpms
@mkindex rpms
This target is responsible for generating all of the package binary rpms for the architecture.  The
binary rpms will be named:

@file{@value{PACKAGE}-*-@value{VERSION}-1.*.rpm}

where the stars indicate the subpackage and the architecture.  Both the architecture specific
subpackages (binary objects) and the architecture independent (@file{.noarch}) subpackages will be
built unless the the former was disabled with the option @samp{--disable-arch}, or the later with
the option @samp{--disable-indep}, passed to @command{configure}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item sign
@itemx srpm-sign
@mkindex sign
@mkindex srpm-sign
These two targets are the same.  When invoked, they will add a signature to the source rpm file,
provided that the file does not already have a signature.  You will be prompted for a password if a
signature is required.  Automated or unattended builds can be acheived by using the @command{emake}
expect script, included in
@file{$@{srcdir@}/scripts/emake}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item rebuild
@mkindex rebuild
This target accepts searches out a list of kernel names from the @file{$@{DESTDIR@}/lib/modules}
directory and builds rpms for those kernels and for each of a set of architectures given in the
@var{AM_RPMTARGETS} variable to make.  This is convenience target for building a group of rpms on a
given build machine.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item resign
@mkindex resign
This target will search out and sign, with a @cite{GPG} signature, the source rpm, and all of the
binary rpms for this package that can be found in the package distribution directory.  This target
will prompt for a @cite{GPG} password.  Automated or unattended builds can be acheived with the
@command{emake} expect script loccated here:
@file{$@{srcdir@}/scripts/emake}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.
@end table

@node Debian Build Targets
@subsubsection Debian Build Targets

On debian systems, or systems sporting debian packaging tools, the following targets are used to
generate debian release packages.  The release number can be controlled by the contents of the
@file{.debrelease} file, or with the @samp{--with-debrelease=RELEASENUMBER} option to
@command{configure}.  See @samp{configure --help} for more information on options.

@table @samp
@item dsc
@mkindex dsc
This target will build the debian source change package (@file{.dsc} file).  We use release number
@samp{0} so that the entire tarball is included in the @file{dsc} file.  You can use release number
@samp{1} for the same purposes.  Release numbers above @samp{1} will not include the entire tarball.
The @file{.dsc} file will be named: @file{@value{PACKAGE}_@value{VERSION}-0.dsc}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item sigs
@mkindex sigs
This target signs the @file{.deb} files.  You will be prompted for a password, unless to specify it
to make with the @var{GNUPGPASS} variable.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item debs
@mkindex debs
This target will build the debian binary package (@file{.deb} file) from the @file{.dsc} created
above.  (This target will also create the @file{.dsc} if it has not been created already.)  The
subpackage @file{.deb} files will be named: @file{@value{PACKAGE}-*_@value{VERSION}-0_*.deb}, where
the stars indicate the subpackage and the architecture.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item csig
@mkindex csig
This target signs the @file{.dsc} file.  You will be prompted for a password, unless to specify it
to make with the @var{GNUPGPASS} variable.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.
@end table
