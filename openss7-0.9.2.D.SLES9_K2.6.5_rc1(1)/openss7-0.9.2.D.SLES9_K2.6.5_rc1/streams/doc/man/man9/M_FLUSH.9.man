'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) M_FLUSH.9.man,v 0.9.2.13 2006/04/05 09:44:02 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:02 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" M_FLUSH.9.man,v
.\" Revision 0.9.2.13  2006/04/05 09:44:02  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH M_FLUSH 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B M_FLUSH
\- \fISTREAMS\fP flush message
.\"
.\"
.SH FORMAT
.PP
The
.B M_FLUSH
message block is a
.BR datab (9)
structure and associated data buffer that contains structured data.
.PP
An
.B M_FLUSH
message is a high priority message that consists of one
.B M_FLUSH
message block.
.PP
The first
.B unsigned char
in the message
.RI ( mp->b_rptr\c
.RB [ 0 ])
contains flags that determine which queues are to be flushed and what data is to be
flushed.  It is an logical OR of the following flags:
.TP \w'FLUSHBAND\(em'u
.B FLUSHR
flush the read side queue.
.TP
.B FLUSHW
flush the write side queue.
.TP
.B FLUSHRW
simply a logical OR of
.B FLUSHR
and
.B FLUSHW
indicating to flush both the read and write side queues.
.TP
.B FLUSHBAND
indicating that a band is to be flushed rather than normal (band 0) messages.
.PP
The second
.B unsigned char
.RI ( mp->b_rptr\c
.RB [ 1 ])
in the message
is only significant if
.B FLUSHBAND
was indicated in the first
.B unsigned char
in the message
.RI ( mp->b_rptr\c
.RB [ 0 ])
and then contains the band number to flush.
If
.B FLUSHBAND
is not set,
the message might only contain one
.BR "unsigned char" .
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.\" ==========================================================================
.PP
Requests all drivers and modules that receive it to flush their message queues (discard all messages
in those queues) as indicated in the message.  An
.B M_FLUSH
can originate at the
Stream head,
or in any driver or module.  The first byte of the message contains flags that specify one of the
following actions:
.PP
.nr tl \n[.l]u-12m
.TS
tab(:);
lblw(\n[tl]u).
FLUSHR:T{
Flush the read queue of the module.
T}
FLUSHW:T{
Flush the write queue of the module.
T}
FLUSHRW:T{
Flush both the read queue and the write queue of the module.
T}
FLUSHBAND:T{
Flush the message according to the priority associated with the band.
T}
.TE
.PP
Each module passes this message to its neighbour after flushing its appropriate queue(s), until the
message reaches one of the ends of the
Stream.
.PP
Drivers are expected to include the following processing for
.B M_FLUSH
messages:
.PP
When an
.B M_FLUSH
message is sent downstream through the write queues in a
Stream,
the driver at the
Stream end
discards it if the message action indicates that the read queues in the
Stream
are not to be flushed (only
.B FLUSHW
set).  If the message indicates that the read queues are to be flushed, the driver shuts off the
.B FLUSHW
flag, and sends the message up the
Stream's
read queues.  When a flush message is sen up a
Stream's
read-side, the
Stream head
checks to see if the write-side of the
Stream
is to be flushed.  If only
.B FLUSHR
is set, the
Stream head
discards the message.  However, if the write-side of the
Stream
is to be flushed, the
Stream head
sets the
.B M_FLUSH
flag to
.B FLUSHW
and sends the message down the
Stream's
write side.
The
Stream head
also sets the
.B MSGNOLOOP
flag in the
.I b_flag
member of the
.B M_FLUSH
message to detect loops.
.PP
All modules that enqueue messages must identify and process this message type.
.PP
If
.B FLUSHBAND
is set, the second byte of the message contains the value of the priority band to flush.
.\" ==========================================================================
.PP
.B M_FLUSH
messages are high priority messages sent by the
Stream head
in response to an
.BR I_FLUSH (7)
command to
.BR ioctl (2s)
(as described in
.BR streamio (7)),
or that are generated by a driver or module, with the purpose of flushing the
Stream
of queued read or write side normal or banded messages.
.\"
.\"
.SH MP-STREAMS
.PP
Because it is not normally necessary to access the queue's private structure to complete a
.B M_FLUSH
action, and because
.BR flushq (9)
and
.BR flushband (9)
are MP-safe, canonical
.B M_FLUSH
processing is MP-safe from the queue's
.IR qi_putp (9)
procedure.
.PP
In the non-MP environment, where
.I STREAMS
is single-thread, it was sufficient to flush both the read and write side queues as the
.B M_FLUSH
message was passed downstream and terminating at the driver.  In the MP environment, this is not
acceptable: messages on the read side could be queued concurrent with processing of the
.B M_FLUSH
message on the write side.  Therefore, in the MP environment, it is necessary that only write side
messages are flushed as the
.B M_FLUSH
message is passed downstream, and only read side messages are flushed as the
.B M_FLUSH
message is passed upstream.  It is the responsibility of both the Stream head and the driver to loop
back
.B M_FLUSH
messages for this to occur.
.\"
.B M_FLUSH
messages can be generated by a user level process using the
.BR I_FLUSHBAND (7)
.BR ioctl (2s).
.B M_FLUSH
messages arriving at the
Stream head
with the
.B MSGNOLOOP
flag set are consumed.
.B M_FLUSH
messages can be generated by drivers and modules.
.B M_FLUSH
messages arriving at a non-multiplexing driver with the
.B FLUSHR
flag set must be reflected back upstream.
.\"
.\"
.SH USAGE
.PP
.B M_FLUSH
messages need only be acted upon (queue flushing performed) by drivers or modules that queue
messages on the read or write side queues.
Regardless of whether a module queues messages, the module must still recognize and pass
.B M_FLUSH
messages upstream or downstream, and the driver must still recognize and pass
.B M_FLUSH
messages back upstream.
.PP
.B M_FLUSH
messages must be addressed directly from a driver or module's
.IR qi_putp (9)
procedure and must not be deferred to the
.IR qi_srvp (9)
procedure with
.BR putq (9).
The reason that
.B M_FLUSH
must not be deferred is because
.B M_FLUSH
is a high-priority message, and once queued, will have the effect of flushing all normal messages
that arrive after the
.B M_FLUSH
is queued, but before the
.IR qi_srvp (9)
procedure is run.
.PP
For
.B M_FLUSH
messages that originate at the Stream head and are passed downstream, each module, and finally the driver,
must only flush the read side queue if requested with the
.BR FLUSHR
flag in the message.  Each module must also pass the message downstream until it arrives at the
driver.
The driver is responsible for looping
.BR M_FLUSH
messages back upstream.  As the message is passed upstream, the driver and each module must only
flush the write side queue if requested with the
.BR FLUSHW
flag in the message.  Each module must also pass the message upstream until it arrives at the Stream
head.
.PP
For
.B M_FLUSH
messages that originate at the driver and are passed upstream, the same actions are performed,
however, when the message arrives at the Stream head, the Stream head loops the message back
downstream.
The Stream head sets the
.B MSGNOLOOP
flag in the
.B mp->b_flag
member of the message block for
.B M_FLUSH
messages when they are looped back at the Stream head.  If a message marked with
.B MSGNOLOOP
returns to the Stream head it is discarded.
.PP
For a
.IR STREAMS -based
.BR pipe (4),
the actions are somewhat different depending on whether the
.BR pipemod (4)
module is pushed on a bare pipe or not.  Also, it is necessary to push
.BR pipemod (4)
onto one side of a pipe before pushing other modules on either pipe end to ensure that the sense of
the
.BR FLUSHW
and
.BR FLUSHR
flags are reversed across the twist at the midpoint of the
.BR pipe (4).
.\"
.\"
.SH EXAMPLES
.PP
The following is an example of canonical
.B M_FLUSH
handling from a module write side
.IR qi_putp (9)
procedure:
.PP
.nf
\fC\s-1\
 1  int
 2  xxx_wput(queue_t *q, mblk_t *mp)
 3  {
 4      switch (mp->b_datap->db_type) {
 5      case M_FLUSH:
 6          if (mp->b_rptr[0] & FLUSHW) {
 7              if (mp->b_rptr[0] & FLUSHBAND)
 8                  flushband(q, mp->b_rptr[1], FLUSHALL);
 9              else
10                  flushq(q, FLUSHALL);
11          }
12      default:
13          putnext(q, mp);
14          break;
15      }
16      return (0);
17  }
\s+1\fP
.fi
.PP
Note that on the write side, only the
.B FLUSHW
flag is examined and acted upon.  Also, the module always passes the message downstream with
.BR putnext (9).
Actual flushing of the queue is only necessary if the module ever places messages on its write side
queue with
.BR putq (9).
Otherwise, the module could simply pass the message along.
.PP
The following is an example of canonical
.B M_FLUSH
handling from a module read side
.IR qi_putp (9)
procedure:
.PP
.nf
\fC\s-1\
 1  int
 2  xxx_rput(queue_t *q, mblk_t *mp)
 3  {
 4      switch (mp->b_datap->db_type) {
 5      case M_FLUSH:
 6          if (mp->b_rptr[0] & FLUSHR) {
 7              if (mp->b_rptr[0] & FLUSHBAND)
 8                  flushband(q, mp->b_rptr[1], FLUSHALL);
 9              else
10                  flushq(q, FLUSHALL);
11          }
12      default:
13          putnext(q, mp);
14          break;
15      }
16      return (0);
17  }
\s+1\fP
.fi
.PP
Note that on the read side, only the
.B FLUSHR
flag is examined and acted upon.  Also, the module always passes the message upstream with
.BR putnext (9).
Actual flushing of the queue is only necessary if the module ever places messages on its read side
queue with
.BR putq (9).
Otherwise, the module could simply pass the message along.
.PP
Note that canonical module
.B M_FLUSH
processing that flushes both the write and read side queues from the write
.IR qi_putp (9)
procedure are only
applicable to the non-MP environment and are not usable in the MP environment.
.PP
The following is an example of canonical
.B M_FLUSH
handling from a driver write side
.IR qi_putp (9)
procedure:
.PP
.nf
\fC\s-1\
 1  int
 2  xxx_wput(queue_t *q, mblk_t *mp)
 3  {
 4      switch (mp->b_datap->db_type) {
 5      case M_FLUSH:
 6          if (mp->b_rptr[0] & FLUSHW) {
 7              if (mp->b_rptr[0] & FLUSHBAND)
 8                  flushband(q, mp->b_rptr[1], FLUSHALL);
 9              else
10                  flushq(q, FLUSHALL);
11              mp->b_rptr[0] &= ~FLUSHW;
12          }
13          if (mp->b_rptr[0] & FLUSHR) {
14              if (mp->b_rptr[0] & FLUSHBAND)
15                  flushband(RD(q), mp->b_rptr[1],
16                            FLUSHALL);
17              else
18                  flushq(RD(q), FLUSHALL);
19              qreply(q, mp);
20              break;
21          }
22      default:
23          freemsg(mp);
24          break;
25      }
26      return (0);
27  }
\s+1\fP
.fi
.PP
Note that the driver only requires write side
.IR qi_putp (9)
processing: flushing of the read side queue is
performed from the write procedure.
Also, if the
.B FLUSHR
flag is not set, the driver still has the option of passing the message back upstream.  Also, if the
driver forgets to clear the
.B FLUSHW
flag, the Stream head will not loop the message back downstream (more than once) because the
.B MSGNOLOOP
flag is set in
.BR mp->b_flag ;
however, it is bad practise to forget to reset the
.B FLUSHR
flag in the driver.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR datab (9),
.BR msgb (9).
.\"
.\"
.SH COMPATIBILITY
.PP
The
.B M_FLUSH
.I STREAMS
message is compatible with
.IR "SVR 4.2 MP STREAMS" ,
and implementations based on
.IR "SVR 4" ,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
Canonical
.B M_FLUSH
processing suitable for the
.BR MP
environment must be used in
.BR "@PACKAGE_TITLE@" .
.[
lfs
.]
Older
.RB non- MP
techniques may fail to flush some messages from the read side.
.IP \(em
.B M_FLUSH
is has the wrong message type value on older versions of
.IR LiS .
.[
lis
.]
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B @PACKAGE_TITLE@
.[
lfs
.]
instead of
.IR LiS .
.[
lis
.]
.IP \(em
Binary compatibiltiy is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP STREAMS" .
.[
svr42spg
.]
.\"
.\"
.SH HISTORY
.PP
The
.B M_FLUSH
message first appeared in
.IR "SVR 3" .
.[
svr3spg
.]
.\"
.\"
.[
$LIST$
.]
.TI
