'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) M_IOCTL.9.man,v 0.9.2.13 2006/04/05 09:44:03 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:03 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" M_IOCTL.9.man,v
.\" Revision 0.9.2.13  2006/04/05 09:44:03  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH M_IOCTL 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B M_IOCTL
\- \fISTREAMS\fP IO control message
.\"
.\"
.SH FORMAT
.PP
The
.B M_IOCTL
message is a normal priority message that consists of one
.B M_IOCTL
message block followed by one or more
.BR M_DATA (9)
message blocks.
The
.B M_IOCTL
message block is 3-typle of a
.BR msgb (9)
structure,
.BR datab (9)
structure and associated data buffer that contains an
.BR iocblk (9)
structure.
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
The
.B M_IOCTL
message is generated by the
Stream head
in response to
.BR I_STR (7),
.BR I_LINK (7),
.BR I_UNLINK (7),
.BR I_PLINK (7),
and
.BR I_PUNLINK (7)
.RB [ ioctl (2s)
.I STREAMS
system calls, see
.BR streamio (7)],
and in response to
.BR ioctl (2s)
calls that contain a command argument value not defined in
.BR streamio (7)
or
.BR termios (7).
When one of these
.BR ioctl (2s)
commands is received from a user process, the
Stream head
uses values supplied in the call and values from the process to create an
.B M_IOCTL
message containing them, and sends the message downstream.
.PP
.B M_IOCTL
messages are intended to perform the general
.BR ioctl (2s)
functions of character device drivers, and the specific functions of
.I STREAMS
devices and terminals.
.\"
.\"
.SS STREAMS (I_STR) Input-Output Controls
.PP
.I STREAMS
I/O controls result from three sources.
.PP
The user can generate a
.BR I_STR -based
I/O control using the
.BR I_STR (7)
.BR ioctl (2s)
command.
Whan a user issues an
.BR I_STR (7)
.BR ioctl (2s),
the user values are supplied in a structure of the following form, provided as an argument to the
.BR ioctl (2s)
call [see
.BR I_STR (7)
in
.BR streamio (7)]:
.PP
.nf
\fC\s-1\
struct strioctl {
    int ic_cmd;         /* downstream request */
    int ic_timout;      /* ACK/NAK timeout */
    int ic_len;         /* length of data arg */
    caddr_t ic_dp;      /* ptr to data arg */
};
\s+1\fP
.fi
.PP
In this case,
.TP \w'ic_timout\(em'u
.I ic_cmd
is the request (or command) defined by a downstream driver or module,
.TP
.I ic_timout
is the time the
Stream head
will wait for acknowledgement to the
.B M_IOCTL
message before timing out, and
.TP
.I ic_dp
is a pointer to an optional data buffer.  On input,
.TP
.I ic_len
contains the length of the data in the buffer passed in and,
on return from the call,
it contains the length of the data, if any, being returned to the user in the same buffer.
.PP
The
Stream head
can generate an
.BR I_STR -based
I/O control when a recognized terminal I/O control, from
.BR termios (7),
is used by the user with the
.BR ioctl (2s)
system call.
In this case,
.TP \w'ic_timout\(em'u
.I ic_cmd
is set to the
.BR termios (7)
command value;
.TP
.I ic_timout
is set to the default value
.RB ( "15 seconds" );
.TP
.I ic_dp
is the pointer passed in the
.I arg
argument to the call when the argument is a pointer, or points to a buffer
that contains the
.I arg
argument, when the argument to the call was an integer value; and,
.TP
.I ic_len
is set to the length of the argument or argument value.
.PP
The
Stream head
can generate an
.BR I_STR -based
I/O control in response to an
.BR I_LINK (7),
.BR I_UNLINK (7),
.BR I_PLINK (7),
or
.BR I_PUNLINK (7)
.BR ioctl (2s)
command issued by the user, or when an
.BR I_UNLINK (7)
is generated internally a a result of dismantling a
multiplexing driver
.IR "Control Stream" .
In this case,
.TP \w'ic_timout\(em'u
.I ic_cmd
is set to one of
.BR I_LINK (7),
.BR I_UNLINK (7),
.BR I_PLINK (7),
or
.BR I_PUNLINK (7);
.TP
.I ic_timout
is set to the default value
.RB ( "15 seconds" ),
or in the case of an automatic unlinking resulting from dismantling of a
multiplexing driver
.IR "Control Stream" ,
the special value,
.RB \(lq INFTIM ,\(rq
indicating an infinite timeout;
.TP
.I ic_dp
is set to point to a
.BR linkblk (9)
structure containing the particulars of the command; and
.TP
.I ic_len
is set to the length of the
.BR linkblk (9)
structure.
.PP
The
.B M_IOCTL
message format is one
.B M_IOCTL
message block followed by zero or more
.BR M_DATA (9)
message blocks.
.I STREAMS
constructs an
.B M_IOCTL
message block by placing an
.BR iocblk (9)
structure, defined in
.BR sys/stream.h ,
in its data buffer:
.PP
.nf
\fC\s-1\
struct iocblk {
    int ioc_cmd;        /* ioctl command type */
    cred_t *ioc_cr;     /* full credentials */
    uint ioc_id;        /* ioctl identifier */
    ulong ioc_count;    /* byte count for ioctl data */
    int ioc_error;      /* error code for M_IOCACK/NAK */
    int ioc_rval;       /* return value for M_IOCACK */
    long ioc_filler[1]; /* reserved for future use */
    long ioc_flag;      /* data model, IOC_NATIVE or IOC_ILP32 */
    long _pad[2];       /* reserved for future use */
};
\s+1\fP
.fi
.PP
In the case of an
.BR I_STR -based
.BR ioctl (2s),
that was generated from one of the three sources, above,
.TP \w'ioc_count\(em'u
.I ioc_cmd
corresponds to
.I ic_cmd
of the
.BR strioctl (5)
structure;
.TP
.I ioc_cr
points to the credentials structure defining the user process' permissions (see
.BR cred.h ),
the contents of which can be tested to determine if the user issuing the
.BR ioctl (2s)
call is authorized to do so;
.TP
.I ioc_count
is the number of data bytes, if any, contained in the
.BR M_DATA (9)
blocks of the message and corresponds to
.I ic_len
member of the
.BR strioctl (5)
structure; and,
.TP
.I ioc_id
is an identifier generated internally by the
Stream head,
to match each
.B M_IOCTL
message sent downstream with response messages sent upstream.
.TP
.I ioc_flag
is a flag populated by the Stream head that contains
.B IOC_ILP32
if the IO control command was issued by a 32-bit data model caller to a 64-bit driver, or
.B IOC_NONE
if the IO control command was issued on the same model as the driver.
.PP
If data is provided to be sent downstream (i.e., the
value of
.I ic_len
and, thus,
.IR ioc_count ,
is greater than zero), the
Stream head
allocates
.BR M_DATA (9)
blocks sufficient to hold the
.I ic_len
bytes of data, copies the user
data from
.I ic_dp
into these
.BR M_DATA (9)
blocks, and links them to the
.B M_IOCTL
block to form the completed
.B M_IOCTL
message.
If there is no user data (i.e.,
.I ic_len
is less than or equal to zero), the
.I ioc_count
member is set to zero and no
.BR M_DATA (9)
block is present in the message.
.PP
The completed
.B M_IOCTL
message is then passed downstream and the calling process blocks awaiting an acknowledgement.
.\"
.\"
.SS TRANSPARENT Input-Output Controls
.PP
To support transparent access to
.I STREAMS
implementations of traditional character devices, including terminals,
.I STREAMS
provides the capability of accepting Input/Output Controls in the direct form normally used for
character devices.
.PP
Whenever the
Stream head
does not recognize the command argument of an
.BR ioctl (2s),
(that is, the command is not one of the
.BR streamio (7)
or
.BR termios (7)
commands), it creates a
.I transparent
.B M_IOCTL
message.
The format of a
.I transparent
.B M_IOCTL
message is the same as that for a
.BR I_STR -based
.B M_IOCTL
message:
one
.B M_IOCTL
message block followed by one or more
.BR M_DATA (9)
blocks.
The
.B M_IOCTL
block of the message also contains the
.BR iocblk (9)
structure, the format of which is the same as above.
.PP
The members of the
.BR iocblk (9)
structure contained in the
.B M_IOCTL
block are populated as follows:
.TP \w'ic_count\(em'u
.I ioc_cmd
is populated with the
.I command
argument from the
.BR ioctl (2s)
call;
.TP
.I ioc_cr
is populated as for
.BR I_STR -based
messages;
.TP
.I ioc_count
is set to the special value,
.RB \(lq TRANSPARENT ,\(rq
to indicate that this is a
.I transparent
.BR ioctl (2s)
message; and,
.TP
.I ioc_id
is populated as for
.BR I_STR -based
messages.
.TP
.I ioc_flag
is populated as for
.BR I_STR -based
messages.
.PP
A single
.BR M_DATA (9)
message block is allocated with sufficient room to hold the value of the
.I arg
argument to the
.BR ioctl (2s)
call, the argument is placed directly in the buffer, and the block is linked to the
.B M_IOCTL
block to form the completed
.B M_IOCTL
message.
.PP
Care should be taken when the
.I ioc_flag
member is set to
.B IOC_ILP32
by the Stream head because any address contained in the 64-bit argument in the attached
message block will be a 32-bit address least-significant-bit aligned.  The module or driver must
convert any such pointer to a native data model pointer before using it.
.PP
The completed
.B M_IOCTL
message is then passed downstream and the calling process blocks awaiting an acknowledgement.
.\"
.\"
.SS 32-bit Compatibility Input-Output Controls
.PP
To support 31/32-bit C language model input-output controls executed by a 32-bit process on a 64-bit
kernel,
.B @PACKAGE_TITLE@
provides capabilities similar to the
.IR Solaris \(rg
.[
soldoc
.]
operating system
.I STREAMS
implementation.
Under
.IR Solaris \(rg,
when a 32-bit process opens a file on a 64-bit kernel, the
.B FILP32
file flag is set, indicating to the Stream head that the file was opened by a 32-bit process.
.RB ( @PACKAGE_TITLE@
also sets the
.B FILP32
file flag, however, only after the first
.BR read (2s),
.BR readv (2s),
.BR write (2s),
.BR writev (2s),
.BR getmsg (2s),
.BR getpmsg (2s),
.BR putmsg (2s),
.BR putpmsg (2s),
or
.BR ioctl (2s)
operation has been performed.)
.PP
Whenever an
.BR ioctl (2s)
operation is performed on a Stream, the Stream head places the
.B IOC_ILP32
flag in the
.I ioc_flag
member of the
.BR iocblk (9)
structure in the
.B M_IOCTL
message passed downstream to indicate to the other modules and drivers in the Stream that the
.BR ioctl (2s)
operation originated from a 32-bit process.  Any data structures or pointers passed in the
.B b_cont
message block are 32-bit model structures and pointers.
.PP
For
.B TRANSPARENT
input-output controls, care should be taken that the
.B unsigned long
argument passed in the
.B b_cont
message block, (when
.I arg
is a pointer), contains a 32-bit pointer least significant bit aligned with the 64-bit
.B unsigned long
argument value.  Such a pointer needs to be converted to a 64-bit model before use as the
.I cq_addr
field of a subsequent
.BR M_COPYIN (9)
or
.BR M_COPYOUT (9)
message, or, before the pointer is used internaly by the module or driver.
.PP
In addition, on Linux kernels prior to kernel 2.6.11, it may be necessary to register the 32-bit
input-output control command with for the Stream head using the
.BR register_ioctl32 (9)
utility when the module or driver loads, and de-register the command using the
.BR unregister_ioctl32 (9)
utility when the module or driver unloads.  See
.BR register_ioctl32 (9)
for more information.
.\"
.\"
.SS Processing and Acknowledgement
.PP
The response message which completes the
Stream head
processing for the
.BR ioctl (2s)
is an
.BR M_IOCACK (9)
(positive acknowledgement) or an
.BR M_IOCNAK (9)
(negative acknowledgement) message.
.PP
The
Stream head
blocks the user process until an
.BR M_IOCACK (9)
or
.BR M_IOCNAK (9)
response to the
.B M_IOCTL
(same
.IR ioc_id )
is received, or until an
.BR M_IOCDATA (9)
message indicating a
.BR M_COPYIN (9)
or
.BR M_COPYOUT (9)
error is sent downstream, aborting the operation.
The wait will also be interrupted if the operation times out, the calling process receives a signal,
or an
.BR M_HANGUP (9)
or
.BR M_ERROR (9)
message is received by the
Stream head.
(In the special case of automatic dismantling of a
multiplexing driver
.IR "Control Stream" ,
where an
.BR I_UNLINK (7)
.B M_IOCTL
message is issued downstream, the wait will not be interrupted by timeouts, signals, hangup
messages, nor error messages, but the calling process will block indefinitely awaiting a response
from the driver.)
.PP
When a module receives an
.B M_IOCTL
message at its write-side
.IR qi_putp (9)
procedure that contains an
.I ic_cmd
command value that it recognizes and responds to, it may process and acknowledge the message.
When a module receives an
.B M_IOCTL
message that contains an
.I ic_cmd
command value that it does not recognize or does not respond to, it must pass the message downstream
to permit other drivers and modules the opportunity to process the message.
.PP
When a driver receives an
.B M_IOCTL
message that it recognizes, it must process and acknowledge the message.
When a driver receives an
.B M_IOCTL
message that it does not recognize, it must negatively acknowledge the message by replying with an
.BR M_IOCNAK (9)
message.
.PP
.BR M_IOCACK (9)
and
.BR M_IOCNAK (9)
message types have the same format as an
.BR M_IOCTL
message and contain the
.BR iocblk (9)
structure in the first block.  An
.BR M_IOCACK (9)
block may be linked to following
.BR M_DATA (9)
blocks.  If one of these messages reaches the
Stream head
with an identifier
.RI ( ioc_id )
that does not match that of the currently outstanding
.B M_IOCTL
message, the response message is discarded.  A common means of assuring that the correct identifier
is returned is for the replying module to convert the
.B M_IOCTL
message into the appropriate response type and set
.I ioc_count
to zero
.RB ( 0 ),
if no data are returned.  Then the
.BR qreply (9)
utility is used to send the response to the
Stream head.
See
.RI \(lq EXAMPLES \(rq,
below.
.PP
In an
.BR M_IOCACK (9)
and
.BR M_IOCNAK (9)
message,
.I ioc_error
holds any return error condition set by a downstream module.  If this value is non-zero, it is
returned to the user in
.IR errno (3).
Note that both
.BR M_IOCNAK (9)
and
.BR M_IOCACK (9)
may return an error,
(see
.RI \(lq NOTICES \(rq,
below), however, only an
.BR M_IOCACK (9)
can have a return value.  For an
.BR M_IOCACK (9),
.I ioc_rval
holds any return value set by a responding module.  For an
.BR M_IOCNAK (9),
.I ioc_rval
is ignored by the
Stream head.
.PP
By comparing the
.I ioc_count
member in a received
.B M_IOCTL
message against the special value,
.RB \(lq TRANSPARENT \(rq,
the receiving driver or module can determine whether the
.B M_IOCTL
message corresponds to an
.BR I_STR -based
or
.I transparent
I/O control.
The driver or module responds differently to an
.B M_IOCTL
depending on whether it is
.BR I_STR -based
or
.IR transparent .
The differences are described in the sections below.
.\"
.\"
.SS I_STR-based Responses
.PP
For an
.BR I_STR (7)
.BR ioctl (2s),
the timeout interval if no response is received is specified by
.I ic_timout
in the
.BR strioctl (5)
structure to the call,
and is either a specific value or the default
.RB ( "15 seconds" )
when
.I ic_timout
is set to zero.
.I ic_timout
can also be set to the special value,
.RB \(lq INFTIM \(rq
to specify an indefinite timeout.
For other
.BR I_STR -based
.BR ioctl (2s),
such as those in response to
.BR termios (7)
commands, the default timeout interval
.RB ( "15 seconds" )
is used, except for the case of automatic unlinking when dismantling a
multiplexing driver
.IR "Control Stream" ,
in which case the timeout is indefinite.
.PP
The response of a driver or module to an
.BR I_STR -based
.B M_IOCTL
message that it recognizes is typically an
.BR M_IOCACK (9)
message.
.BR M_IOCNAK (9)
negative acknowledgements are typically reserved for cases where the operation fails, or the command
is not recognized by a driver.
.PP
For an
.BR I_STR -based
.B M_IOCTL
message, the driver or module can locate any passed in data in the attached
.BR M_DATA (9)
blocks and the amount of data contained in those blocks is given also by the
.I ioc_count
member.
Also, for an
.BR I_STR -based
.B_M_IOCTL
message,
the driver or module can return data with an
.BR M_IOCACK (9)
message by attaching
.BR M_DATA (9)
blocks to the response and setting the
.I ioc_count
member to the amount of data to output.
Data returned in this fashion will be copied by the
Stream head
to the location first indicated by
.I ic_dp
in the
.BR strioctl (5)
structure that was passed to the call.
.PP
No data is permitted to be returned in response to an
.B M_IOCTL
message issued for an
.BR I_LINK (7),
.BR I_UNLINK (7),
.BR I_PLINK (7),
or
.BR I_PUNLINK (7)
operation,
.I ioc_count
and any attached
.BR M_DATA (9)
blocks will be ignored and freed.
.\"
.\"
.SS TRANSPARENT Responses
.PP
For a
.I transparent
operation,
the default timeout interval
.RB ( "15 seconds" )
is used.
.PP
The response of a driver or module to a
.I transparent
.B M_IOCTL
message that it recognizes is typically an
.BR M_COPYIN (9)
message,
.BR M_COPYOUT (9)
message, or both,
depending on the specific command, but
ultimately followed by an
.BR M_IOCACK (9)
acknowledgement.
.BR M_IOCNAK (9)
negative acknowledgements are reserved for cases where the operation fails, or the command
is not recognized by a driver.
.PP
For a
.I transparent
.B_M_IOCTL
message,
the driver or module knows that the value of the
.I arg
argument to the original
.BR ioctl (2s)
call is contained in the attached
.BR M_DATA (9)
block.  It can use this address to copy in data from the user using the
.BR M_COPYIN (9)
message, and copy out data to the user using the
.BR M_COPYOUT (9)
message.
.PP
When the driver or module acknowledges a
.I transparent
.B_M_IOCTL
message
with an
.BR M_IOCACK (9)
message, it cannot pass data back to the user with the message.  Any value in the
.I ioc_count
field and any attached
.BR M_DATA (9)
blocks are ignored and freed.  For a
.I transparent
.B_M_IOCTL
message,
the driver or module must transfer all data to and from the user by issuing
.BR M_COPYIN (9)
and
.BR M_COPYOUT (9)
messages.
.\"
.\"
.SS Negative Acknowledgements
.PP
In an
.BR M_IOCNAK (9)
message,
.I ioc_error
holds any return error condition set by a downstream module.  If this value is non-zero, it is
returned to the user in
.IR errno (3).
.PP
If the value is zero,
the error number
.RB [ EINVAL ]
will be returned to the user in
.IR errno (3).
However, if the value is zero and the
.BR M_IOCNAK (9)
message is in response to one of the link or unlink I/O controls
.RB ( I_LINK (7),
.BR I_UNLINK (7),
.BR I_PLINK (7),
.BR I_PUNLINK (7)),
then the error number returned by default will be
.RB [ ENXIO ].
These defaults permit the responding module to simply change the message type from
.B M_IOCTL
to
.BR M_IOCNAK (9)
and return the message in most cases, and in any case where the responding module does not recognize
the
.I ic_cmd
contained in the
.B M_IOCTL
message.
.PP
No data can be sent with an
.BR M_IOCNAK (9)
message for any type of
.BR M_IOCTL .
The
Stream head
will ignore and free any
.BR M_DATA (9)
blocks attached to an
.BR M_IOCNAK (9)
message.
.PP
If the
Stream head
receives a
.B M_IOCTL
message, it converts the
.B M_IOCTL
to an
.BR M_IOCNAK (9)
message and replies downstream with the resulting negative acknowledgement.
The
Stream head
behaves in this way to accommodate the
.IR STREAMS -based
.BR pipe (4)
and
.BR fifo (4).
.\"
.B M_IOCTL
messages can be generate directly by a user level process using the
.BR ioctl (2s)
system call.
.B M_IOCTL
messages arriving at the
Stream head
will result in the
Stream head
sending a negative acknowledgement
.BR M_IOCNAK (9)
message back downstream.
.B M_IOCTL
message are consumed by the driver or module that is responding
to the message.
.B M_IOCTL
messages arriving at a driver not intending to process them may be discarded (ignored and freed).
.\"
.\"
.SH USAGE
.PP
The following guidelines represent best practise for handling of
.BR M_IOCTL
messages in drivers and modules:
.IP \(bu \w'\(bu\(em'u
A Module receiving an
.B M_IOCTL
message containing an unrecognized
.I ic_cmd
value, passes the message downstream using a utility such as
.BR putnext (9),
to give downstream modules and the driver an opportunity to respond to
the message.
.IP \(bu
As
.B M_IOCTL
messages are of normal priority, yet are often processed directly from a driver or module's
.IR qi_putp (9)
procedure, a module passing an unrecognized message downstream should, if possible, pass
the message from the module's
.IR qi_putp (9)
procedure. (But see also below).
.IP \(bu
Because processing of some
.B M_IOCTL
message must be synchronized with data in the
Stream,
a module passing an unrecognized message downstream will do so with consideration for flow control
and message sequencing.
.IP \(bu
A Driver receiving an
.B M_IOCTL
message containing an unrecognized
.I ic_cmd
value, transforms the
.B M_IOCTL
message into an
.BR M_IOCNAK (9)
message by setting the message type in the first data block and then passes the message upstream
using a utility such as
.BR qreply (9).
This practise permits the
Stream head
to return the appropriate default error number to the user process.
.IP \(bu
A responding Module or Driver that wishes to process the
.B M_IOCTL
message must alway examine the
.I ioc_count
to determine whether the
.B M_IOCTL
is
.I transparent
or
.IR STREAMS -based.
The responding Module or Driver will reject modes of the
.BR M_IOCTL
message that it does not support with a default
.BR M_IOCNAK (9)
response.
.IP \(bu
If a Module receives a
.BR M_IOCTL (9)
message on an upstream queue (that is, in the abnormal direction), it will pass the message along
toward the
Stream head
using a utility such as
.BR putnext (9).
When the message reaches the
Stream head
a negative acknowledgement,
.BR M_IOCNAK (9)
will be passed back downstream in reply.
This practise permits modules and
.BR M_IOCTL
messaging to function correctly on a
.IR STREAMS -based
.BR pipe (4)
or
.BR fifo (4).
.IP \(bu
Modules and Drivers will not mix the
.I transparent
.RB ( M_COPYIN (9),
.BR M_COPYOUT (9))
method of copying data to and from the user
with the
.BR I_STR -based
.RB ( M_IOCTL ,
.BR M_IOCACK (9))
method of copying data to and from the user.
.IP \(bu
Topmost modules beneath the
Stream head
will not rely on the fact that the module's write-side
.IR qi_putp (9)
procedure is sometimes invoked within user context, and will not use the
.BR copyin (9)
nor
.BR copyout (9)
driver utilities directly.
.\"
.\"
.SH NOTICES
.PP
.B @PACKAGE_TITLE@
.[
lfs
.]
implementation cannot permit
.BR M_IOCACK (9)
to return an error number and a return value simultaneously.  This is because
.B Linux
system calls encode the error number into the return value.
.PP
.B @PACKAGE_TITLE@
.[
lfs
.]
uses a default of
.BR "15 seconds" ,
in accordance with common practise.
.\"
.\"
.SH EXAMPLES
.PP
The following code fragement exemplifies canonical
.B M_IOCTL
processing within the write-side
.IR qi_putp (9)
procedure of a pushable module (that also has a
.IR qi_srvp (9)
procedure):
.PP
.nf
\fC\s-1\
     1  int
     2  module_wput(queue_t *q, mblk_t *mp)
     3  {
     4      if (q->q_first || q->q_flag & QSVCBUSY
     5          || (mp->b_datap->db_type < QPCTL
     6              && !bcanputnext(q, mp->b_band))) {
     7          putq(q, mp);
     8          return (0);
     9      }
    10      switch (mp->b_datap->db_type) {
    11      case M_IOCTL:
    12      {
    13          struct iocblk *ioc =
    14              (typeof(ioc)) mp->b_rptr;
    15          switch (ioc->ioc_cmd) {
    16          case KNOWN_IOC:
    17              return do_known_ioc(q, mp);
    18              /* ... */
    19          default:
    20              /* unrecognized */
    21              putnext(q, mp);
    22              return (0);
    23          }
    24      }
    25      /* ... */
    26      default:
    27          /* unrecognized message type */
    28          putnext(q, mp);
    29          return (0);
    30      }
    31  }
\s+1\fP
.fi
.PP
The module example follows the practises for modules listed under
.RI \(lq USAGE ,\(rq
above.
.PP
The following code fragment exemplifies canonical
.B M_IOCTL
processing within the write-side
.IR qi_putp (9)
procedure of a driver (that has no
.IR qi_srvp (9)
procedure):
.PP
.nf
\fC\s-1\
     1  int
     2  driver_wput(queue_t *q, mblk_t *mp)
     3  {
     4      switch (mp->b_datap->db_type) {
     5      case M_IOCTL:
     6      {
     7          int err = 0;
     8          int count = 0;
     9          struct iocblk *ioc =
    10              (typeof(ioc)) mp->b_rptr;
    11          switch (ioc->ioc_cmd) {
    12          case KNOWN_IOC:
    13          {
    14              mblk_t *dp;
    15  
    16              if (ioc->ioc_count == TRANSPARENT) {
    17                  /* we don't handle transparent
    18                     ioctl */
    19                  err = EINVAL;
    20                  goto nak_it;
    21              }
    22              /* process I_STR based ioctl */
    23              /* ... */
    24              dp = mp->b_cont;
    25              dp->b_rptr = dp->b_datap->db_base;
    26              count = sizeof(int);
    27              dp->b_wptr = dp->b_rptr + count;
    28              *((int *) dp->b_rptr) = 32;
    29              /* ... */
    30              goto ack_it;
    31          }
    32          case I_PLINK:
    33              if (ioc->ioc_cr.uid != 0) {
    34                  err = EPERM;
    35                  goto nak_it;
    36              }
    37              /* fall through */
    38          case I_LINK:
    39              /* link stream */
    40              /* ... */
    41              goto ack_it;
    42          case I_PUNLINK:
    43              if (ioc->ioc_cr.uid != 0) {
    44                  err = EPERM;
    45                  goto nak_it;
    46              }
    47              /* fall through */
    48          case I_UNLINK:
    49              /* unlink stream */
    50              /* ... */
    51              goto ack_it;
    52          default:
    53              /* unrecognized */
    54              mp->b_datap->db_type = M_IOCNAK;
    55              qreply(q, mp);
    56              return (0);
    57          }
    58        ack_it:
    59          mp->b_datap->db_type = M_IOCACK;
    60          ioc->ioc_rval = 0;
    61          ioc->ioc_error = 0;
    62          ioc->ioc_count = count;
    63          qreply(q, mp);
    64          return (0);
    65        nak_it:
    66          mp->b_datap->db_type = M_IOCNAK;
    67          ioc->ioc_rval = -1;
    68          ioc->ioc_error = err;
    69          qreply(q, mp);
    70          return (0);
    71      }
    72          /* ... */
    73      default:
    74          /* unrecognized message type */
    75          freemsg(mp);
    76          return (0);
    77      }
    78  }
\s+1\fP
.fi
.PP
The foregoing example exemplifies some of the practises listed under
.RI \(lq USAGE ,\(rq
above.  It shows general positive and negative acknowledgement handling.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR M_DATA (9),
.BR msgb (9),
.BR iocblk (9),
.BR I_STR (7),
.BR I_LINK (7),
.BR I_UNLINK (7),
.BR I_PLINK (7),
.BR I_PUNLINK (7),
.BR streamio (7),
.BR termios (7),
.BR ioctl (2s),
.BR linkblk (9),
.BR strioctl (5),
.BR read (2s),
.BR readv (2s),
.BR write (2s),
.BR writev (2s),
.BR getmsg (2s),
.BR getpmsg (2s),
.BR putmsg (2s),
.BR putpmsg (2s),
.BR M_COPYIN (9),
.BR M_COPYOUT (9),
.BR register_ioctl32 (9),
.BR unregister_ioctl32 (9),
.BR M_IOCACK (9),
.BR M_IOCNAK (9),
.BR M_IOCDATA (9),
.BR M_HANGUP (9),
.BR M_ERROR (9),
.BR qreply (9),
.BR pipe (4),
.BR fifo (4),
.BR putnext (9),
.BR qreply (9).
.\"
.\"
.SH COMPATIBILITY
.PP
The
.B M_IOCTL
.I STREAMS
message is compatible with
.IR "SVR 4.2 MP STREAMS" ,
and implementations based on
.IR "SVR 4" ,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.B @PACKAGE_TITLE@
.[
lfs
.]
uses
.B 15 seconds
as a default timeout.  This value can be altered using the
.B sys.streams.ioctime
system control.  The current value of the
.B sys.streams.ioctime
system control is the default value that will be used by new
Stream heads.
.B M_IOCTL
operations that result from an
.BR I_LINK (7),
.BR I_UNLINK (7),
.BR I_PLINK (7),
or
.BR I_PUNLINK (7),
command to the
Stream head
use the default timeout.
.IP ""
Although
.B 15 seconds
is the traditional default value for
.BR ioctl (2s)
timeout for
.IR STREAMS ,
portable
.I STREAMS
applications programs that expect a specific value will set the timeout explicitly in the
.I ic_timout
member of the
.BR strioctl (5)
data structure.
.IP \(em
.B M_IOCTL
operations that result from the automatic unlinking of regular links beneath a multiplexing driver
upon close of the
multiplexing driver
.IR "Control Stream" ,
that is, automatic
.BR I_UNLINK (7)
operations, will use
.B INFTIM
for a timeout value, (effectively infinite).
.IP \(em
The order and size of the various members of the
.BR iocblk (9)
structure, and the associated aligned
.BR copyreq (9)
and
.BR copyresp (9)
structures, vary in
.I STREAMS
from implementation to implementation.  Some implementations have different structure definitions
depending upon the word size of a specific architecture.
.B @PACKAGE_TITLE@
.[
lfs
.]
follows the
.IR "SVR 4.2"
implementation as closely as possible.
.IP ""
Portable
.I STREAMS
drivers and modules will not rely upon a specific overall size of the
.BR ioclk (9)
structure, or the offset or alignment of any of its members.
See
.BR iocblk (9)
for additional compatibiltiy information.
.IP \(em
.B M_IOCTL
has a different constant value on
older versions of
.IR OSF/1 \(rg,
.[
osfspg
.]
and older versions of
.IR LiS .
.[
lis
.]
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B @PACKAGE_TITLE@
.[
lfs
.]
instead of
.IR LiS .
.[
lis
.]
.IP \(em
Binary compatiblity is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP STREAMS" .
.[
svr42spg
.]
.\"
.\"
.SH HISTORY
.PP
The
.B M_IOCTL
message first appeared in
.IR "SVR 3" .
.[
svr3spg
.]
.\"
.\"
.[
$LIST$
.]
.TI
