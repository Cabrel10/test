'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) module_stat.9.man,v 0.9.2.12 2006/04/05 09:44:14 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:14 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" module_stat.9.man,v
.\" Revision 0.9.2.12  2006/04/05 09:44:14  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH MODULE_STAT 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B module_stat, module_stat_t
\- \fISTREAMS\fR module information structure
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.PP
.nf
\fC\s-1\
typedef struct module_stat {
    long ms_pcnt;	/* calls to qi_putp() */
    long ms_scnt;	/* calls to qi_srvp() */
    long ms_ocnt;	/* calls to qi_qopen() */
    long ms_ccnt;	/* calls to qi_qclose() */
    long ms_acnt;	/* calls to qi_qadmin() */
    void *ms_xprt;	/* module private stats */
    short ms_xsize;	/* len of private stats */
    uint ms_flags;	/* bool stats -- for future use */
} module_stat_t;
\s+1\fP
.fi
.\"
.\"
.SH MEMBERS
.PP
The following members correspond to
.I SVR 4.2 EFT
members:
.TP \w'ms_xsize\(em'u
.I ms_pcnt
Count of the number of
.IR qi_putp (9)
calls.
.PD 0
.TP
.I ms_scnt
Count of the number of
.IR qi_srvp (9)
calls.
.TP
.I ms_ocnt
Count of the number of
.IR qi_qopen (9)
calls.
.TP
.I ms_ccnt
Count of the number of
.IR qi_qclose (9)
calls.
.TP
.I ms_acnt
Count of the number of
.IR qi_qadmin (9)
calls.
.TP
.I ms_xprt
A pointer to the module's private statistics structure.
.\"The format of this structure is module specific and must be maintained by the module.
.TP
.I ms_xsize
The size of the module's private statistics structure.
.TP
.I ms_flags
Flags for boolean statistics (events).
.PD
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
The
.B module_stat
structure, defined in
.RB < sys/stream.h >,
is one of four
.RB ( 4 )
principal data structures using in the definition of a
.I STREAMS
driver or module.  The principal defining data structures are the
.BR streamtab (9),
.BR qinit (9),
.BR module_info (9),
and
.BR module_stat
structures.
.PP
The
.BR streamtab (9)
structure is the entry point into the defining structures for a driver or module.  It contains
pointers to two (driver or module) or four (multiplexing driver)
.BR qinit (9)
structures that define the upper read and write queues in a queue pair, as well as the lower read
and write queues in a queue pair for a multiplexing driver.
.PP
Each
.BR qinit (9)
structure contains function pointer members that provide the queue procedures
.RI ( qi_putp "(9) and " qi_srvp (9))
and module routines
.RI ( qi_qopen "(9), " qi_qclose "(9) and " qi_qadmin (9)).
Each
.BR qinit (9)
structure also points to a
.BR module_info (9)
and optional
.BR module_stat
structure.
.PP
A different
.BR module_stat
structure can be associated with the read and write sides of both the upper and lower multiplex of a
driver or module (through a separate
.BR qinit (9)
structure).
It is also possible to define a single
.BR module_stat
structure for all queues in the driver or module.
.PP
Unlike the other defining structures, that are read-only between registration and de-registration of
the driver or module, the
.B module_stat
structure, when specified, has read-write access.
The
.B module_stat
structure, its members, and any attached private structure, are intended to be used to collect
statistics regarding the operation of the driver or module.  The defined members are used to collect
counts of the number of times that one of the functions referenced from the
.BR qinit (9)
structure are entered as follows:
.PP
.TS
center box tab(:);
lb|lb
l|l.
Function:Count
_
\fIqi_putp\fR(9):\fIms_pcnt
\fIqi_srvp\fR(9):\fIms_scnt
\fIqi_qopen\fR(9):\fIms_ocnt
\fIqi_qclose\fR(9):\fIms_ccnt
\fIqi_qadmin\fR(9):\fIms_acnt
.TE
.PP
.I STREAMS
does not peg these counts automatically.  They are merely provided in an accessible location for the
use by module procedures and routines.  For example, to peg the
.B ms_pcnt
count for the number of times that a
.IR qi_putp (9)
put procedure is entered, the
.IR qi_putp (9)
put procedure must include code to peg the count upon entry.
See
.RI \(lq "Example #2" \(rq,
below for details on the code necessary to peg counts in a module's
.I ms_pcnt
count in its
.IR qi_putp (9)
put procedure.
.PP
The
.I ms_flags
member provides the ability to flag one-time boolean events.  The flags in this field are not
defined by
.IR STREAMS ,
however, the flags field can be displayed by administrative programs as discussed below.
The driver or module is responsible for both defining flags for this member, as well as setting the
flag when the event occurs.
.PP
The defined peg counts,
.IR ms_pcnt ,
.IR ms_scnt ,
.IR ms_ocnt ,
.IR ms_ccnt ,
.IR ms_acnt ,
and boolean flags,
.IR ms_flags ,
are accessible to administrative programs using the
.I STREAMS Configuration
.BR sc (4)
module and the
.BR scls (8)
.I STREAMS
administrative utility.
.PP
The remaining members of the
.B module_stat
structure,
.IR ms_xptr
and
.IR ms_xsize ,
can be used by drivers and modules to provide their own module-private statistics.
.I ms_xptr
is a pointer to a module allocated structure or memory area containing the private statistics.
.I ms_xsize
is the size of the structure or memory area.  Note, however, that, even though the size of the
memory area is provided in the
.I ms_xsize
member,
.I STREAMS
will neither allocate nor free this memory extent.  The purpose of the
.I ms_xsize
member is so that debugging tools can dump the private statistics (e.g., in hexadecimal notation).
.\"
.\"
.SH USAGE
.PP
.B module_stat
structures are not normally specified for many implementations.  Not many implementations provide
user level tools for accessing these statistics.
.B @PACKAGE_TITLE@
provides the
.I STREAMS Configuration
.BR sc (4)
module and the
.BR scls (8)
administrative command for accessing and displaying this information.
.PP
When a
.B module_stat
structure is specified, it is typical to only have one
.B module_stat
structure defining a driver or module for several reasons:
.IP (1) \w'(0)\(em'u
.IR ms_ocnt ,
.IR ms_ccnt ,
.IR ms_acnt
are only applicable to the module as a whole because there is only one
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_qadmin (9)
routine defined for each module (not for each queue).
.IP (2)
It is the ratio of
.IR ms_pcnt
to
.IR ms_scnt
counts that indicates the degree to which a module is queueing messages to its message queues for
service by its service procedure.  For example,
.IR ms_pcnt
divided by
.IR ms_scnt ,
when
.IR ms_scnt
is non-zero, indicates the average number of messages queued when the module
.IR qi_srvp (9)
service procedure was run.
.IP (3)
The
.BR sc (4)
and
.BR scls (8)
utilities are only capable of displaying the contents of one
.BR module_stat
structure.
.PP
See
.RI \(lq EXAMPLES \(rq,
below, for examples that contain only one defining
.B module_stat
structure.
.PP
As with other defining structures,
.B module_stat
structures are typically statically allocated within the kernel object that contains the
.I STREAMS
driver or module.
.\"
.\"
.SH CONTEXT
.PP
Functions that operate on a module statistics structure can be called from any context, including
module procedures, call outs, callbacks, soft interrupts (tasklets and bottom halves), and interrupt
service routines.
.\"
.\"
.SH MP-STREAMS
.PP
Modules and drivers must provide their own mutual exclusion mechanisms to protect access to the
.B module_stat
members and any private statistics memory extent.  Module private locks can be taken to accomplish
this.  See
.RI \(lq "Example #2" \(rq,
below, for an example of using kernel spinlocks to protect the members of the
.B module_stat
structure.
.\"
.\"
.SH NOTICES
.PP
Members of the
.B module_stat
structure should not be accessed directly by
.I STREAMS
drivers or modules after the structure has been registered with the
.BR "@PACKAGE_TITLE@"
executive.
.I STREAMS
drivers or modules should use the other facilities provided by
.BR strqget "(9) and " strqset (9)
for implementation and architecture independence.
.PP
The
.B module_stat
structure is only a subset of the implementation structure used by the
.I STREAMS
scheduler.  Additional hidden fields are present in the implementation
structure.
.PP
Note that, although multiple
.B module_stat
structures can be associated with a driver or module, the
.I STREAMS Configuration
.BR sc (4)
module and, therefore, the
.BR scls (8)
administrative command,
will only display one of them.  (The
.B module_stat
structure displayed is that associated with the write side of the upper multiplexer.)
.\"
.\"
.SH EXAMPLES
.PP
Following are two examples of the use of
.BR module_stat .
The first example illustrates defining a module to use the
.B module_stat
structure.  The second example illustrates how to peg the
.I ms_pcnt
member in the structure when the module's
.IR qi_putp (9)
put procedure is entered.
.\"
.SS Example #1 - Defining a Module
.PP
The following is an example of defining a
.B module_stat
structure as part of the defining structures for a module
(the example is a hypothetical addition of statistics to the
.BR testmod (4)
module contained in the
.I src/modules/testmod.c
source file in the
.B @PACKAGE@-@VERSION@
distribution directory):
.PP
.nf
\fC\s-2\
 1  static struct module_stat testmod_mstat = { 0, };
 2  static struct module_info testmod_minfo = {
 3      .mi_idnum = CONFIG_STREAMS_TESTMOD_MODID,
 4      .mi_idname = CONFIG_STREAMS_TESTMOD_NAME,
 5      .mi_minpsz = STRMINPSZ,
 6      .mi_maxpsz = STRMAXPSZ,
 7      .mi_hiwat = STRHIGH,
 8      .mi_lowat = STRLOW,
 9  };
10  static struct qinit testmod_rinit = {
11      .qi_putp = testmod_rput,
12      .qi_qopen = testmod_open,
13      .qi_qclose = testmod_close,
14      .qi_minfo = &testmod_minfo,
15      .qi_mstat = &testmod_mstat,
16  };
17  static struct qinit testmod_winit = {
18      .qi_putp = testmod_wput,
19      .qi_minfo = &testmod_minfo,
20      .qi_mstat = &testmod_mstat,
21  };
22  static struct streamtab testmod_info = {
23      .st_rdinit = &testmod_rinit,
24      .st_wrinit = &testmod_winit,
25  };
\s+2\fP
.fi
.\"
.SS Example #2 - Pegging ms_pcnt
.PP
The following is an example of a
.IR qi_putp (9)
put procedure pegging the
.I ms_pcnt
counter
(the example is a hypothetical addition of statistics to the
.BR testmod (4)
module contained in the
.I src/modules/testmod.c
source file in the
.B @PACKAGE@-@VERSION@
distribution directory):
.PP
.nf
\fC\s-2\
 1  static spinlock_t testmod_slock = SPINLOCK_UNLOCKED;
 2  int
 3  testmod_wput(queue_t *q, mblk_t *mp)
 4  {
 5      {
 6          struct module_stat *ms;
 7  
 8          if ((ms = q->q_qinfo->qi_mstat)) {
 9              unsigned long flags;
10  
11              spin_lock_irqsave(&testmod_slock, flags);
12              ms->ms_pcnt++;
13              spin_unlock_irqrestore(&testmod_slock, flags);
14          }
15      }
16      switch (DB_TYPE(mp)) {
17      case M_IOCTL:
18          /* ... */
19      }
20      return (0);
21  }
\s+2\fP
.fi
.\"
.\"
.SH "SEE ALSO"
.PP
.IR qi_putp (9),
.IR qi_srvp (9),
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_qadmin (9),
.BR streamtab (9),
.BR qinit (9),
.BR module_info (9),
.BR sc (4),
.BR scls (8),
.BR strqget (9),
.BR strqset (9),
.BR testmod (4),
.IR STREAMS (9).
.\"
.\"
.SH COMPATIBILITY
.PP
The
.B module_stat
structure is compatible with
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
and systems based on
.IR "SVR 4.2" ,
.[
svr42
.]
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.B module_stat
is widely compatible across
.I STREAMS
implementations and has no considerable portability issues.
.IP \(em
Binary compatibiltiy is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 EFT MP" .
.[
usldk
.]
.\"
.\"
.SH HISTORY
.PP
The
.B module_stat
structure was introduced in
.IR "SVR 3" .
.[
svr3
.]
.\"
.\"
.[
$LIST$
.]
.TI
