'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) qi_qopen.9.man,v 0.9.2.7 2006/04/05 09:44:15 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:15 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" qi_qopen.9.man,v
.\" Revision 0.9.2.7  2006/04/05 09:44:15  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH QI_QOPEN 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B open, qi_qopen, qi_qopen_t
\- \fISTREAMS\fR driver or module open routine
.\"
.\"
.SH SYNOPSIS
.ad l
.HP
.B #include <sys/stream.h>
.HP
.BI "typedef int (*qi_qopen_t) (queue_t *" q ", dev_t *" devp ", int " oflag ", int " sflag ", cred_t *" crp ");
.ad b
.\"
.\"
.SH ARGUMENTS
.PP
.TP
.I q
pointer to the driver or module's read queue.
.PD 0
.TP
.I devp
pointer to the device number.
.TP
.I oflag
open flags.
.TP
.I sflag
stream flags.
.TP
.I crp
pointer to the credentials of the opening user.
.PD
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
.IR qi_qopen ()
is one of 5 principal synchronous entry points into a
.I STREAMS
driver or module that form part of the definition of the driver and module.
The principal entry points are:
.IR qi_qopen (),
.IR qi_qclose (9),
.IR qi_qadmin (9),
.IR qi_putp (9),
and
.IR qi_srvp (9).
The
.IR qi_qopen ()
routine is specified in the read queue
.BR qinit (9)
structure that is associated with a new queue pair forming an instance of the driver or module from
the definitions in the driver and module defining
.BR streamtab (9)
structure.
.PP
The
.IR qi_qopen ()
routine is called whenever a new queue pair forming an instance of the
.I STREAMS
driver or module is allocated, initialized and inserted into a Stream, or whenever an existing
Stream is reopened, for each driver and module in the Stream.  This routine permits the module or
driver to perform whatever driver or module private initialization is necessary before the queue
pair becomes active in the Stream, or to respond to a subsequent openning of the Stream.  Error
numbers returned by this function are reflected as error numbers returned to the user in
.BR errno (3)
from the
.BR open (2s)
or
.BR I_PUSH (7)
operation that caused the routine to be invoked.  All drivers and modules must have a
.IR qi_qopen ()
routine defined, otherwise the
.I STREAMS
.BR qopen (9)
call will return
.RB [ ENOPKG ].
See
.BR qopen (9).
.PP
.I STREAMS
passes the following arguments to the
.IR qi_qopen ()
routine:
.TP
.I q
is a pointer to the read queue of a newly allocated queue pair for the module
or driver,  allocated with
.BR allocq (9)
and for which a
.B qinit
structure was associated with
.BR setq (9).
.TP
.I devp
is a pointer to a
.BR dev_t (9)
device number.
For a driver,
.B devp
points to the device number of the
.I STREAMS
character special file that was
opened that invoked the driver's
.IR qi_qopen ()
routine.
A driver
.IR qi_qopen ()
routine returns the resulting device
number to the area pointed to by
.I devp
using
.BR makedevice (9).
For a module,
.B devp
points to the device number of the
.I STREAMS
character special file under whose
stream file the module is being pushed.  A module
.IR qi_qopen ()
routine does not alter
the device number but may use the passed in device number to determine which
device the module is ultimately being pushed over.
.TP
.I oflag
contains the open flags for use by the driver's
.IR qi_qopen ()
routine and will contain
a bitwise or of one or more of the following flags:
.RS
.TP \w'FNDELAY\(em'u
.B FREAD
the \fISTREAMS\fR special file is opened for read.
.PD 0
.TP
.B FWRITE
the \fISTREAMS\fR special file is opened for write.
.TP
.B FEXCL
the \fISTREAMS\fR special file is opened with exclusive access.
.TP
.B FNDELAY
the \fISTREAMS\fR special file is opened for non-blocking operation.
.PD
.RE
.TP
.I sflag
contains \fISTREAMS\fP flags for use by the driver or module's
.IR qi_qopen ()
routine.
Modules are always opened with
.I sflag
set to
.BR MODOPEN .
Drivers are opened with
.B DRVOPEN
or
.B CLONEOPEN
depending upon whether they were opened via a clone driver or not.  For opens
subsequent to the first open and before close, will always be opened with
.BR DRVOPEN .
.I sflag
and will contain one of:
.RS
.TP \w'CLONEOPEN\(em'u
.B DRVOPEN
the module was opened as a
.I STREAMS
driver.  Drivers opened subsequent to the first open, but before close, will
always be opened with this flag.
.TP
.B MODOPEN
the module was opened as a
.I STREAMS
module.  Modules will always be opened with this flag.
.TP
.B CLONEOPEN
the module was opened via the
.BR clone (4)
driver.  This flag will only be set on the initial open of a driver that was
made via a clone driver.  This setting of
.I sflag
requests that the driver assign a unique minor device number to the newly
created stream.
.PP
.RE
.TP
.I crp
points to a
.BR cred_t (9)
structure which provides the credentials of the process invoking the open,
structured as follows:
.RS
.nf
\fC\s-2
typedef struct cred {
        uid_t cr_ruid, cr_uid, cr_suid, cr_fsuid;
        gid_t cr_rgid, cr_gid, cr_sgid, cr_fsgid;
        int cr_ngroups;
        gid_t cr_groups[NGROUPS];
} cred_t;
\fR\s+2
.fi
.RE
.PP
.I STREAMS
invokes a driver or module
.IR qi_qopen ()
routine, on the first open of a driver or module, once a queue pair forming an instance of the
driver or module has been initialized [from
.BR qinit (9)]
and at least half-inserted into a Stream [with
.BR qinsert (9)].
Each module in the module stack and driver have their
.IR qi_qopen ()
routine invoked also for each subsequent open of the driver.
.PP
The
.IR qi_qopen ()
routine is called in the following circumstances:
.IP (1) \w'(1)\(em'u
The
.IR qi_qopen ()
routine of a module is invoked by a user executing a
.BR I_PUSH (7)
.BR ioctl (2s)
operation.
.IP (2)
The
.IR qi_qopen ()
routine of a driver is invoked by a user executing a
.BR open (2s)
system call for a
.I STREAMS
special file.
.IP (3)
The
.IR qi_qopen ()
routine of a Stream head is invoked by a user executing a
.BR open (2s)
system call for a
.I STREAMS
special file, or a
.BR pipe (2s)
system call for a
.IR STREAMS -based
.BR pipe (4).
.IP (4)
The
.IR qi_qopen ()
routine of a Stream head, each module in the module stack, and the driver is performed again for
each subsequent
.BR open (2s)
of the Stream.
.PP
Note that the
.IR qi_qopen ()
routine of the Stream head, modules and driver already present in a Stream are not called when a
module is pushed onto the module stack: only the
.IR qi_qopen ()
routine of the pushed module is called.
.PP
For an initial open of a driver or module, the following conditions prevail:
.IP (1) \w'(0)\(em'u
The queue pair forming a new instance of the driver or module has been allocated and half-inserted
into the Stream beneath the Stream head.  The queue pair is half-inserted in the sense that the
.I q_next
pointers of each queue point to the Stream head and the top of the module stack or driver, however, the
.I q_next
pointers of the Stream head and the top of the module stack or driver, point to each other an bypass
the module.
It takes a call to
.BR qprocson (9)
from within the
.IR qi_qopen ()
routine to fully insert the newly formed queue pair.
.IP (2)
The
.IR qi_putp (9)
and
.IR qi_srvp (9)
procedures for each queue in the queue pair are disabled.  The
.B QPROCS
bit in the
.I q_flag
member of each queue is set indicating that the procedure are disabled.
It takes a call to
.BR qprocson (9)
to enable the
.IR qi_putp (9)
(put) and
.IR qi_srvp (9)
(service)
procedures.
.IP (3)
The
.I q_ptr
members of the queues in the queue pair are
.BR NULL ,
and will not further be modified by
.IR STREAMS .
It is the responsibility of the
.IR qi_qopen ()
routine to use these module private pointers as it sees fit.
.IP (4)
The
.B STRWOPEN
bit in the
.I sd_flags
member of the Stream head
.BR stdata (9)
structure is set, precluding any other
.IR qi_qopen ()
or
.IR qi_qclose (9)
procedure from being called for any queue pair within, or to be added to, the Stream.
.IP (5)
The
.IR qi_qopen ()
procedure is called with a blockable, no locks held, user context, the user context being the user
that cause the routine to be invoked.  That is, the same user whose credentials are pointed to by
.IR crp .
The file flags for the user file descriptor associated with the call are contained in the
.I oflag
argument.  It is possible, in a non-portable way, to obtain a reference to the file pointer and
inode associated with the system call that invoked the routine.  This is always available in the
.I sd_file
and
.I sd_inode
members of the Stream head
.BR stdata (9)
structure.  The Stream head
.BR stdata (9)
structure can be located using the
.BR qstream (9)
macro.
.IP (6)
If an
.BR mp-streams (9)
synchronization specification has been made for the driver or module that includes an inner
synchronization barrier,
.I STREAMS
enters the inner barrier shared or exclusive (according to the
specification) before the
.IR qi_qopen ()
routine is invoked, and
leaves the inner barrier after the call returns.
.\"
.\"
.SH USAGE
.PP
Following are some design guidelines for driver and module writers when writing
.IR qi_qopen ()
routines for drivers and modules:
.\"
.SS Modules and Drivers
.PP
The following are some design guidelines for both driver and module
.IR qi_qopen ()
routines:
.IP \(bu \w'\(bu\(em'u
The driver or module may use the
.I q_ptr
member of the
.BR queue (9)
structures in the queue pair reference by the
.I q
argument to store module private state information.
.IP \(bu
The driver or module should set
.I q_ptr
to a
.RB non- NULL
value to indicate that the queue pair has already been opened.  Then, if the
.I q_ptr
is
.BR non- NULL
on the call to
.IR qi_qopen ()
and the driver or module is not interested in
.IR qi_qopen ()
routine calls subsequent to the initial call,
the driver or module can simply return success.
.IP \(bu
.BR qprocson (9)
must be called by the
.IR qi_qopen ()
routine before expecting to receive any messages on either queue in the
queue pair designated by
.IR q ,
and, in any event, before returning.
.IP \(bu
.IR qi_qopen ()
routines may sleep.
The process blocked will be the user process that invoked
.BR open (2s)
or
.BR I_PUSH (7).
If the routine is to sleep awaiting receipt of a message on either message
queue, it must first call
.BR qprocson (9)
and should use the
.BR qwait_sig (9)
or
.BR qwait (9)
utilities.
.\"
.SS Modules
.PP
The following are some design guidelines for a module
.IR qi_qopen ()
routines:
.IP \(bu \w'\(bu\(em'u
As a general rule, for a module
.IR qi_qopen ()
call,
.I WR(q)->q_next
is
.RB non- NULL .
If this condition is not met, a module may return
.RB [ EIO ].
.IP \(bu
For a module open, on call,
.I devp
points to the device number of the driver over which the module is being pushed.
A module should not alter the
.BR dev_t (9)
device number pointed to by the
.I devp
argument on call.
.RB ( "@PACKAGE_TITLE@"
.[
lfs
.]
will ignore the result.)
.IP \(bu
If the
.I sflag
argument is other than
.BR MODOPEN ,
the
.IR qi_qopen ()
routine should return
.RB [ ENXIO ].
.IP \(bu
On call, the
.I oflag
argument contains the file flags associated with the file descriptor upon which the
.BR I_PUSH (7)
command was executed, or, if the module was autopushed, the driver open flags.
.IP ""
The module may use these flags or ignore them according to its design.  Most modules ignore these
flags.
One possible use of these flags is to check the
.BR O_NDELAY " or " O_NONBLOCK
flags to determine whether the module
.IR qi_qopen ()
routine should sleep awaiting allocation of resources.
.IP \(bu
Module
.IR qi_qopen ()
routines should do not generally return error numbers other than
.RB [ ENXIO ].
See
.BR I_PUSH (7).
.\"
.SS Drivers
.PP
The following are some design guidelines for a driver
.IR qi_qopen ()
routines:
.IP \(bu \w'\(bu\(em'u
As a general rule, for a driver
.IR qi_qopen ()
call,
.I WR(q)->q_next
is
.BR NULL .
If this condition is not met, a driver may return
.RB [ EIO ].
.IP \(bu
The
.I devp
argument points to a
.BR dev_t (9)
device number that indicates the device number associated with the
.I STREAMS
special file device node that was opened by the
.BR open (2s)
call.  Depending on the setting of
.IR sflag ,
this device number may or may not be altered on the first open of a driver.  See below.
.IP \(bu
If the
.I sflag
argument is other than
.BR DRVOPEN
or
.BR CLONEOPEN ,
the
.IR qi_qopen ()
routine should return
.RB [ ENXIO ].
.IP \(bu
On call, the
.I oflag
argument contains the file flags associated with the
.BR open (2s)
call that opened the driver.  These flags may be different for each call to the driver
.IR qi_qopen ()
routine.
.IP ""
The driver may use these flags or ignore them according to its design.  Most driver ignore these
flags.
One possible use of these flags is to check the
.BR O_NDELAY " or " O_NONBLOCK
flags to determine whether the driver
.IR qi_qopen ()
routine should sleep awaiting allocation of resources or initialization of hardware.
.IP \(bu
When
.I sflag
is
.BR CLONEOPEN ,
(and, optionally, on the first open for a queue pair with
.BR DRVOPEN ),
the driver assigns a new unique device number and returns it in the
.BR dev_t (9)
device number using
.BR makedevice (9)
and the
.B devp
argument to the call.
.\"
.\"
.SH RETURN
.PP
Upon success,
.IR qi_qopen ()
returns success, zero (0), and the device number associated with a driver in the area pointed to by
.IR devp .
Upon failure,
.IR qi_qopen ()
returns a non-zero, positive (or negative), error number.
.\"
.\"
.SH ERRORS
.PP
When
.IR qi_qopen ()
fails, it returns a non-zero, positive (or negative), error number.
In general, the following errors are provided by driver or module
.IR qi_qopen ()
routines:
.TP \w'[EWOULDBLOCK]\(em'u
.RB [ ENXIO ]
the
.IR qi_qopen ()
routine for the driver or module failed.
.TP
.RB [ ENXIO ]
a driver was opened as a module.
.TP
.RB [ EIO ]
a module was opened as a driver.
.TP
.RB [ EACCES ]
the opening process did not have sufficient credentials to open the specified
device or push the specified module.
.TP
.RB [ EPERM ]
same as
.RB [ EACCES ]
above.
.TP
.RB [ ENOMEM ]
memory could not be allocated to hold the driver or module's private
structures.
.TP
.RB [ ENOBUFS ]
a buffer could not be allocated as part of the open.
.TP
.RB [ ENOSR ]
same as
.RB [ ENOMEM ]
and
.RB [ ENOBUFS ],
above.
.TP
.RB [ ENOSR ]
a
.I STREAMS
resource could not be allocated as part of the open.
.\"
.\"
.SH CONTEXT
.PP
.IR qi_qopen ()
is only called by
.I STREAMS
in user context with the
.BR STRWOPEN
bit held in the Stream head private structure
.BR stdata (9),
(to prevent other simultaneous opens and closes of the same Stream),
and no locks held.
.\"
.\"
.SH MP-STREAMS
.SS Synchronized Modules and Drivers
.PP
If
.BR mp-streams (9)
synchronization has been specified for the driver or module, the inner synchronization barrier, if
any, is entered shared or exclusive per the synchronization specification for the driver or module,
across the call to the driver or module
.IR qi_qopen ()
routine.
If synchronization has not been specified for the driver or module (that is, the driver or module is
specified as MP-safe), the
.IR qi_qopen ()
routine is invoked without synchronization.
.SS MP-Safe Modules and Drivers
.PP
The discussion that follows applies to the MP-safe driver or module under
.BR "@PACKAGE_TITLE@" :
.PP
.IR qi_qopen ()
is only called by
.I STREAMS
in user context with the
.BR STRWOPEN
bit held in the Stream head private structure
.BR stdata (9),
(to prevent other simultaneous opens and closes of the same Stream),
and no locks held.
.PP
Driver and module
.IR qi_qopen ()
routines are always invoked single-threaded and exclusive within a Stream and (with respect to
itself, and the
.IR qi_qclose (9)
routine) in accordance
with descriptions for
.IR "SVR 4" ,
.[
svr4
.]
as described in
.IR "\*(lqThe Magic Garden\*(rq" .
.[
magic
.]
This is also consistent with exclusive open/close access under
.IR Solaris \(rg.
.[
solspg
.]
.PP
Only one
.I plumbing
.RB [ qopen (9),
.BR qclose (9),
.BR I_LINK (7),
.BR I_PLINK (7),
.BR I_UNLINK (7),
.BR I_PUNLINK (7),
.BR fattach (3),
.BR fdetach (3)]
operation at a time can be executing for a given Stream.
So, for example, data structures accessed only by a
.I plumbing
operation, and which are private to a queue pair or Stream, do not need protective locks.
.PP
On the other hand, each
.IR qi_qopen ()
routine must be reentrant as it can run concurrent with any
.I plumbing
operation on a different Stream, for a different queue pair instance,
.IR q ,
of the same driver or module.
.PP
Unless
.BR mp-streams (9)
synchronization is used, a
.IR qi_qopen ()
routine can run concurrent with any
.IR qi_putp (9),
.IR qi_srvp (9),
or
synchronous or asynchronous callback functions for a separate instance of the driver or module.
After
.BR qprocson (9)
has been called, 
.IR qi_putp (9),
.IR qi_srvp (9),
or
synchronous or asynchronous callback functions for the same instance of the driver or module may run
concurrent with the
.IR qi_qopen ()
routine.
Protective locks should be used on any data structures that a shared between the
.IR qi_qopen ()
routine and a different instance of a
.I plumbing
operation, or a different instance of a
.IR qi_putp (9),
.IR qi_srvp (9),
or callback procedure, or the same instance of a
.IR qi_putp (9),
.IR qi_srvp (9),
or callback procedure, after
.BR qprocson (9)
has been called.
.PP
See
.RI \(lq "EXAMPLES" ,\(rq
below for an example use of locking within the
.IR qi_qopen ()
routine.
.PP
See
.BR mp-streams (9),
for more information on driver and module synchronization.
.\"
.\"
.SH NOTICES
.PP
A driver or module
.IR qi_qopen ()
routine is an internal
.I STREAMS
entry point to the driver or module, that is not intended to be called
directly by the driver or module writer.  See
.BR open (2s)
and
.BR I_PUSH (7)
for indirect methods of invoking this routine.
.\"
.\"
.SH STYLE
.PP
It is common practise to name
.IR qi_qopen ()
routines
\(lq\fIprefix\fBopen\fR(),\(rq
(where
.I prefix
is the configuration prefix chosen for the driver or module and typically derived from the name of
the driver or module, and which may contain a trailing underscore).
.\"
.\"
.SH EXAMPLES
.PP
.\"
.SS Example #1 - Module qi_qopen()
.PP
The following example of a module
.IR qi_qopen ()
routine comes directly from the
.BR pipemod (4)
module located in the
.I src/modules/pipemod.c
source file in the
.BR @PACKAGE@-@VERSION@
distribution:
.PP
.nf
\fC\s-2\
 1  static int
 2  pipemod_open(queue_t *q, dev_t *devp, int oflag,
 3               int sflag, cred_t *crp)
 4  {
 5      queue_t *wq;
 6  
 7      if (q->q_ptr != NULL)
 8          /* already open */
 9          return (0);
10      wq = WR(q);
11      if (sflag == MODOPEN || wq->q_next != NULL) {
12          /* inherit packet sizes we are pushed over */
13          wq->q_minpsz = wq->q_next->q_minpsz;
14          wq->q_maxpsz = wq->q_next->q_maxpsz;
15          /* just set it to something */
16          q->q_ptr = wq->q_ptr = q;
17          qprocson(q);
18          return (0);
19      }
20      /* can't be opened as driver */
21      return (EIO);
22  }
\s+2\fP
.fi
.IP "\fBLine 7-9\fP:" \w'Line\ 16-18:\(em'u
The module is not interested in subsequent opens after the first, so it returns success.
.IP "\fBLine 11\fP:"
The module checks to make sure that it is truly opened for the first time as a module, if not,
there was a serious error somewhere and the module returns
.RB [ EIO ]
at
.BR "Line 21" .
.IP "\fBLine 13-14\fP:"
The module inherits the same minimum and maximum packet sizes on the write side as the lower module
or driver.  The Stream head uses these sizes when writing to the Stream.
.IP "\fBLine 16-18\fP:"
The module sets the
.I q_ptr
module private points to some value (in this case
.IR q ),
so as to leave them
.RB non- NULL
for the check at
.B Line 7
on subsequent opens of the same module, and calls
.BR qprocson (9)
to enable queue
.IR qi_putp (9)
and
.IR qi_srvp (9)
procedures.
.PP
See the
.I src/modules
directory in the
.B @PACKAGE@-@VERSION@
distribution for more working examples of module open routines.
.\"
.SS Example #2 - Driver qi_qopen()
.PP
The following example of a driver
.IR qi_qopen ()
routine comes directly from the
.BR sad (4)
driver located in the
.I src/drivers/sad.c
source file in the
.B @PACKAGE@-@VERSION@
distribution:
.PP
There are two minors:
.B 0
is the
.I /dev/sad/admin
driver; and,
.B 1
is the
.I /dev/sad/user
driver.  Permission for access to the
.I /dev/sad/admin
minor is performed by filesystem permission on the character device and a check on open.
.PP
.nf
\fC\s-2\
 1  static int
 2  sad_open(queue_t *q, dev_t *devp, int oflag,
 3           int sflag, cred_t *crp)
 4  {
 5      major_t major = getmajor(*devp);
 6      minor_t minor = getminor(*devp);
 7  
 8      if (q->q_ptr)
 9          /* already open */
10          return (0);
11      switch (sflag) {
12      case CLONEOPEN:
13          minor = 1;
14          if (sads[minor].assigned != 0)
15              break;
16      case DRVOPEN:
17          if (minor != 0 && minor != 1)
18              break;
19          if (minor == 0 && crp->cr_uid != 0
20              && crp->cr_ruid != 0)
21              return (-EACCES);
22          *devp = makedevice(major, minor);
23          sads[minor].assigned |= 1;
24          q->q_ptr = WR(q)->q_ptr = &sads[minor];
25          qprocson(q);
26          return (0);
27      }
28      return (-ENXIO);
29  }
\s+2\fP
.fi
.IP "\fBLine 8-10\fP:" \w'Line\ 28-28:\(em'u
The driver is not interested in subsequent opens after the first, so it returns success.
.IP "\fBLine 11\fP:"
The driver checks to make sure that it is truly opened for the first time as a driver, if not, there
was a serious error somewhere and the driver returns
.RB [ ENXIO ]
at
.BR "Line 28" .
.IP "\fBLine 12-15\fP:"
If the driver is opened with the
.B CLONEOPEN
.IR sflag ,
it attempts to assign the user minor device.  If the user minor device is already used,
.RB [ ENXIO ]
is returned at
.BR "Line 28" .
.IP "\fBLine 16-21\fP:"
Otherwise, if an attempt is made to open a minor device number other than that for the admin or user
device, 
.RB [ ENXIO ]
is returned at
.BR "Line 28" .
If the admin device is opened, and the user does not have root privileges,
.RB [ EACCES ]
is returned at
.BR "Line 21" .
.IP "\fBLine 22-26\fP:"
Otherwise, the driver returns the assigned device number using
.I devp
and 
.BR makedevice (9)
and assignes the module private structure to
.IR q_qptr ,
call
.BR qprocson (9)
to enable queue
.IR qi_putp (9)
and
.IR qi_srvp (9)
procedures,
and returns success.
.PP
See the
.I src/drivers
directory in the
.B @PACKAGE@-@VERSION@
distribution for more working examples of driver open routines.
.\"
.\"
.SH "SEE ALSO"
.PP
.IR qi_qclose (9),
.IR qi_qadmin (9),
.IR qi_putp (9),
.IR qi_srvp (9).
.BR qinit (9),
.BR streamtab (9),
.BR errno (3),
.BR open (2s),
.BR I_PUSH (7),
.BR qopen (9),
.BR allocq (9),
.BR setq (9),
.BR dev_t (9),
.BR makedevice (9),
.BR clone (4),
.BR cred_t (9),
.BR qinsert (9),
.BR ioctl (2s),
.BR pipe (2s),
.BR pipe (4),
.BR qprocson (9),
.BR stdata (9),
.BR qstream (9),
.BR mp-streams (9),
.BR qwait_sig (9),
.BR qwait (9),
.BR qclose (9),
.BR I_LINK (7),
.BR I_PLINK (7),
.BR I_UNLINK (7),
.BR I_PUNLINK (7),
.BR fattach (3),
.BR fdetach (3),
.BR pipemod (4),
.BR sad (4),
.BR specfs (5),
.BR ioctl (3p),
.BR STREAMS (9).
.\"
.\"
.SH BUGS
.PP
.B @PACKAGE_TITLE@
invocation of the
.IR qi_qopen ()
entry point has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
The
.IR qi_qopen ()
routine is compatible with
.IR "SVR 4.2"
.[
usldk
.]
and implementations based on
.IR "SVR 4" ,
.[
svr4spg
.]
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.I "SVR 4.2"
.[
svr42spg
.]
did not define a type for the prototype of a queue
.IR qi_qopen (9)
routine.  This was an embellishment that first appeared in
.IR OSF/1 \(rg " 1.1" ,
.[
osfspg
.]
and propagated to
.IR AIX \(rg
.[
aixspg
.]
and
.IR HP-UX \(rg.
.[
hpuxspg
.]
.IP ""
Portable
.I STREAMS
drivers and modules will not directly reference the
.B qi_qopen_t
type.
.IP \(em
.B @PACKAGE_TITLE@
passes the internal device number to the
.IR qi_qopen ()
procedure with the
.I devp
argument, not the external device number, as does
.IR LiS .
.IP \(em
If a driver returns a non-unique device number in
.I devp
when
.I sflag
is set to
.BR CLONEOPEN ,
.B @PACKAGE_TITLE@
will still attach the newly created Stream to the inode associated with the device number.
Since the device number corresponds to an inode, the fact that the device number is non-unique will
mean that multiple Streams will be attached to the same inode.
.B @PACKAGE_TITLE@
handles this ambiguity by associating a list of Streams with an inode.  The file pointer that
generated the
.IR qi_qopen ()
routine call will reference the specific Stream that it created; however, other file pointers for
the same inode will reference other Streams.
Under
.BR "@PACKAGE_TITLE@" ,
this is referred to as
.RI \*(lq "super cloning" \*(rq.
The only ramification of
.I super cloning
is that only the most current allocated Stream can be opened by explicit device number within either
the external file system or the
.BR specfs (5)
filesystem.  See
.BR dev_t (9)
for more information.
.IP ""
Portable
.I STREAMS
drivers will only return a unique device number when
.I sflag
is set to
.BR CLONEOPEN ,
in accordance with
.IR "SVR 4.2"
.[
svr42spg
.]
specification,
and
.I super cloning
will, therefore, not be invoked.
.IP \(em
.B @PACKAGE_TITLE@
passes an error number returned from a module
.IR qi_qopen ()
routine to the returned
.BR errno (3)
value for an
.BR I_PUSH (7)
.BR ioctl (2s)
call.  This does not precisely match
.I POSIX
behaviour [see
.BR ioctl (3p)],
which requires that
.RB [ ENXIO ]
be returned when a module
.IR qi_qopen ()
routine fails.
.IP ""
Portable
.I STREAMS
modules will only return
.RB [ ENXIO ]
when the module
.IR qi_qopen ()
routine fails when
invoked with
.I sflag
set to
.BR MODOPEN .
In this way,
.I POSIX
compliance is met.
.IP \(em
.B @PACKAGE_TITLE@
does not (yet) support the older
.IR "SVR 3" -style
prototype.  All
.IR qi_qopen ()
routines must be written to the
.IR "SVR 4" -style
prototype, regardless of the setting of the driver or module
\fIxxx\fBflag\fR,
contrary to the description in the
.IR "SVR 4 SPG" .
.[
svr4spg
.]
.IP ""
Portable
.I STREAMS
drivers and modules will use only the
.IR "SVR 4" -style
prototype, and will always define the
\fIxxx\fBflag\fR.
.IP \(em
Because a number of the primary data structures and types have different definitions on the
.B GNU/Linux
system, binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility considerations.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP EFT" .
.[
usldk
.]
.\"
.\"
.SH HISTORY
.PP
The
.B qi_qopen_t
type first appeared in
.IR OSF/1 \(rg " 1.1" .
.[
osfspg
.]
.PP
The queue
.IR qi_qopen ()
open routine first appeared in
.IR "SVR 3" .
.[
svr3
.]
.\"
.\"
.[
$LIST$
.]
.TI
