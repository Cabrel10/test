'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) putmsg.2.man,v 0.9.2.15 2006/04/05 09:43:42 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:43:42 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" putmsg.2.man,v
.\" Revision 0.9.2.15  2006/04/05 09:43:42  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH PUTMSG 2 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ System Calls"
.\"
.\"
.SH NAME
.B putmsg
\- put a message to a \fISTREAMS\fP character device
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <stropts.h>
.HP 8
.BI "int putmsg(int " fd ", const struct strbuf *" ctlptr ", const struct strbuf *" dataptr ", int " flags );
.\"
.\"
.SH ARGUMENTS
.PP
.TP \w'dataptr\(em'u
.I fd
the file descriptor to which to put a message.
.PD 0
.TP
.I ctlptr
a pointer to a
.B strbuf
structure holding the control part of the message.
.TP
.I dataptr
structure holding the data part of the message.
.TP
.I flags
putmsg flags.
.PD
.\"
.\"
.SH DESCRIPTION
.PP
.B putmsg()
generates a
.I STREAMS
message from the buffer supplied in the specified
.IR ctlptr " and " datapr
and with options specified by
.I flags
and delivers the message to the stream head associated with the
.I STREAMS
character special file
.IR fd .
.PP
The resulting
.I STREAMS
message can contain a control part as specified by
.IR ctlptr ,
a data part as specified by
.IR datptr ,
or both.
The control part, when present, will generate
.BR M_PROTO " or " M_PCPROTO
message blocks.
The data part, when present, will generate
.B M_DATTA
message blocks.
When both control and data parts are present, an
.BR M_PROTO " or " M_PCPROTO
message block followed by one or more
.B M_DATA
message blocks will be generated.
.PP
.I fd
is an open file descriptor for the
.I STREAMS
character special file to which the
.I STREAMS
message is to be written.
.PP
.IR ctlptr " and " datptr
point to a
.B strbuf
structure, which contains the following members:
.sp
.nf
\fC\s-2\
struct strbuf {
    int maxlen;         /* Maximum buffer length.  */
    int len;            /* Length of data.  */
    char *buf;          /* Pointer to buffer.  */
};
\s+2\fR
.fi
.TP \w'maxlen\(em'u
.I maxlen
Not used by
.BR putmsg() .
.PD 0
.TP
.I len
The length of the information pointed to by
.IR buf .
.TP
.I buf
A pointer to the buffer that contains
.I len
bytes of information.
.PD
.PP
.I ctlptr
points to a
.B strbuf
structure describing the control part to be included in the message, or
.B NULL
if there is no control part.
The
.I buf
member
of the
.B strbuf
structure pointed to by
.I ctlptr
indicates the start of the information to sent in the control part, and
the
.I len
member indicates the length of the information for the control part.
.PP
.I datptr
points to a
.B strbuf
structure describing the data part to be included in the message, or
.B NULL
is there is no data part.
The
.I buf
member
of the
.B strbuf
structure pointed to by
.I ctlptr
indicates the start of the information to sent in the data part, and
the
.I len
member indicates the length of the information for the data part.
.I len
can be zero (0) to send zero-length data.
.PP
.I flags
specifies whether to send a high priority message or a normal priority message.
.I flags
can be one of the following values:
.TP \w'RS_HIPRI\(em'u
.B RS_HIPRI
Specifies that a high priority message is to be sent and the request must contain a
control part
.RI ( ctlptr " not"
.BR NULL ).
This results in an
.B M_PCPROTO
message being placed on the stream head.
.TP
.B 0
Specifies that a normal priority message is to be sent.
This results in an
.B M_PROTO
message being placed on the stream head when there is a control part.
When there is only a data part, an
.B M_DATA
message
is placed on the stream head.
.PP
When the
.BR O_NONBLOCK "(or " O_NDELAY )
file flag is clear,
.BR putmsg ()
blocks for normal priority messages (ones for which
.I flags
is set to zero
.RB ( 0 ))
when the stream cannot accept data (the stream write queue is full due to internal flow conditions).
For normal priority messages (ones for which
.I flags
is set to zero
.RB ( 0 )),
when the
.BR O_NONBLOCK "(or " O_NDELAY )
file flag is set, and the stream cannot accept data (the stream write queue is full due to internal
flow conditions),
.BR putmsg ()
will fail, return minus one
.RB ( -1 )
and set the global error number,
.IR errno (3)
to
.RB [ EAGAIN "] (or [" EWOULDBLOCK ]).
.PP
When the stream head is set for
old TTY
semantics for
.BR O_NDELAY ,
and the
.BR O_NDELAY "(or " O_NONBLOCK )
file flag is clear,
.BR putmsg ()
blocks for normal priority messages (ones for which
.I flags
is set to zero
.RB ( 0 ))
when the stream cannot accept data (the stream write queue is full due to internal flow conditions).
For normal priority messages (ones for which
.I flags
is set to zero
.RB ( 0 )),
when the
.BR O_NDELAY "(or " O_NONBLOCK )
file flag is set, and the stream cannot accept data (the stream write queue is full due to internal
flow conditions),
.BR putmsg ()
will terminate and return zero
.RB ( 0 ).
.PP
For high priority messages (ones for which
.I flags
is set to
.BR RS_HIPRI ),
.BR putmsg ()
will neither block nor fail on flow control conditions, regardless of the stream head
.B O_NDELAY
semantics, or the setting of
.BR O_NDELAY
or
.BR O_NONBLOCK .
.PP
Unlike
.BR write (2s)
or
.BR writev (2s),
.BR putmsg (),
unless prevented by the lack of internal
.I STREAMS
resources, blocks awaiting the availability of message blocks to service the request, regardless of
the stream head
.B O_NDELAY
semantics or the settings of the
.BR O_NDELAY " or " O_NONBLOCK
file flags.  This is necessary because no partial messages will be written by
.BR putmsg ().
When prevented by the lack of internal
.I STREAMS
resources,
.BR putmsg ()
will fail, return minus one
.RB ( -1 )
and set the global error number,
.IR errno (3),
to
.RB [ ENOSR ].
.\"
.\"
.SS STREAMS Semantics for O_NDELAY
.PP
When
.BR O_NDELAY " (or " O_NONBLOCK )
is set,
.BR putmsg ()
will fail, return minus one
.RB ( -1 )
and set the global error number,
.IR errno (3),
to
.RB [ EAGAIN ]
if flow control is in effect when the call is received.  It will block, unless prevented by lack of
internal
.I STREAMS
resources, awaiting the availability of message buffers.
.PP
When
.BR O_NDELAY " (or " O_NONBLOCK )
is clear,
.BR putmsg ()
will block on flow control and, unless prevented by the lack of internal
.I STREAMS
resources, will block if buffers are not available.
.\"
.\"
.SS Old TTY Semantics for O_NDELAY
.PP
Regardless of the setting of
.BR O_NDELAY " (or " O_NONBLOCK ),
.BR putmsg ()
will block on flow control and, unless prevented by lack of internal
.I STREAMS
resources, will also block on the availability of message buffers.
.\"
.\"
.SS STREAMS-base Pipes and FIFOs
.\"
.\"
.SH "RETURN VALUE"
.PP
Upon success,
.B putmsg()
returns zero
.RB ( 0 ).
Upon failure,
.B putmsg()
returns minus one
.RB ( -1 )
and sets the global error number,
.IR errno (3)
to an appropriate error number.
.\"
.\"
.SH ERRORS
.PP
When
.B putmsg()
fails, it returns minus one
.RB ( -1 )
and sets the global error number,
.IR errno (3),
to one of the following:
.\".TP
.\".RB [ EACCES ]
.\".I fd
.\"is a dynamic device, and write permission on the device is denied.
.TP \w'[EWOULDBLOCK]\(en'u
.RB [ EISDIR ]
.I fd
refers to a directory.
.TP
.RB [ EBADF ]
.I fd
is not a valid open file descriptor or is not open for reading.
.TP
.RB [ ENOSTR ]
.I fd
refers to a device that has no stream associated with it.
.TP
.RB [ ENODEV ]
.I fd
refers to a device that does not support the
.B putmsg()
system call.
.TP
.RB [ EINVAL ]
.I fd
refers to a stream that is linked (directly or indirectly) downstream from a
.I STREAMS
multiplexing driver.
.TP
.RB [ EIO ]
.I fd
refers to a stream that has closed or is in the process of closing.
.TP
.RB [ ENXIO ]
.I fd
refers to a stream that has received an
.BR M_HANGUP (9)
message.
.TP
.RB [ EPIPE ]
.I fd
refers to a
.IR STREAMS -based
pipe or FIFO that has received an
.BR M_HANGUP (9)
message.
.TP
.RB [ EPIPE ]
.I fd
refers to a
.IR STREAMS -based
pipe whose other end has closed or is closing.  A
.B SIGPIPE
signal will also be sent to the calling process.
.TP
.RB [ ESTRPIPE ]
.I fd
refers to a
.IR STREAMS -based
pipe or FIFO that has no readers.
.TP
.RB [ ETIME ]
The stream head is set for blocking operation and
.BR putmsg ()
has blocked for an excessively long period of time.
.TP
.RB [ EAGAIN ]
The stream head is set for non-blocking operation using
.I STREAMS
.B O_NDELAY
semantics
and
.BR putmsg ()
would otherwise block: that is, the message is being sent with
.I flags
set to zero
.RB ( 0 )
and the stream write queue is full due to internal flow control conditions.
.TP
.RB [ EWOULDBLOCK ]
Same as
.RB [ EAGAIN ].
.TP
.RB [ EINTR ]
A signal arrived before the operation could complete.
.TP
.RB [ ERESTARTSYS ]
A signal arrived before the operation could begin.  That is, the operation has neither blocked nor
written any data.
.TP
.RB [ EFAULT ]
.IR ctlptr ", " datptr ", " ctlptr->buf " or " datptr->buf
point outside the caller's address space.
.TP
.RB [ EINVAL ]
The value of
.I flags
or the combination of
.IR ctlptr ", " datptr ,
and the value of
.I flags
were invalid,
such as when
.I flags
is specified as
.B RS_HIPRI
and
there is no control part.
.TP
.RB [ ENOSR ]
.I STREAMS
resources were insufficient to complete the operation.
.TP
.RB [ ERANGE ]
The
.I len
of the data part of the message is outside the range
.I q_minpsz
to
.I q_maxpsz
inclusive for the topmost
.I STREAMS
module or driver under the stream head, or,
the
.I len
of the control or data part is larger than the maximum sized control or data
message for the
.I STREAMS
subsystem.
.PP
Other errors may be returned by
.BR putmsg() .
If the protocol module sends an
.B M_ERROR
message to the stream head, the error returned on all subsequent write
operations, including
.BR putsmg() ,
is specified in the
.B M_ERROR
message by the protocol module.  Which errors are returned under what
conditions form part of the necessary documentation of the protocol module.
.\"
.\"
.SH NOTICES
.PP
.\"
.\"
.SS Multi-Threading
.PP
.BR putmsg ()
is thread-safe.
Because
.BR putmsg ()
does not allow partial writes
(unlike
.BR write (2s)),
.B POSIX
mandatory locks
(see
.BR lockf (3))
are not necessary
to make write operations atomic.
.\"
.\"
.SS "Asynchronous I/O"
.PP
If the file is set for blocking operation (see
.BR fcntl (2)),
or old TTY semantics for
.B O_NDELAY
are set for the stream head,
.BR putmsg ()
will block waiting for the stream to permit sending messages under flow control.
.\"
.\"
.PP
When the file is set for non-blocking operation, and the stream is set
for
.I STREAMS
semantics for
.BR O_NDELAY ,
.BR putmsg ()
will not block, but will fail, return minus one
.RB ( -1 ),
and populate the global error number,
.IR errno (3)
with
.RB [ EAGAIN ].
.\"
.\"
.PP
Regardless of the stream head semantics for
.BR O_NDELAY ,
or the setting of the
.BR O_NDELAY " and " O_NONBLOCK
file flags, for
high priority messages (for which
.I flags
is set to
.BR RS_HIPRI ),
.BR putmsg ()
will not block on flow control, because
.I STREAMS
flow control conditions do not apply to high priority messages.
.\"
.\"
.PP
Regardless of the stream head semantics for
.BR O_NDELAY ,
or the setting of the
.BR O_NDELAY " and " O_NONBLOCK
file flags,
.BR putmsg ()
will block, unless prevented by lack of internal
.I STREAMS
resources, awaiting the availability of message blocks to complete the operation.
When prevented from blocking due to a lack of internal
.I STREAMS
resources,
.BR putmsg ()
wil fail, return minus one
.RB ( -1 ),
and set the global error number,
.IR errno (3)
to
.RB [ ENOSR ].
.\"
.\"
.SH IMPLEMENTATION
.PP
When an implementation returns
.RB [ ENOSR ]
is not clear.
.PP
An implementation that uses
.BR bufcall (9)
to implement waiting for the availability of message blocks might fail allocate a
.BR bufcall (9)
callback due to the unavailability of
.I STREAMS
resources.  That is, a call to
.BR bufcall (9)
to create a buffer callback fails and returns zero
.RB ( 0 ),
leaving the implementation little option but to return
.RB [ ENOSR ].
.PP
.B @PACKAGE_TITLE@
uses a different approach, utilizing the non-standard
.B BPRI_WAITOK
flag to
.BR allocb (9).
This permits the stream head to block awaiting the availability of message blocks without ever
failing due to lack of internal
.I STREAMS
resources.  Therefore,
.B @PACKAGE_TITLE@
will not return
.RB [ ENOSR ],
but will block indefinitely awaiting the availability of a message block.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR intro (2),
.BR poll (2s),
.BR putmsg (2),
.BR write (2s),
.BR streamio (7).
.\"
.\"
.SH BUGS
.PP
.BR putmsg ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR putmsg ()
is compatible with
SVID,
.[
svid
.]
XID,
.[
xbd5
.]
SUSv2,
.[
susv2
.]
SUSv3/POSIX,
.[
susv3
.]
and implementations based on
.IR "SVR 4.2" ,
.[
svr42cr
.]
including
.IR AIX \(rg,
.IR HP-UX \(rg,
.IR IRIX \(rg,
.IR LiS ,
.IR MacOT \(rg,
.IR OSF/1 \(rg,
.IR Solaris \(rg,
.IR SUPER-UX \(rg,
.IR UnixWare \(rg,
.IR UXP/V \(rg,
with the following compatibility considerations:
.IP \(em \w'\(em\(em'u
.BR putmsg ()
is compatible with LiS
.[
LiS
.]
with the following exceptions:
.B LiS
.[
LiS
.]
incorrectly returns
.RB [ EINVAL ]
instead of
.RB [ EIO ]
when the internal head queue pointer points to a structure that is not a queue
structure, or is mangled.
.B LiS
.[
LiS
.]
does not return
.RB [ EIO ]
when
.B putmsg()
is called on a closing stream.
.B LiS
.[
LiS
.]
incorrectly returns
.RB [ EAGAIN ]
instead of
.RB [ EINTR ]
when an
.B M_SIG
message causes a signal that interrupts the call to
.B putmsg()
before any data is written.
.B LiS
.[
LiS
.]
incorrectly returns
.RB [ ENODEV ]
instead of
.RB [ ENOSTR ]
when there is no stream associated with
.IR fd .
.B LiS
.[
LiS
.]
incorrectly returns
.RB [ EINVAL ]
instead of
.RB [ ENODEV ]
when
.I fd
refers to a device that does not support the
.B putmsg()
system call.
.BR putmsg ()
is not bug-for-bug compatible with
.B LiS
in these and possibly other regards.
.IP
Portable
.I STREAMS
applications, modules and drivers will expect compatibility with
.B POSIX
.[
susv3
.]
and not rely upon
.BR LiS -specific
bugs and behaviour.
.\"
.\"
.PP
.B Linux Fast-STREAMS
provides system calls for
.IR __NR_getpmsg " and " __NR_putpmsg
that are used to implement this system call.
(glibc has prototypes for this system call.)
In addition,
.B Linux Fast-STREAMS
recognizes the \*(lqinvalid\*(rq buffer length to
.BR write (2s)
used by LiS to emulate the
.I __NR_getpmsg
system call, permitting LiS libraries to be used with
.BR "Linux Fast-STREAMS" .
.\"
.\"
.SH CONFORMANCE
.PP
SVID,
.[
svid
.]
XID,
.[
xbd5
.]
SUSv2,
.[
susv2
.]
SUSv3/POSIX.
.[
susv3
.]
.\"
.\"
.SH HISTORY
.PP
.B putmsg()
first appeared in SVR 3.
.[
svr3
.]
.\"
.\"
.[
$LIST$
.]
.TI
