'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) qband.9.man,v 0.9.2.20 2006/04/05 09:44:15 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:15 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" qband.9.man,v
.\" Revision 0.9.2.20  2006/04/05 09:44:15  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH QBAND 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B qband, qband_t
\- queue band structure
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.PP
.nf
\fC\s-1
.B "typedef struct qband {
        struct qband *qb_next;  /* next (lower) priority band */
        size_t qb_count;        /* number of bytes queued */
        struct msgb *qb_first;  /* first queue message in this band */
        struct msgb *qb_last;   /* last queued message in this band */
        size_t qb_hiwat;        /* hi water mark for flow control */
        size_t qb_lowat;        /* lo water mark for flow control */
        unsigned long qb_flag;  /* flags */
        long qb_pad1;           /* reserved */
.B "} qband_t;

.B "#define qb_msgs qb_pad1

enum {
        QB_FULL_BIT,            /* band full flow control */
        QB_WANTW_BIT,           /* back enable required */
        QB_BACK_BIT,            /* UnixWare/Solaris/UXP/V */
};

.B "#define QB_FULL  \fP(1<<QB_FULL_BIT )
.B "#define QB_WANTW \fP(1<<QB_WANTW_BIT)
.B "#define QB_BACK  \fP(1<<QB_BACK_BIT)  /* UnixWare/Solaris/UXP/V */

.B "#define NBAND    \fP256               /* UnixWare/Solaris */
\s+1\fP
.fi
.\"
.\"
.SH MEMBERS
.PP
The following members correspond to
.I SVR 4.2 EFT
members:
.TP \w'\ qb_hiwat\ 'u
.I qb_next
A pointer to the
.B qband
structure corresponding to the the next lower priority band (or
.B NULL
if there is no lower priority band).
.PD 0
.TP
.I qb_count
The number of bytes queued to the band.
.TP
.I qb_first
A pointer to a
.BR msgb (9)
structure representing the first message block queued to the band.
.TP
.I qb_last
A pointer to a
.BR msgb (9)
structure representing the last message block queued to the band.
.TP
.I qb_hiwat
The high water mark in bytes that represents the number of bytes queued to the
band beyond which band flow controls will be initiated.
.TP
.I qb_lowat
The low water mark in bytes that represents the number of bytes queue to the
band beneath which band flow controls will be ceased.
.TP
.I qb_flag
Flags for the queue band.  These are a bitwise OR of any of the following
flags:
.PD
.RS
.TP \w'\ QB_WANTW\ 'u
.B QB_FULL
This bit is set when the queue band was full
.RI ( qb_count " > " qb_hiwat )
but has not yet dropped to the low water mark
.RI ( qb_count == 0 || qb_count < qb_lowat )
and is subject to flow control.
.PD 0
.TP
.B QB_WANTW
This bit is set when the queue band requires a back enable.
This occurs when
.BR bcanput (9)
or
.BR bcanputnext (9)
has previously failed for the queue band.
.TP
.B QB_BACK
For
.IR UnixWare \(rg,
.IR Solaris \(rg
and
.IR UXP/V \(rg
compatibility.  This bit is set when the queue band is back enabled.
.PD
.RE
.TP
.I qb_pad1
Padding to pad the structure to the size of the
.I "SVR 4.2"
Extended fundamental Type.
.PD 0
.PD
.PP
The following members are
.B Linux Fast-STREAMS
.[
lfs
.]
specific members:
.TP \w'\ qb_hiwat\ 'u
.I qb_msgs
The count of the number of messages queued to the band.
This member is a renaming of
.I qb_pad1
above.
.PD 0
.PD
.\"
.\"
.SH FUNCTIONS
.PP
The following queue band utility functions are provided:
.TP \w'\ bcanputnext(9)\ \-\ 'u
\fBappq\fP(9) \-
append messages to a queue
.PD 0
.TP
\fBbcanput\fP(9) \-
test band for flow control for a queue
.TP
\fBbcanputnext\fP(9) \-
test band for flow control for a queue
.\".TP
.\"\fBcanput\fP(9) \-
.\"test for flow control for a queue
.\".TP
.\"\fBcanputnext\fP(9) \-
.\"test for flow control for next queue
.TP
\fBflushband\fP(9) \-
flush messages from a band of a queue
.TP
\fBflushq\fP(9) \-
flush messages from a queue
.TP
\fBinsq\fP(9) \-
insert messages into a queue
.\".TP
.\"\fBput\fP(9) \-
.\"put a message to a queue's put procedure
.TP
\fBputbq\fP(9) \-
put a message back on a queue
.\".TP
.\"\fBputnext\fP(9) \-
.\"put a message on the next queue
.TP
\fBputq\fP(9) \-
put a message on a queue
.TP
\fBqcountstrm\fP(9) \-
count the data bytes on all queues in a stream
.TP
\fBrmvq\fP(9) \-
remove a message from a queue
.TP
\fBstrqget\fP(9) \-
get a parameter for a queue
.TP
\fBstrqset\fP(9) \-
set a parameter for a queue
.PD
.PP
See also
.BR queue (9).
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
The
.B qband
structure contains pointers into the linked list of messages on the
.BR queue (9).
These pointers,
.I qb_first
and
.IR qb_last ,
denote the beginning and end of messages for the particular band.
When there are no messages in the band, both
.I qb_first
and
.I qb_last
are
.BR NULL ;
with any messages in the band, both are
.RB non- NULL .
.PP
The
.I qb_count
member is analogous to the
.BR queue (9)'s
.I q_count
member.  However,
.I qb_count
only applies to the messages on the
.BR queue (9)
in the band of data flow represented by the corresponding
.B qband
structure.  In contrast,
.I q_count
contains information regarding normal (priority band zero) and high priority messages.
.PP
Each band has a separate high and low water mark,
.I qb_hiwat
and
.IR qb_lowat .
These are initially set to the
.BR queue (9)'s
.I q_hiwat
and
.I q_lowat
respectively.  Modules and drivers may change these values if desired using the
.BR strqset (9)
utility.
.PP
Three flags,
.BR QB_FULL ,
.BR QB_WANTW ,
and
.BR QB_BACK ,
are defined for
.IR qb_flag .
.B QB_FULL
denotes that the particular band is full.
.B QB_WANTW
indicates that the neighbouring feeding queue (with a service procedure) wanted to write to the band
when it was full.
.B QB_BACK
is set when the
.IR qi_srvp (9)
procedure is scheduled as a result of back-enabling from a queue being fed by this one for which
flow control has subsided for this queue band.
.PP
The
.B qband
structures are not preallocated per
.BR queue (9).
Rather, they are allocated when a normal priority message with a non-zero
.I b_band
is placed on the queue from
.BR appq (9),
.BR insq (9),
.BR putq (9),
or
.BR putbq (9).
When a 
.B qband
structure does not exist for the band corresponding to
.IR b_band ,
.I STREAMS
tries to allocate
.B qband
structures for all non-existent bands up to and including the band of the message and places the
resulting
.BR qband
structures into a reverse sorted
.I q_bandp
list on the
.BR queue (9).
Since band allocation can fail, these routines return
.I false
.RB ( 0 )
on failure and
.I true
.RB ( 1 )
on success.
.BR strqset (9)
and
.BR strqget (9)
will also cause
.B qband
allocation to occur.
.PP
Once a
.B qband
structure is allocated, it remains associated with the queue until the queue is freed.
Therefore, it is possible to ensure that no band allocation failures will result by preallocating
any necessary band from a module's
.IR qi_qopen (9)
procedure using
.BR strqset (9)
or
.BR strqget (9).
.PP
See,
.BR appq (9),
.BR insq (9),
.BR putq (9),
.BR putbq (9),
.BR strqset (9),
and
.BR strqget (9),
for more information.
.\"
.\"
.SH CONTEXT
.PP
Functions that operate on a queue band
can be called from any context, including user context, module procedures, call-outs, callbacks, soft
interrupts (tasklets and bottom halves) and interrupt service routines.
.\"
.\"
.SH MP-STREAMS
.PP
.PP
The queue band pointers and members, with the exception of the
.I qb_flag
member, are protected by the queue reader-writer lock,
.RI ( q_rwlock )
in the parent
.BR queue (9)
structure.
The
.I qb_flag
member is protected using atomic bit operations.
Whenever a queue reader-write lock is acquired, local interrupts are suppressed, allowing
utilities that manipulate the
.BR queue (9)
and
.B qband
structures to be called from any context.
.PP
Some queue and queue band utilities have a back-enable side-effect.  These are utilities that
remove messages from the queue or queue band:
.BR rmvq (9),
.BR getq (9),
.BR flushq (9),
.BR flushband (9).
Because the back-enable side-effect,
.BR qbackenable (9),
can only be invoked from specific contexts, these utilities are more restrictive.  See
.BR rmvq (9),
.BR getq (9),
.BR flushq (9),
.BR flushband (9),
for more information.
.\"
.\"
.SH NOTICES
.PP
Members of the
.B qband
structure should not be accessed directly by
.I STREAMS
drivers or modules.  Portable
.I STREAMS
drivers and modules should use the facilities provided by
.BR strqget (9)
and
.BR strqset (9)
for implementation and architecture independence, as well as MP-safety.
.PP
The
.B qband
structure is only a subset of the
.B qbinfo
structure used by the
.I STREAMS
scheduler.  Additional hidden members are present in the
.B qbinfo
structure.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR appq (9),
.BR bcanput (9),
.BR bcanputnext (9),
.BR flushband (9),
.BR flushq (9),
.BR getq (9),
.BR insq (9),
.BR msgb (9),
.BR msgsize (9),
.BR putbq (9),
.BR putq (9),
.BR qbackenable (9),
.BR queue (9),
.BR rmvq (9),
.BR strqget (9),
.BR strqset (9),
.IR qi_qopen (9),
.IR qi_srvp (9),
.IR STREAMS (9).
.\"
.\"
.SH COMPATIBILITY
.PP
The
.B qband
structure is compatible with
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
and implementations based on
.IR "SVR 4.2"
with the following portability considerations:
.IP \(em \w'\(em\(em'u
When a normal priority message, with zero band, is placed on a queue with
.BR appq (9),
.BR insq (9),
.BR putq (9),
.BR putbq (9),
and a
.BR qband
structure does not yet exist for the band corresponding to
.IR b_band ,
.I STREAMS
tries to allocate
.B qband
structures for all non-existent bands up to and including the band of the message, and places the
resulting
.B qband
structures into a reverse sorted
.I q_bandp
list on the
.BR queue (9).
.I q_nband
is adjusted, and always reflects the highest allocated band.
.IP ""
This is consistent with the description in the
.IR "System V Release 4: Programmer's Guide: STREAMS" ,
.[
svr4spg
.]
which states:
.RS
.RS 4n
.ll -4n
.PP
\(lqIf a message is passed to
.BR putq (9)
with a
.I b_band
value that is greater than the number of
.BR qband
structures associated with the queue [member
.I q_nband
in the
.BR queue (9)
structure],
.BR putq (9)
tries to allocate a new
.BR qband
structure for each band up to and including the band of the message.\(rq
.[
svr4spg
.]
.ll +4n
.RE
.RE
.IP ""
.IR Solaris \(rg
.[
solspg
.]
allocates
.BR qband
structures up to and including
.IR b_band ,
and maintains the
.I q_nband
member of the
.BR queue (9)
structure, as does other
.IR "SVR 4.2" -based
implementations.
.IP ""
.I LiS
allocates
.B qband
structures on demand, links them in a sparse array, and will also reuse
.B qband
structures that were previously allocated for bands that are currently empty.  This is not a good
approach because user established band high and low water marks will be reset to those of the
.BR queue (9)
structure when a subsequent message is placed on the reused band.  Also, this makes it difficult to predict when
.BR appq (9),
.BR insq (9),
.BR putq (9),
.BR putbq (9),
.BR strqget (9),
.BR strqset (9),
will fail as a result of failure to allocate a
.BR qband
structure.  This
.I LiS
bug is not perpetuated in
.BR "@PACKAGE_TITLE@" .
.IP ""
Portable
.I STREAMS
drivers and modules can rely on intermediate band structure being allocated when a normal priority
message is placed on a queue and may examine the
.I q_nband
member of the
.BR queue (9)
structure to determine whether a
.B qband
exists.
.IP ""
Portable
.I STREAMS
drivers and modules will use
.BR "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
.B qband
structures, in the list pointed to by the
.I q_bandp
member of the
.BR queue (9)
structure, are ordered from highest band number to lowest band number.  This ensures that higher
priority
.B qband
structures can be accessed faster than lower priority structures.
.IR Solaris \(rg
.[
soldoc
.]
orders
.B qband
from lowest to highest priority, and without gaps (see consideration of allocation above).
.I LiS
orders
.B qband
structures from most recently allocated/reused to least recently allocated/reused.  Neither the
.IR Solaris \(rg
nor the
.I LiS
approach is very efficient.
.IP ""
Portable
.I STREAMS
drivers and modules will not depend on the ordering of
.B qband
structures within the
.I q_bandp
list on the
.BR queue (9)
structure, and, will not access
.B qband
or
.BR queue (9)
members directly, but will use the portable and MP-safe
.BR strqget (9)
and
.BR strqset (9)
utilities instead.
.IP \(em
Versions of
.I LiS
previous to
.I OpenSS7 Release LiS-2.16.18-17
automatically freed the message on failure.  Versions of
.I LiS
subsequent to
.I OpenSS7 Release LiS-2.16.18-16
do not free th message on failure in accordance with
.IR "SVR 4"
.[
svr4spg
.]
and other implementation documentation.
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
All versions of
.I LiS
contain the bug that they keep track of message queue counts,
.IR q_count ,
.IR qb_count ,
in terms of the sum of the absolute sizes of the data buffers referenced by message blocks,
.RB ( "db_lim - db_base" ),
and not the sizes of the message blocks themselves,
.RB ( "b_wptr - b_rptr" ),
which does not conform to
.IR "SVR 4.2 STREAMS" .
.[
svr42spg
.]
See
.BR msgsize (9).
No other implementation has this bug.
.IP ""
Portable
.I STREAMS
applications programs, drivers and modules will use
.BR "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
.IR "Mac OT" \(rg
has type
.B short
for
.I qb_flag
and
.I qb_pad1
members of the
.B qband
structure.
.IR OSF/1 \(rg
has types
.B long
and
.B ulong
for all members of the
.B qband
structure.
Only
.IR "SVR 4.2 MP"
.[
usldk
.]
.B Extended Fundamental Types
are supported.
The
.B qband
structure is provided for source compatibility with
.IR "SVR 4.2 EFT" .
.IP ""
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 EFT" .
.[
usldk
.]
.\"
.\"
.SH HISTORY
.PP
The
.B qband
structure was introduced in
.IR "SVR 4" .
.[
svr4spg
.]
.\"
.\"
.[
$LIST$
.]
.TI
