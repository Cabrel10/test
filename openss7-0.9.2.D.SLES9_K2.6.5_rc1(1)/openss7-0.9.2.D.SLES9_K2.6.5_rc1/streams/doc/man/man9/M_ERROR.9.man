'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) M_ERROR.9.man,v 0.9.2.10 2006/04/05 09:44:02 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:02 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" M_ERROR.9.man,v
.\" Revision 0.9.2.10  2006/04/05 09:44:02  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH M_ERROR 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B M_ERROR
\- \fISTREAMS\fP error message
.\"
.\"
.SH FORMAT
.PP
The
.B M_ERROR
message block is a
.BR datab (9)
structure and associated data buffer that contains structured data.
The contents of the
.B M_ERROR
message block is zero, one, or two character width integer error numbers.
.PP
An
.B M_ERROR
message is a high priority message that consists of one
.B M_ERROR
message block.
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
The
.B M_ERROR
message is generated by a driver or module and sent upstream by drivers or modules to report some
downstream error condition.  When the message reaches the
Stream head,
the
Stream
is marked so that all subsequent system calls issued to the
Stream,
excluding
.BR close (2s)
and
.BR poll (2s),
will fail with
.BR errno (3)
set to the first data byte of the message.
.B POLLERR
is set if the
Stream
is being polled [see
.BR poll (2s)].
All proceses sleeping on a system call to the
Stream
are awakened.  An
.BR M_FLUSH (9)
message with
.B FLUSHRW
is then sent downstream from the
Stream head.
.PP
The
Stream
maintains two error fields, one for the read-side and one for the write-side.  The, older, zero- and
one-byte form
.B M_ERROR
message sets both of these fields to the error specified by the first byte in the message, or
cleared the error when a zero-byte message arrived.
.PP
The second style of the
.B M_ERROR
message is two bytes long.  The first byte is the read error and the second byte is the write error.
This allows modules to set a different error on the read-side and write-side.  If one of the bytes
is set to
.BR NOERROR ,
then the field for the corresponding side of the
Stream
is unchanged.  This allows a module to adjust an error on one side of the
Stream.
For example, if the
Stream head
was not in an error state and a module sent an
.B M_ERROR
message upstream with the first byte set to
.RB [ EPROTO ]
and the second byte set to
.BR NOERROR ,
all subsequent write-like system calls (for example,
.BR write (2s),
.BR putmsg (2))
will still succeed: only read-like system calls
.RB ( read (2s),
.BR getmsg (2)),
will fail with
.IR errno (3)
set to
.RB [ EPROTO ].
If a byte is set to
zero
.RB ( 0 ),
the error state is cleared for the corresponding side of the
Stream.
The values of
.B NOERROR
and zero
.RB ( 0 )
are not valid for the one-byte form of the
.B M_ERROR
message.
.\"
.\"
.PP
WHen this message type is received, the first byte of the message is put into the Stream head
.RI ( sd_rerror )
and the
.B STRDERR
flag is set; the second byte is placed in
.I sd_werror
and the
.B STDWERR
flag is set.  If the error code in the message has a special value
.BR NOERROR ,
the corresponding flag is not set.  However, if the error flag is set, a
.BR read (2s)
or
.BR write (2s)
will fail, and the value returned to the process in
.IR errno (3)
is taken from
.IR sd_rerror " or " sd_werror .
The error condition prevents all further reads and writes to the
Stream
util it is closed, or the
Stream head
receives a
.B NOERROR
code in an
.B M_ERROR
message.  The relevant processes (all processes blocked on read or write, or blocked awaiting
acknowledgement to an
.BR M_IOCTL (9)
message, or that have registered to receive
.RI { SIGPOLL }
for the
.BR S_ERROR
event)
are then awoken or signalled.  Finally, a
.BR M_FLUSH (9)
message is sent downstream to discard all data queued in the
Stream.
Note that many of the
.I STREAMS
system calls and
.BR streamio (7)
IO controls block awaiting message arriving at the
Stream head
or flow control to subside on a message band.  These system calls and
.BR streamio (7)
IO controls describe what occurs in the event of the receipt of what is termed an
.RI \(lq "asynchronous error" \(rq,
that is, arrival at the
Stream head
of an
.BR M_ERROR (9)
message.
.PP
The
.BR putctl (9),
and
.BR putnextctl (9),
.I STREAMS
utility functions are useful for modules generating the zero-byte form of the message.
The
.BR putctl1 (9),
and
.BR putnextctl1 (9),
.I STREAMS
utility functions are useful for modules generating the one-byte form of the message.
The
.BR putctl2 (9),
and
.BR putnextctl2 (9)
.I STREAMS
utility functions were added in support of the newer two-byte error message.
.\"
.B M_ERROR
messages cannot be generated directly by user level processes.
.B M_ERROR
messages arriving at a non-multiplexing driver should be discarded (ignored and freed).
.B M_ERROR
messages can be generated by drivers and modules.
.B M_ERROR
messages are consumed by the
Stream head.
.\"
.\"
.SH USAGE
.PP
The following guidelines provide best practise for generation of the
.B M_ERROR
message for drivers and modules:
.IP \(bu \w'\(bu\(em'u
The
.B M_ERROR
message is a high priority message and is not subjected to flow control.  Modules should pass the
.B M_ERROR
message along directly from a
.IR qi_putp (9)
procedure and should not queue the message.
.IP \(bu
Modules and driver should only pass this message upstream.  Intermediate modules may record the fact
that a
.B M_ERROR
message has transitted the module, and the error numbers contained in the message; however, the
module must pass the
.B M_ERROR
message along upstream.
.IP \(bu
An
.B M_ERROR
message arriving at the write-side queue of a module should be passed along as an unrecognized
message type.
This permits
.B M_ERROR
messages to be passed along a
.IR STREAMS -based
.BR pipe (4).
.IP \(bu
An
.B M_ERROR
message arriving at the write-side queue of a driver should be discarded.
.IP \(bu
An
.B M_ERROR
message arriving at the read-side queue on the lower side of a multiplexing driver should be
treated in a similar fashion as the
Stream head.
That is, the driver should record the error numbers, cease (or resume) receiving or sending messages
on the lower multiplexer queue pair and should flush the appropriate sides of the linked
Stream.
.IP \(bu
Because of the asynchronous nature of the
.B M_ERROR
message and reporting of the error number values contained in it, use of the
.B M_ERROR
message by a driver or module should be reserved for fatal error conditions, where the
Stream
is unusable and will require the
Stream
to be dismantled and recreated to clear the error condition.  Non-fatal error conditions should be
reported within the protocol of the service interface.
.IP \(bu
Simple hangups are to be reported using the
.BR M_HANGUP (9)
message and not an
.BR M_ERROR (9)
message with the error number(s) set to
.RB [ ENXIO ].
.IP \(bu
.B M_ERROR
should not be used to return an error to an
.BR ioctl (2s)
system call.
Unless a fatal error has truly occured, an
.BR M_IOCNAK (9)
message should be used instead.
.IP \(bu
All new drivers and modules should use the two-byte form of the message.  Existing
.I STREAMS
modules using the zero- and one-byte form, should be converted to use the two-byte form.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR datab (9),
.BR msgb (9).
.\"
.\"
.SH COMPATIBILITY
.PP
The
.B M_ERROR
.I STREAMS
message is compatible with
.IR "SVR 4.2 MP STREAMS" ,
and implementations based on
.IR "SVR 4" ,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.B M_ERROR
provide backwards compatibility of the newer two-byte format of the message with the older zero- and
one-byte format of the message.  If a zero-byte
.B M_ERROR
message is received by the
Stream head,
it is treated as equivalent to a two-byte message with both fields set to
.BR NOERROR .
If a one-byte
.B M_ERROR
message is received by the
Stream head,
it is treated as equivalent to a two-byte message with both fields set to the error number in the
single field of the received one-byte message.
.IP ""
Portable
.I STREAMS
drivers and modules will only use the
2-byte form of the
.B M_ERROR
message.
.IP \(em
Contrary to the description in
.RI \(lq "The Magic Garden" ,\(rq
.[
magic
.]
when a read error occurs, only the read-side of the
Stream
is flushed; a write error, the write-side; both errors, both sides.
.IP ""
Portable
.I STREAMS
modules and driver should not expect the upstream queues to be flushed when only a write error
occurse, nor the downstream queues flushed when a read error occurs.
.IP \(em
.B M_ERROR
is has the wrong message type value on older versions of
.IR LiS .
.[
lis
.]
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B @PACKAGE_TITLE@
.[
lfs
.]
instead of
.IR LiS .
.[
lis
.]
.IP \(em
Binary compatibiltiy is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP STREAMS" .
.[
svr42spg
.]
.\"
.\"
.SH HISTORY
.PP
The
.B M_ERROR
message first appeared in
.IR "SVR 3" .
.[
svr3spg
.]
The two-byte
format for the
.B M_ERROR
message first appeared in
.IR "SVR 4.2" .
.[
svr42spg
.]
.\"
.\"
.[
$LIST$
.]
.TI
