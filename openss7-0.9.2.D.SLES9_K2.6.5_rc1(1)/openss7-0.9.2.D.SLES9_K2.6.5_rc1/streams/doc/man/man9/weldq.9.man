'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) weldq.9.man,v 0.9.2.21 2006/04/05 09:44:19 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:19 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" weldq.9.man,v
.\" Revision 0.9.2.21  2006/04/05 09:44:19  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH WELDQ 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B weldq
\- weld two (or four) queues together
.\"
.\"
.SH SYNOPSIS
.PP
.B #define _OSF_SOURCE
.br
.B #include <sys/stream.h>
.br
.B #include <sys/ddi.h>
.PP
.BI "typedef void *weld_arg_t;
.br
.BI "typedef void (*weld_fcn_t)(weld_arg_t);
.HP
.BI "int weldq(queue_t *" q1 ", queue_t *" q2 ", queue_t *" q3 ", queue_t *" q4 ", weld_fcn_t " func ", weld_arg_t " arg ", queue_t *" protect_q ");
.\"
.\"
.SH ARGUMENTS
.PP
.TP \w'protect_q\(em'u
.I q1
the first queue to weld.
.PD 0
.TP
.I q2
the queue to weld to
.IR q1 .
.TP
.I q3
the second queue to weld.
.TP
.I q4
the queue to weld to
.IR q3 .
.TP
.I func
an optional callback function to execute on completion.
.TP
.I arg
an argument for the optional callback function.
.TP
.I protect_q
an optional queue to use for synchronization to protect the callback function.
.PD
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.\".PP
.\"The
.\".I STREAMS
.\"synchronization-queueing mechanism allows only one queue to be accessed at any
.\"one time.  In some cases, however, it is necessary for a thread to establish
.\"queue connections between modules that are not in the same stream.  These
.\"queue connections (welding mechanism) are especially useful for
.\".I STREAMS
.\"multiplexing and for echo-like
.\".I STREAMS
.\"drivers.
.\".PP
.\".I STREAMS
.\"uses a special synchronization queue for welding queues.  As for individual
.\"queue synchronization, the welding and unwelding requests are queued.  The
.\"actual operation id sone safely by
.\".IR STREAMS ,
.\"without any risk of deadlocks.
.\".PP
.\"The
.\".BR weldq ()
.\"and
.\".BR unweldq (9)
.\"utilities, respectively, establish and remove connections between one or two
.\"pairs of driver or module queues.  Because the actual operation is done
.\"asynchronously, the utilities specify a callback function and its argument.
.\"The callback function is typically the
.\".BR qenable (9)
.\"function or the
.\".BR wakeup (9)
.\"kernel service.
.\".PP
.\"During the welding and unwelding operation, both pairs of queues are acquired.
.\"However, it may be necessary to prevent another queue, queue pair, module or
.\"group of modules from being accessed during the operation.  Therefore, an
.\"additional queue can be specified when calling the
.\".BR weldq ()
.\"or
.\".BR unweldq (9)
.\"utility; this queue will also be acquired during the operation.  Depending on
.\"the synchronization level of the module to which this queue belongs, the
.\"queue, queue pair, the module instance, all module instances, or an arbitrary
.\"group of mdoules will be acquired.
.PP
.BR weldq ()
forms a pipe-like connection between the queue pairs specified by
.RI ( q1 ", " q4 )
and
.RI ( q3 ", " q2 ).
The
.I q->q_next
pointer of
.I q1
is directed to
.I q2
and the
.I q->q_next
pointer of
.I q3
is directed to
.IR q4 .
If only one pair of queues need be welded,
.IR q3 " and " q4
can be set to
.BR NULL .
.PP
The actual inter-connection of the queues may be performed asynchronously and
the caller can provide a callback function,
.IR func ,
and argument,
.IR arg ,
to be called once the welding is complete.
If a callback function is not required,
.IR func " and " arg
should be set to
.BR NULL .
.PP
If synchronization of the callback function with a queue is necessary (and is
recommended), the argument
.I protect_q
specifies a queue to be used for synchronization.  If synchronization of the
callback function with a queue is not required,
.I protect_q
should be set to
.BR NULL .
.\"
.\"
.SH USAGE
.PP
.BR weldq ()
is used by the
.BR ticlts (4),
.BR ticots (4),
.BR ticotsord (4),
and
.BR spx (4)
drivers to connect two streams together to form a
.BR pipe (2s)
or loop-back connection.
.PP
For example, to weld two streams,
.IR rq1 " and " rq2
together in a pipe-like connection, the following can be performed:
.BI weld(WR( rq1 "), " rq2 ", WR(" rq2 "), " rq1 ", " NULL ", " 0 ", " NULL ).
.\"
.\"
.SH RETURN
.PP
Upon success,
.BR weldq ()
issues a welding request and returns zero (0).
Upon failure,
.BR weldq ()
does not affect a change to any queue, and the function returns a
.I positive
error number.
.\"
.\"
.SH ERRORS
.PP
When
.BR weldq ()
encounters and error, it returns an appropriate error number as follows:
.TP \w'[EAGAIN]\(em'u
.RB [ EAGAIN ]
The request could not be completed.  The caller may try again.  This occurs
from a failure to allocate the
.I STREAMS
resources necessary to complete the request.
.TP
.RB [ EINVAL ]
A parameter was in error:
.IR q1 " or " q3
are already welded; or
.IR q2 " or " q4
are supplied without the corresponding
.IR q1 " or " q3 .
.TP
.RB [ ENXIO ]
The
.BR weldq ()
utility is not provided.
(This error code is never returned by
.BR "Linux  Fast-STREAMS" .)
.PP
Note that
.BR weldq ()
returns a
.I positive
error number, whereas most other
.B Linux Fast-STREAMS
functions, in the
.B Linux
tradition, return a
.I negative
error number.
.\"
.\"
.SH CONTEXT
.PP
.BR weldq ()
can be called from any context, including user context, module procedures,
call-outs, callbacks, soft interrupts (tasklets and bottom halves), and interrupt service routines.
.\"
.\"
.SH MP-STREAMS
.PP
.BR weldq ()
is MP-safe.
.PP
Considerations should be given when writing the callback function that a
.BR weldq ()
callback function can execute at the same time as any non-exclusive
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedure, non-exclusive
.BR weldq (),
.BR unweldq (9),
.BR qbufcall (9),
or
.BR qtimeout (9)
callback or interrupt service routine.
.PP
However, the
.BR weldq ()
action and callback function will be serviced by the same CPU as the CPU from
which the
.BR weldq ()
request was issued.  Therefore, the callback function will not execute until
after
.BR weldq ()
returns.
Because the servicing thread and the current thread are the same, the
.BR weldq ()
callback will not be invoked until after the function that called
.BR weldq ()
returns and encounters a preemption point.
This means that it is safe to hold locks across the call to
.BR weldq ()
and the caller can 
perform other actions exclusive to the callback function subsequent to the
call, such as
.BR SV_WAIT (9)
on a condition variable that is signalled using
.BR SV_SIGNAL (9)
or
.BR SV_BROADCAST (9)
from the callback function.
.PP
If a protection queue,
.I protect_q
is specified, the normal synchronization as is appropriate for a callback
procedure on the specified queue will be taken before the action is performed
and the callback is invoked.
.\"
.\"
.SH NOTICES
.PP
Queues that have been successfully welded with
.BR weldq ()
can be unwelded with
.BR unweldq (9).
.PP
If one end of a pipe-like streams created by
.BR weldq ()
is closed,
.I STREAMS
will automatically unweld the two modules.  In this case,
.BR unweldq (9)
does not need to be called.
.\".PP
.\"Under
.\".BR "Linux 2.4" ,
.\"without kernel pre-emption,
.\".BR weldq ()
.\"simply obtains the necessary locks in the calling thread, performs the
.\"function and then calls the callback function (if any).    Under
.\".BR "Linux 2.6" ,
.\"with kernel pre-emption, the call may be rescheduled.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR unweldq (9),
.BR ticlts (4),
.BR ticots (4),
.BR ticotsord (4),
.BR spx (4),
.BR pipe (2s),
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_putp (9),
.IR qi_srvp (9),
.BR qbufcall (9),
.BR qtimeout (9).
.\"
.\"
.SH BUGS
.PP
.BR weldq ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR weldq ()
is compatible with
.IR AIX \(rg,
.[
aixspg
.]
.IR HP-UX \(rg,
.[
hpuxspg
.]
.IR OSF/1 \(rg,
.[
osfspg
.]
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.BR weldq ()
is not an
.I "SVR 4.2 MP DDI/DKI"
function.
.IP \(em
.IR MacOT \(rg,
.IR Solaris \(rg,
.IR SUPER-UX \(rg,
.IR UnixWare \(rg,
.IR UXP/V \(rg,
and
.I LiS
do not document this function.
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility considerations.
.\"
.\"
.SH CONFORMANCE
.PP
.BR weldq ()
is not an
.IR "SVR 4.2 MP DDI/DKI"
.[
usldk
.]
.I STREAMS
utility function; however, it appeared in a number of implementations.
.PP
.BR weldq ()
conforms to
.IR AIX \(rg,
.[
aixspg
.]
.IR HP-UX \(rg,
.[
hpuxspg
.]
.IR OSF/1 \(rg,
.[
osfspg
.]
documentation.
.\"
.\"
.SH HISTORY
.PP
.BR weldq ()
first appeared in a number of implementations of
.IR "SVR 4 MP" .
.[
svr4
.]
.\"
.\"
.[
$LIST$
.]
.\"
.\"
.TI
