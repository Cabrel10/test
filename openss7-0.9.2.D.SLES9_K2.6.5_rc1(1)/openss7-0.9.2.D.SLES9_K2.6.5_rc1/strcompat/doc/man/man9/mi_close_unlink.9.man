'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) mi_close_unlink.9.man,v 0.9.2.3 2006/04/05 09:43:33 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:43:33 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" mi_close_unlink.9.man,v
.\" Revision 0.9.2.3  2006/04/05 09:43:33  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database strcompat.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so strcompat.macros
.\"
.\"
.TH MI_CLOSE_UNLINK 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B mi_close_unlink
\- unlink a \fISTREAMS\fR private structure from the global list
.\"
.\"
.SH SYNOPSIS
.PP
.B #define _MPS_SOURCE
.br
.B #include <sys/ddi.h>
.br
.B #include <sys/mpsddi.h>
.HP
void \fBmi_close_unlink\fR(caddr_t *\fIhead\fR, caddr_t \fIptr\fR);
.\"
.\"
.SH ARGUMENTS
.PP
.TP
.I head
.TP
.I ptr
.\"
.\"
.SH DESCRIPTION
.PP
.BR mi_close_unlink ()
.\"
.\"
.SH USAGE
.PP
In contrast to
.BR mi_close_comm (9),
the housekeeping functions
.BR mi_close_unlink ()
and
.BR mi_close_free (9)
breaks the actions of
.BR mi_close_comm (9)
into to sections:
.IP 1) \w'0)\ \ 'u
Unlinking the private structure from the global allocation list and detaching the private structure
from the
.I STREAMS
driver or module and performing whatever other housekeeping actions that implies (such as cancelling
buffer calls that were issued with
.BR mi_bufcall (9)).
This is performed by
.BR mi_close_unlink ().
.IP 2)
Freeing the private structure already detached from the stream and global list and performing
whatever additional resource counting that implies.
This is performed by
.BR mi_close_free (9).
.PP
.BR mi_close_free (9)
is used in conjunction with
.BR mi_close_unlink ()
when the
.I STREAMS
module or driver writer wishes to manipulate the private data structure after it has been unlinked
from the stream.
.PP
A similar set of functions are
.BR mi_detach (9)
and
.BR mi_close_detached (9).
.BR mi_detach (9)
is like
.BR mi_close_unlink (),
but it also removes the private structure from the queue private pointers
.RI ( q->q_ptr ).
.BR mi_close_detached (9)
is all but identical to
.BR mi_close_free (9).
.\"
.\"
.SH RETURN
.PP
.BR mi_close_unlink ()
returns
.BR void .
.\"
.\"
.SH ERRORS
.PP
.BR mi_close_unlink ()
always succeeds.  However, when passed an invalid pointer or a pointer to an invalid data structure,
.BR mi_close_unlink ()
might destabilized the kernel or cause an immediate or delayed kernel panic.
.\"
.\"
.SH EXAMPLES
.PP
Following is an example of a module
.BR qclose (9)
procedure using
.BR mi_close_free ():
(See also the example for
.BR mi_open_comm (9).)
.PP
.RS
.nf
\fC\s-1
typedef struct priv {
    long some_data;
    long some_more_data;
} priv_t;

static caddr_t xxx_state = NULL;

int
xxx_open(queue_t *q, dev_t *devp, int flag,
         int sflag, cred_t *crp)
{
    return mi_open_comm(&xxx_state, sizeof(priv_t),
                        devp, flag, sflag, crp);
}

int
xxx_close(queue_t *q, int oflag, cred_t *crp)
{
    struct priv *p = (struct priv *) q->q_ptr;

    mi_close_unlink(&xxx_state, (caddr_t) p);

    /* do some things with the private structure */
    /* maybe even sleep awaiting some condition */

    qprocsoff(q);
    q->q_ptr = WR(q)->q_ptr = NULL;

    mi_close_free((caddr_t) p);
    return (0);
}
\s+1\fP
.fi
.RE
.PP
In the preceding example, the
.BR qclose (9)
procedure,
.IR xxx_close ,
is broken into three phases: the private structure is unlinked from the queues and the global list;
the unlinked private structure is manipulated; and, the private structure is finally freed.
.\"
.\"
.SH CONTEXT
.PP
.BR mi_close_unlink ()
can be called from any context; however, it is intended to be called from within a
.I STREAMS
module or driver
.BR qclose (9)
or
.BR I_UNLINK (9)
procedure, or, at the latest, before the kernel module is unloaded.
.\"
.\"
.SH MP-STREAMS
.PP
.BR mi_close_unlink ()
is MP-safe; however, the caller is responsible for ensuring exclusive access to the passed in
.I STREAMS
private data structure.  It is normally the case that the caller has exclusive access to this
structure when
.BR mi_close_unlink ()
is called from the
.BR qclose (9)
or
.BR I_UNLINK (9)
procedure.
.\"
.\"
.SH NOTICES
.PP
.BR mi_close_unlink ()
is a
.IR MPS \(rg-specific
function:
.B _MPS_SOURCE
must be defined before including DDI/DKI include files to expose this symbol.
.B Linux Fast-STREAMS
must also have been compiled with
.B CONFIG_STREAMS_COMPAT_MPS
or
.B CONFIG_STREAMS_COMPAT_MPS_MODULE
defined.
.\"
.\"
.\".SH IMPLEMENTATION
.\".PP
.\"
.\"
.SH "SEE ALSO"
.PP
.BR mi_open_comm (9),
.BR mi_open_detached (9),
.BR mi_close_free (9),
.BR mi_close_comm (9),
.BR mi_detach (9),
.BR mi_close_detached (9),
.BR mpscompat (9),
.BR STREAMS (9).
.\"
.\"
.SH BUGS
.PP
.BR mi_close_unlink ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR mi_close_unlink ()
is compatible with
.IR MPS \(rg
with the following portability considerations:
.IP \(em \w'\(em\(em'u
The functions performed by
.BR mi_close_unlink ()
are poorly documented in the available literature.  The
.B Linux Fast-STREAMS
implementation may differ largely from existing implementations.
.IP \(em
.BR mi_close_unlink ()
is an
.IR MPS \(rg-specific
function and should not be used by portable
.I STREAMS
drivers and modules.
The more common
.BR zzz ()
function should be used in its stead.
.IP \(em
.BR mi_close_unlink ()
is provided for source level compatibility with
.IR MPS \(rg
for the purpose of porting
.IR MPS \(rg
drivers to
.BR Linux .
Because internal structures and definitions for
.B Linux Fast-STREAMS
.[
lfs
.]
differ from that of
.IR MPS \(rg,
binaries are incompatible.
.IP \(em
.BR mi_close_unlink ()
only provides functionality comparable to
.IR MPS \(rg
for use by
.I STREAMS
drivers and modules.
Any and all functionality provided by
.BR mi_close_unlink ()
in support of
.RI non- STREAMS
devices are not supported.
.PP
See
.BR mpscompat (9)
and
.BR STREAMS (9)
for additional compatibility considerations.
.\"
.\"
.SH CONFORMANCE
.PP
.IR MPS \(rg
DDI documentation.
.\"
.\"
.SH HISTORY
.PP
.BR mi_close_unlink ()
first appeared in
.IR MPS \(rg.
.BR mi_close_unlink ()
is a Mentat, Inc. function that goes all the way back to the
.RI pre- OSF/1
.I Mentat
implementations.
.\"
.\"
.[
$LIST$
.]
.TI
