'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) datab.9.man,v 0.9.2.20 2006/04/05 09:44:10 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:10 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" datab.9.man,v
.\" Revision 0.9.2.20  2006/04/05 09:44:10  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH DATAB 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B datab, dblk_t
\- \fISTREAMS\fP data block structure
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.nf
\fC\s-1
typedef struct free_rtn {
    void (*free_func) (caddr_t);
    caddr_t free_arg;
} frtn_t;

typedef struct datab {
    union {
        struct datab *freep;
        struct free_rtn *frtnp;
    } db_f;
#define         db_freep db_f.freep
#define         db_frtnp db_f.frtnp
    unsigned char *db_base;
    unsigned char *db_lim;
    unsigned char db_ref;       /* shadow reference count */
    unsigned char db_type;
    unsigned char db_class;
    unsigned char db_pad;
    uint db_size;               /* SVR 3 */
    /* Linux Fast-STREAMS specific members */
    atomic_t db_users;          /* actual reference count */
} dblk_t;
/* 18 bytes on 32 bit, 30 on 64 bit */

#define DBLK_REFMIN     0x01    /* Solaris */

#define DB_WASDUPED     0x01    /* UnixWare */
#define DB_2PIECE       0x02    /* UnixWare */
\s+1\fP
.fi
.\"
.\"
.SH MEMBERS
.PP
The following members correspond to
.I SVR 4.2 EFT
members:
.TP \w'\ db_msgaddr\ 'u
.I db_freep
When the data block was allocated with
.BR allocb (9),
then this member points to the data buffer that was allocated.
For allocations of data blocks with message sizes less than
.BR FASTBUF ,
this is a pointer to the internal data buffer following the data block.
.TP
.I db_frtnp
When the data block was allocated with
.BR esballoc (9),
then this member points to the internal data buffer where the
.B free_rtn
structure containing the 
.BR free_func ()
and
.B free_arg
are located.
.TP
.I db_base
A pointer to the data buffer, whether internal or external.
.TP
.I db_lim
A pointer one past the end of the data buffer, whether internal or external.
.TP
.I db_ref
The number of references to this data block (from message blocks).
.TP
.I db_type
The type of data block.  The type can be one of the following values:
.RS
.PP
The following are normal messages:
.TP \w'M_PCSETOPTS(9)\(em'u
.B QNORM
normal message start
(SVR 3)
.PD 0
.TP
.BR M_DATA (9)
data message
(SVR 3)
.TP
.BR M_PROTO (9)
normal protocol message
(SVR 3)
.TP
.BR M_BREAK (9)
break message
(SVR 3)
.TP
.BR M_PASSFP (9)
pass file pointer message
(SVR 3)
.TP
.BR M_EVENT (9)
event message
.TP
.BR M_SIG (9)
signal message
(SVR 3)
.TP
.BR M_DELAY (9)
delay message
(SVR 3)
.TP
.BR M_CTL (9)
control message
(SVR 3)  See
.BR iocblk (9).
.TP
.BR M_IOCTL (9)
IO control message
(SVR 3)  See
.BR iocblk (9).
.TP
.BR M_SETOPTS (9)
set stream head options message
(SVR 3)
.TP
.BR M_RSE (9)
normal reserved message
(SVR 4)
.TP
.BR M_TRAIL (9)
trail message
.TP
.BR M_BACKWASH (9)
backwash direct I/O message
See
.BR wantio (9).
.PD
.PP
The following are priority messages:
.TP \w'M_PCSETOPTS(9)\(em'u
.B QPCTL
priority message start
(SVR 3)
.PD 0
.TP
.BR M_IOCACK (9)
IO control acknowledgement message
(SVR 3)  See
.BR iocblk (9).
.TP
.BR M_IOCNAK (9)
IO control negative acknowledgement message
(SVR 3)  See
.BR iocblk (9).
.TP
.BR M_PCPROTO (9)
priority protocol message
(SVR 3)
.TP
.BR M_PCSIG (9)
priority signal message
(SVR 3)
.TP
.BR M_READ (9)
read message
(SVR 4)
.TP
.BR M_FLUSH (9)
flush message
(SVR 3)
.TP
.BR M_STOP (9)
stop output message
(SVR 3)
.TP
.BR M_START (9)
start output message
(SVR 3)
.TP
.BR M_HANGUP (9)
hangup message
(SVR 3)
.TP
.BR M_ERROR (9)
error message
(SVR 3)
.TP
.BR M_COPYIN (9)
copyin message
(SVR 4)  See
.BR copyreq (9).
.TP
.BR M_COPYOUT (9)
copyout message
(SVR 4)  See
.BR copyreq (9).
.TP
.BR M_IOCDATA (9)
IO control data message
(SVR 4)  See
.BR copyresp (9).
.TP
.BR M_PCRSE (9)
priority reserved message
(SVR 4)
.TP
.BR M_STOPI (9)
stop input message
(SVR 3)
.TP
.BR M_STARTI (9)
start input message
(SVR 3)
.TP
.BR M_PCCTL (9)
priority control message
.TP
.BR M_PCSETOPTS (9)
priority stream head set options message
.TP
.BR M_PCEVENT (9)
priority event
.TP
.BR M_UNHANGUP (9)
undo hangup message
.TP
.BR M_NOTIFY (9)
notification message
.TP
.BR M_HPDATA (9)
high priority data message
.TP
.BR M_LETSPLAY (9)
let's play direct I/O message
See
.BR wantio (9).
.TP
.BR M_DONTPLAY (9)
don't play direct I/O message
See
.BR wantio (9).
.TP
.BR M_BACKDONE (9)
backwash done direct I/O message
See
.BR wantio (9).
.PD
.RE
.TP
.I db_class
Indicates whether the message is a normal or priority message.
.TP
.I db_pad
Padding.
.TP
.I db_size
The size of the data buffer.  This should be the same as the difference
between the
.I db_lim
and
.I db_base
members, but is not always the case under
.IR "SVR 3"
.[
svr3spg
.]
that defined the field.
.PP
The following members are
.B Linux Fast-STREAMS
specific members:
.TP \w'\ db_msgaddr\ 'u
.I db_users
Because
.B Linux
does not have character sized atomic types, this is an integer atomic type
count equivalent to the
.I db_ref
member.  This private member is used for atomic operations on the reference
count, and then it is copied from here to
.IR db_ref .
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
.I STREAMS
messages are composed of a chain of message blocks.  Each message block in the chain corresponds to
a 3-tuple of a
.BR msgb (9)
structure, a
.B datab
structure, and an associated data buffer.  Although there is a 1:1 relationship between a
.B datab
data block and a data buffer, there can be an N:1 relationship between
.BR msgb (9)
message blocks and
.B datab
data blocks.  A
.BR msgb (9)
structure is an instance of a reference to a
.B datab
data block.
.PP
There is a 1:1 relationship between a
.B datab
data block and a data buffer.  The
.B datab
structure holds information about the data buffer that cannot be contained in the data buffer
itself.  Characteristics of the data buffer, such as its size,
.IR db_size ,
its starting address,
.IR db_base ,
its ending address,
.IR db_lim ,
the number of
.B msgb
message blocks referring to it,
.IR db_ref ,
the type of the block,
.IR db_type ,
and a destructor for deallocating the buffer,
.IR db_frtnp ,
are contained in the
.B datab
structure.
.\"
.SS Macros
.PP
Following are some
.IR Solaris \(rg
implementation specific helper macros that are defined in the
.B <sys/strsun.h>
header file:
.TP
.BI DB_BASE( mp );
Return the data buffer base pointer from a message block pointer.  This is the
.I db_base
member listed above.
.TP
.BI DB_LIM( mp );
Return the data buffer limit pointer from a message block pointer.  This is the
.I db_lim
member listed above.
.TP
.BI DB_REF( mp );
Return the data buffer reference count from a message block pointer.  A value of greater than one
indicates that the data buffer is read-only as with the
.I db_ref
listed above.
.TP
.BI DB_TYPE( mp );
Return the data buffer type from a message block pointer.  The type returned is one of the
.I db_type
values listed above.
.\"
.\"
.SH USAGE
.PP
.B datab
structured data blocks are allocated as a 3-tuple with message block allocators such as
.BR allocb (9)
or
.BR esballoc (9).
Within the
.I STREAMS
framework, messages are processed by the queue procedures,
.IR qi_putp (9)
and
.IR qi_srvp (9).
A queue procedure does not normally manipulate data blocks, except to change their type
.RI ( db_type ).
Fields that may be examined
include
.IR db_type ,
.IR db_base ,
.IR db_lim ,
.IR db_ref .
Of these, only
.I db_type
should be altered by a queue procedure.
.PP
When a driver or module
.IR qi_putp (9)
put procedure is passed a message, or
.IR qi_srvp (9)
service procedure takes a message off of the message queue, before processing the message, the
.I db_type
field is examined to determine the type of the message.  Queue procedures are required to process
messages of a given type in accordance with the rules for processing the specific type of message.
Rules for processing the various message types available in
.I STREAMS
are discussed in separate manual pages for each message type, such as
.BR M_FLUSH (9).
.PP
When a driver or module
.IR qi_putp (9)
put or
.IR qi_srvp (9)
service procedure intends to modify the data in the data buffer associated with a
.B datab
data block, it should first check the
.I db_ref
member to see if more than one message block has a reference to the data buffer.  If
.I db_ref
is one
.RB ( 1 ),
then the procedure has a private reference to the data in the data buffer.  If
.I db_ref
is greater than one
.RB ( >1 ),
then the procedure does not have a private reference to the data in the data buffer, so if it
intends to modify the data, it should copy the data with a utility such as
.BR copyb (9)
or
.BR copymsg (9)
to obtain a private reference to the data buffer, and only modify the copied data.
.PP
Specialized utilities that allocate or reallocate data blocks and data buffers access the
.I db_base
and
.I db_lim
fields.  In some cases, these fields might be used by a queue procedure or private utility to reset
the message block pointers,
.IR b_rptr
or
.IR b_wptr ,
into the data buffer.  The difference between the
.I db_lim
and
.I db_base
pointers, represents the maximum size of the data buffer.
.\"
.\"
.SH CONTEXT
.PP
Functions that operate on a message or data block can be called from any context.  However, it is
the caller's responsibility to ensure that the calling thread has exclusive access to the message
block.  When the message block and associated data block have just been removed from a
.BR queue (9)
in a
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedure of the queue, message block exclusivity is normally guaranteed.  If the
.I db_ref
argument of the data block is then one
.RB ( 1 ),
data block and data buffer exclusivity is also normally guaranteed.  Message block, data block and
data buffer exclusivity is guaranteed for a message block freshly allocated with
.BR allocb (9),
or freshly copied with
.BR copyb (9)
or
.BR copymsg (9).
.BR esballoc (9)
guarantees message block and data block exclusivity, but the caller is responsible for data buffer
exclusivity.
.\"
.\"
.SH MP-STREAMS
.PP
Functions that access the
.B datab
structure are MP-safe.  However, it is the caller's responsibility to ensure exclusive access to the
structure and associated data buffer before altering any of the members of the structure or contents
of the data buffer.
.PP
Data blocks allocated with
.BR esballoc (9)
may also require the caller to ensure exclusive access to the external data buffer supplied to the
.BR esballoc (9)
call.
.PP
Duplication of message blocks without copying the data block with functions such as
.BR dupb (9)
or
.BR dupmsg (9),
may result in multiple threads of execution holding a reference to the same data block and buffer.
To ensure that this condition does not exist, the
.I db_ref
member can be examined to determine whether the reference count is one
.RB ( 1 )
indicating that no duplication has occurred, or greater, indicating that duplication has occurred.
A private copy of the data block and buffer can always be obtained by copying them using
.BR copyb (9)
or
.BR copymsg (9)
(but at performance cost).
.\"
.\"
.SH IMPLEMENTATION
.PP
As the message block 3-tuples allocated in a running system largely consists of an equal number of
.BR msgb (9)
message blocks,
.BR datab (9)
data blocks,
and small buffers,
it is efficient to allocate 3-tuples as a block.
.BR "@PACKAGE_TITLE@" ,
following the mechanism described for
.IR "SVR 4"
in
.RI \(lq "The Magic Garden Explained" \(rq,
.[
magic
.]
defines an
.BR mdbblock
structure that contains an
.BR mbinfo
structure containing an
.BR msgb (9)
structure, a
.BR dbinfo
structure containing an
.BR datab
structure, and a
.B FASTBUF
sized, aligned data buffer.
Allocations made by
.BR allocb (9)
or
.BR esballoc (9)
allocate a
.BR mdbblock .
This approach permits one memory cache allocation to occur, where three would otherwise be
necessary, speeding the allocation of message blocks, data blocks and data buffers for the normal
case.
.PP
For implementation details, see the
.BR mdbblock_alloc ()
and
.BR mdbblock_free ()
functions in the
.I src/kernel/strsched.c
source file in the
.B @PACKAGE@-@VERSION@
distribution directory.
.\"
.\"
.SH NOTICES
.PP
Members of the
.B datab
structure should not be accessed directly by
.I STREAMS
drivers or modules.  Portable
.I STREAMS
drivers and modules should, where possible, use the facilities provided for
implementation and architectural independence.
See under
.RI \(lq Macros \(rq,
above.
.PP
The
.I db_ref
member is unreliable and should not be read or written by portable
.I STREAMS
drivers or modules.
It is better to use the
.BR DB_REF ()
macro, described above, because under
.B "@PACKAGE_TITLE@"
this macro accesses the implementation specific atomic
.I db_users
member within the structure.
.PP
The
.IR db_base ", " db_lim " and " db_size
fields should be treated as read-only, and should not be read or written by
portable
.I STREAMS
drivers or modules.
.PP
.I db_type
is the only field that should be referenced or altered by portable
.I STREAMS
drivers or modules.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR msgb (9),
.BR allocb (9),
.BR esballoc (9),
.BR copyb (9),
.BR copymsg (9),
.BR dupb (9),
.BR dupmsg (9),
.BR queue (9),
.IR qi_putp (9),
.IR qi_srvp (9),
.BR M_DATA (9),
.BR M_PROTO (9),
.BR M_BREAK (9),
.BR M_PASSFP (9),
.BR M_EVENT (9),
.BR M_SIG (9),
.BR M_DELAY (9),
.BR M_CTL (9),
.BR M_IOCTL (9),
.BR M_SETOPTS (9),
.BR M_RSE (9),
.BR M_TRAIL (9),
.BR M_BACKWASH (9),
.BR M_IOCACK (9),
.BR M_IOCNAK (9),
.BR M_PCPROTO (9),
.BR M_PCSIG (9),
.BR M_READ (9),
.BR M_FLUSH (9),
.BR M_STOP (9),
.BR M_START (9),
.BR M_HANGUP (9),
.BR M_ERROR (9),
.BR M_COPYIN (9),
.BR M_COPYOUT (9),
.BR M_IOCDATA (9),
.BR M_PCRSE (9),
.BR M_STOPI (9),
.BR M_STARTI (9),
.BR M_PCCTL (9),
.BR M_PCSETOPTS (9),
.BR M_PCEVENT (9),
.BR M_UNHANGUP (9),
.BR M_NOTIFY (9),
.BR M_HPDATA (9),
.BR M_LETSPLAY (9),
.BR M_DONTPLAY (9),
.BR M_BACKDONE (9).
.\"
.\"
.SH COMPATIBILITY
.PP
The
.B datab
structure is compatible with
.IR "SVR 4.2 MP EFT" ,
.[
usldk
.]
and implementations based on
.IR "SVR 4.2" ,
.[
svr42
.]
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.IR OSF/1 \(rg
.[
osfspg
.]
and
.IR MacOT \(rg
.[
macspg
.]
call the
.I db_class
member,
.IR db_iswhat ;
the
.I db_pad
member,
.IR db_filler2 .
.IR OSF/1 \(rg
.[
osfspg
.]
and
.IR MacOT \(rg
.[
macspg
.]
also define
.I db_msgaddr
and
.I db_filler
members that follow
.IR db_size .
.IP ""
Portable
.I STREAMS
drivers and modules will not access any of these fields.  If it is absolutely necessary to access
the
.I db_iswhat
or
.I db_filler2
fields, the following macros should be defined:
.IP ""
.nf
\fC\s-1\
#define db_iswhat   db_class
#define db_filler2  db_pad
\s+1\fP
.fi
.IP \(em
.IR "SVR 3.1"
placed the internal data buffer inside the
.B datab
structure.  It was declared as a
.I db_cache
.B unsigned char
array member containing a maximum of
.B DB_CACHESIZE
bytes.
The internal data buffer has since moved out of the
.B datab
structure, mostly for alignment purposes.
.IP ""
Portable
.I STREAMS
drivers and modules will be written to at least
.IR "SVR 4"
.[
svr4spg
.]
specifications and will not attempt to access a
.I db_cache
member of the
.B datab
structure.
.IP \(em
Only
.IR Solaris \(rg
.[
solspg
.]
documents the
.BR M_EVENT "(9) and " M_PCEVENT (9)
data block types.
These data block types are provided for source compatibility with drivers
written for
.IR Solaris \(rg,
.[
soldoc
.]
and should not be used by portable
.I STREAMS
drivers and modules.
It might be necessary to define
.B _SUN_SOURCE
before including
.B sys/stream.h
to expose these symbols.
.IP ""
Portable
.I STREAMS
drivers and modules will not use the
.BR M_EVENT "(9) and " M_PCEVENT (9)
data block types.
.IP \(em
Only
.IR UnixWare \(rg
.[
uw7spg
.]
documents the
.BR M_TRAIL "(9), " M_PCCTL "(9) and " M_PCSETOPTS (9)
data block types.
These data block types are provided for source compatibility with drivers
written for
.IR UnixWare \(rg,
.[
uw7doc
.]
and should not be used by portable
.I STREAMS
drivers and modules.
It might be necessary to defined
.B _UW7_SOURCE
before including
.B sys/stream.h
to expose these symbols.
.IP ""
Portable
.I STREAMS
drivers and modules will not use the
.BR M_TRAIL "(9), " M_PCCTL "(9) or " M_PCSETOPTS (9)
data block types.
.IP \(em
Only
.IR AIX \(rg
.[
aixspg
.]
documents the
.BR M_BACKWASH "(9), " M_LETSPLAY "(9), " M_DONTPLAY "(9) and " M_BACKDONE (9)
data block types.
These data block types are provided for source compatibility with drivers
written for
.IR AIX \(rg
.[
aixdoc
.]
and should not be used by portable
.I STREAMS
drivers and modules.
It might be necessary to define
.B _AIX_SOURCE
before including
.B sys/stream.h
to expose these symbols.
.IP ""
Portable
.I STREAMS
drivers and modules will not use the
.BR M_BACKWASH "(9), " M_LETSPLAY "(9), " M_DONTPLAY "(9) or " M_BACKDONE (9)
data block types.
.IP \(em
Only
.IR OSF/1 \(rg
.[
osfspg
.]
and
.IR HP-UX \(rg
.[
hpuxspg
.]
document the
.BR M_NOTIFY (9)
data block type.
This data block type is provided for source compatibility with drivers written
for
.IR OSF/1 \(rg
.[
osfdoc
.]
or
.IR HP-UX \(rg
.[
hpuxdoc
.]
and should not be used by portable
.I STREAMS
drivers and modules.
It might be necessary to define
.B _OSF_SOURCE
or
.B _HPUX_SOURCE
before including
.B sys/stream.h
to expose this symbol.
.IP ""
Portable
.I STREAMS
drivers and modules will not use the
.BR M_NOTIFY (9)
data block type.
.IP \(em
Only
.IR OSF/1 \(rg,
.IR HP-UX \(rg
and
.IR "Mac OT" \(rg
document the
.BR M_HPDATA (9)
data block type.
This data block type is provided for source compatibility with drivers written
for
.IR HP-UX \(rg
and
.IR "Mac OT" \(rg,
and should not be used by portable
.I STREAMS
drivers and modules.
It might be necessary to define
.B _HPUX_SOURCE
before including
.B sys/stream.h
to expose this symbol.
.IP ""
Portable
.I STREAMS
drivers and modules will not use the
.BR M_HPDATA (9)
data block type.
.IP \(em
Only
.IR OSF/1 \(rg
and
.IR Solaris \(rg
document the
.BR M_UNHANGUP (9)
data block type.
This data block type is provided for source compatibility with drivers written
for
.IR OSF/1 \(rg
and
.IR Solaris \(rg,
and should not be used by portable
.I STREAMS
drivers and modules.
It might be necessary to define
.B _OSF_SOURCE
or
.B _SUN_SOURCE
before including
.B sys/stream.h
to expose this symbol.
.IP ""
Portable
.I STREAMS
drivers and modules will not use the
.BR M_UNHANGUP (9)
data block type.
.IP \(em
The numbering of the following message types is consistent across
.IR "SVR 3" ,
.IR "SVR 4" ,
.[
svr4spg
.]
.IR AIX \(rg,
.[
aixdoc
.]
.IR HP-UX \(rg,
.[
hpuxspg
.]
.IR IRIX \(rg,
.[
irixdoc
.]
.IR OSF/1 \(rg,
.[
osfdoc
.]
.IR Solaris \(rg,
.[
soldoc
.]
.IR SUPER-UX  \(rg,
.[
suxdoc
.]
.IR UnixWare \(rg,
.[
uw7doc
.]
.IR MacOT \(rg,
.[
macdoc
.]
.IR UXP/V \(rg,
.[
uxpdoc
.]
and current versions of
.IR LiS ,
.[
lis
.]
(but not older versions of
.I LiS
that had broken message type numbering):
.BR QNORM ,
.BR M_DATA (9),
.BR M_PROTO (9),
.BR QPCTL ,
.BR M_IOCACK (9),
.BR M_IOCNAK (9),
.BR M_PCPROTO (9),
.BR M_PCSIG (9),
.BR M_FLUSH (9),
.BR M_STOP (9),
.BR M_START (9),
.BR M_HANGUP (9),
and
.BR M_ERROR (9).
.IP ""
The following are consistent across all but
.IR OSF/1 \(rg,
.[
osfdoc
.]
which appears to have transliterated octal numbers to hexadecimal:
.BR M_BREAK (9),
.BR M_PASSFP (9),
.BR M_SIG (9),
.BR M_DELAY (9),
.BR M_CTL (9),
.BR M_IOCTL (9),
.BR M_SETOPTS (9),
and
.BR M_RSE (9).
.IP ""
The following are numbered differently only for
.IR OSF/1 \(rg,
.IR HP-UX \(rg,
and
.IR MacOT \(rg,
and, thus, have binary compatibility issues with those implementations only:
.BR M_READ (9),
.BR M_COPYIN (9),
.BR M_COPYOUT (9),
.BR M_IOCDATA (9),
.BR M_PCRSE (9),
.BR M_STOPI (9),
.BR M_STARTI (9).
.IP ""
.IR "SVR 3"
numbered
.BR M_STOPI (9)
and
.BR M_STARTI (9)
differently as well.
.IP ""
Of the implementation specific message types,
.B @PACKAGE_TITLE@
retains the same number on
.BR M_EVENT (9),
.BR M_TRAIL (9),
.BR M_BACKWASH (9),
.BR M_PCCTL (9),
.BR M_PCSETOPTS (9),
.BR M_LETSPLAY (9),
.BR M_DONTPLAY (9),
.BR M_BACKDONE (9),
.BR M_PCTTY (9).
So, even though these are implementation-specific, there are no binary compatibility issues
associated with these message types.
.IP ""
Some implementation-specific messages have been renumbered so as not to overlap with others.  Thus,
these have binary compatibility issues with their original implementations:
.BR M_PCEVENT (9),
.BR M_UNHANGUP (9),
.BR M_NOTIFY (9),
.BR M_HPDATA (9).
Of these,
.BR M_PCEVENT (9)
is obsolete,
.BR M_HPDATA (9)
is private to the
.IR OSF/1 \(rg
Stream head,
and
.BR M_NOTIFY (9)
is not supported.  The only real issue here is
.BR M_UNHANGUP (9)
that is a
.IR Solaris \(rg
message that conflicts in numbering with the
.IR UnixWare \(rg
.BR M_PCSETOPTS (9)
message, both of which are supported at the
Stream head by
.BR "@PACKAGE_TITLE@" .
.IP ""
All in all the numbering selected by
.B @PACKAGE_TITLE@
is fairly consistent and provides the best fit with the least binary compatibility issues across
this wide range of implementations.
Portable
.I STREAMS
drivers and modules can use the core message types with disregard, however, caution should be
exercised with binary implementations (i.e., firmware) intended to operate with
.IR OSF/1 \(rg,
and
.IR HP-UX \(rg,
on
.BR M_READ (9),
.BR M_COPYIN (9),
.BR M_COPYOUT (9),
.BR M_IOCDATA (9),
.BR M_PCRSE (9),
.BR M_STOPI (9),
and
.BR M_STARTI (9)
messages, and with
.IR Solaris \(rg,
on the
.BR M_UNHANGUP (9)
message.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 EFT" .
.[
svr42
.]
.\"
.\"
.SH HISTORY
.PP
The data block types in the
.I db_type
field were extended in
.IR "SVR 4.0 STREAMS" .
.[
svr4spg
.]
.PP
The
.B datab
structure was introduced in
.IR "SVR 3" .
.[
svr3
.]
.\"
.\"
.[
$LIST$
.]
.TI
