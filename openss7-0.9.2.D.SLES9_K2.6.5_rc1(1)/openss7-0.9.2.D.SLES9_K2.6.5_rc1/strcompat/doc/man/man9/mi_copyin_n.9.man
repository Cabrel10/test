'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) mi_copyin_n.9.man,v 0.9.2.3 2006/04/05 09:43:33 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:43:33 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" mi_copyin_n.9.man,v
.\" Revision 0.9.2.3  2006/04/05 09:43:33  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database strcompat.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so strcompat.macros
.\"
.\"
.TH MI_COPYIN_N 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B mi_copyin_n
\- copy data from a user buffer
.\"
.\"
.SH SYNOPSIS
.PP
.B #define _MAC_SOURCE
.br
.B #include <sys/ddi.h>
.br
.B #include <sys/macddi.h>
.HP
.BI "void mi_copyin_n(queue_t *" q ", mblk_t *" mp ", size_t " offset ", size_t " len );
.\"
.\"
.SH ARGUMENTS
.PP
.TP \w'offset\ \ 'u
.I q
the current write-side queue whose put or service procedure within which
.BR mi_copyin_n ()
is being called.
.TP
.I mp
a pointer to the message block that contains the
.BR M_IOCDATA (9)
message being processed.  This is the message that was passed to the write-side put or service
procedure within which
.BR mi_copyin_n ()
is invoked.
.TP
.I offset
an offset into the original user-space memory extent from the previous
.BR mi_copyin (9)
operation from which data will be copied.
message.
.TP
.I len
the number of bytes to copy in from user space.
.\"
.\"
.SH DESCRIPTION
.PP
.BR mi_copyin_n ()
is one of a set of helper functions that support transparent input-output controls (see
.BR ioctl (2)
and
.BR streamio (9))
that includes
.BR mi_copyin (9),
.BR mi_copyout (9),
.BR mi_copyout_alloc (9),
.BR mi_copy_done (9),
.BR MI_COPY_CASE (9),
.BR mi_copy_set_rval (9)
and
.BR mi_copy_state (9).
.PP
.BR mi_copyin_n ()
is used to copy data from a user-space to the kernel.  When a module or driver put or service
procedure first receives a
.BR M_IOCTL (9)
message, the
.BR mi_copyin (9)
function is used, if necessary, to generate an upstream
.BR M_COPYIN (9)
request to the stream head.
In the event that the entire length of the data to be copied in is not known when the first
.BR mi_copyin (9)
operation is generated,
.BR mi_copyin_n ()
may be used to copyin additional portions of the original user memory extent.
.\"
.\"
.SH USAGE
.PP
.BR mi_copyin_n ()
is only used in conjunction with the other mi_copy helper functions:
.BR mi_copyin (9),
.BR mi_copyout (9),
.BR mi_copyout_alloc (9),
.BR mi_copy_done (9),
.BR MI_COPY_CASE (9),
.BR mi_copy_set_rval (9)
and
.BR mi_copy_state (9).
.PP
.BR mi_copyin_n ()
is used for
.B TRANSPARENT
input output controls where the size of the data passed by the user is not known until the initial
portion of the passed in data is copied in.
For
.RB non- TRANSPARENT
.RI ( I_STR )
input output controls, this is not a problem, because the length of the passed in data is provided
directly by the user (see
.BR streamio (7)).
.\"
.\"
.SH RETURN
.PP
.BR mi_copyin_n ()
returns
.BR void .
.\"
.\"
.SH ERRORS
.PP
.BR mi_copyin_n ()
fails when passed invalid pointers.  When
.BR mi_copyin_n ()
fails, it panics the kernel.
If
.BR mi_copyin_n ()
fails due to an recoverable error, it issues a
.BR M_IOCNAK (9)
message upstream to terminate the
.BR ioctl (2)
operation with the appropriate error code.
The error code returned can be one of the follolwing values:
.TP
.B ENOMEM
.TP
.B ENOSTR
.\"
.\"
.SH EXAMPLE
.PP
The following example illustrates the use of
.BR mi_copyin_n ().
In the example, the user passes a variable length data structure to the
.BR ioctl (2)
call as either a
.B TRANSPARENT
or
.RB non- TRANSPARENT
input output control.
The example is taken directly from the
.BR strapush (9)
structure that is used by the
.BR sad (4)
driver.  The
.BR strapush (9)
structure is defined as follows:
.PP
.nf
\fC\s-1
struct strapush {
    unsigned int sap_cmd;
    major_t sap_major;
    minor_t sap_minor;
    minor_t sap_lastminor;
    unsigned int sap_npush;
    char sap_list[MAXAPUSH][FMNAMSZ + 1];
};
\s+1\fP
.fi
.PP
This structure is used to set an autopush list using the
.B SAD_SAP
input output control on the
.BR sad (4)
driver.  The
.BR sad (4)
driver specifications require the caller to pass the entire array to the
.B SAD_SAP
input output control, regardless of the number of significant elements in the array; however, for
the purpose of this example, we assume that this restriction is relaxed and the caller can provide
a structure sized to only the significant number of elements.
.PP
Following is a write-side queue put and service procedure fragment that will perform the necessary
actions using
.BR mi_copyin_n ()
to copy in the variable sized structure:
.PP
.nf
\fC\s-1
int process_write(queue_t *q, mblk_t *mp)
{
    switch (mp->b_datap->db_type) {
    case M_IOCTL:
    {
        struct iocblk *iocp = (typeof(iocp)) mp->b_rptr;
        switch (iocp->ioc_cmd) {
        case SAD_SAP:
        {
            struct strapush *s = NULL;
            size_t len = sizeof(*s)
                - sizeof(s->sap_list);
            mi_copyin(q, mp, NULL, len);
            break;
        }
        }
    }
    case M_IOCDATA:
    {
        struct iocblk *iocp = (typeof(iocp)) mp->b_rptr;
        switch (iocp->ioc_cmd) {
        case SAD_SAP:
        {
            struct strapush *s = mp->b_cont->b_rptr;
            mblk_t *bp = NULL;
            switch (mi_copy_state(q, mp, &bp)) {
            case -1:
                break;
            case MI_COPY_CASE(MI_COPY_IN, 1):
            {
                size_t len = s->sap_npush * (FMNAMSZ + 1);
                size_t ofs = sizeof(*s)
                    - sizeof(s->sap_list);
                /* save initial elements in priv */
                mi_copyin_n(q, mp, ofs, len);
                break;
            }
            case MI_COPY_CASE(MI_COPY_IN, 2):
            {
                /* process remaining elements */
                mi_copy_done(q, mp, 0);
                break;
            }
            }
            break;
        }
        }
    }
    }
    return 0;
}
\s+1\fP
.fi
.\"
.\"
.SH CONTEXT
.PP
.BR mi_copyin_n ()
can be called from any context.  Internal operations use non-blocking allocation functions.
.\"
.\"
.SH MP-STREAMS
.PP
.BR mi_copyin_n ()
is MP-safe.  The caller is responsible for ensuring that it has exclusive access to the passed in
message pointer.  When properly invoked from within the write-side queue put or service procedure,
this is normally the case.
.\"
.\"
.SH NOTICES
.PP
.BR mi_copyin_n ()
is a
.IR MacOT \(rg-specific
function:
.B _MAC_SOURCE
must be defined before including DDI/DKI include files to expose this symbol.
.B Linux Fast-STREAMS
must also have been compiled with
.B CONFIG_STREAMS_COMPAT_MAC
or
.B CONFIG_STREAMS_COMPAT_MAC_MODULE
defined.
.\"
.\"
.SH IMPLEMENTATION
.PP
.\"
.\"
.SH "SEE ALSO"
.PP
.BR mi_copy_done (9),
.BR mi_copyout (9),
.BR mi_copyout_alloc (9),
.BR mi_copy_set_rval (9),
.BR mi_copy_state (9),
.BR MI_COPY_CASE (9),
.BR maccompat (9),
.BR STREAMS (9).
.\"
.\"
.SH BUGS
.PP
.BR mi_copyin_n ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR mi_copyin_n ()
is compatible with
.IR MacOT \(rg
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.IP \(em
.IP \(em
.BR mi_copyin_n ()
is an
.IR MacOT \(rg-specific
function and should not be used by portable
.I STREAMS
drivers and modules.
The more common message utility functions
should be used in its stead.
.IP \(em
.BR mi_copyin_n ()
is provided for source level compatibility with
.IR MacOT \(rg
for the purpose of porting
.IR MacOT \(rg
drivers to
.BR Linux .
Because internal structures and definitions for
.B Linux Fast-STREAMS
.[
lfs
.]
differ from that of
.IR MacOT \(rg,
binaries are incompatible.
.IP \(em
.BR mi_copyin_n ()
only provides functionality comparable to
.IR MacOT \(rg
for use by
.I STREAMS
drivers and modules.
Any and all functionality provided by
.BR mi_copyin_n ()
in support of
.RI non- STREAMS
devices are not supported.
.PP
See
.BR maccompat (9)
and
.BR STREAMS (9)
for additional compatibility considerations.
.\"
.\"
.SH CONFORMANCE
.PP
.IR MacOT \(rg
DDI documentation.
.[
macotr
.]
.[
macspg
.]
.\"
.\"
.SH HISTORY
.PP
.BR mi_copyin_n ()
first appeared in
.IR MacOT \(rg.
.\"
.\"
.[
$LIST$
.]
.TI
