% -*- texinfo -*- vim: ft=texinfo
% vim: ft=texinfo nosmartindent nocindent noautoindent tw=120
% =========================================================================
%
% @(#) npi.texi,v 0.9.2.9 2005/05/14 08:26:10 brian Exp
%
% =========================================================================
%
% Copyright (C) 2001-2004  OpenSS7 Corporation <www.openss7.com>
%
% All Rights Reserved.
%
% Permission is granted to make and distribute verbatim copies of this
% manual provided the copyright notice and this permission notice are
% preserved on all copies.
%
% Permission is granted to copy and distribute modified versions of this
% manual under the conditions for verbatim copying, provided that the
% entire resulting derived work is distributed under the terms of a
% permission notice identical to this one
% 
% Since the Linux kernel and libraries are constantly changing, this
% manual page may be incorrect or out-of-date.  The author(s) assume no
% responsibility for errors or omissions, or for damages resulting from
% the use of the information contained herein.  The author(s) may not
% have taken the same level of care in the production of this manual,
% which is licensed free of charge, as they might when working
% professionally.
% 
% Formatted or processed versions of this manual, if unaccompanied by
% the source, must acknowledge the copyright and authors of this work.
%
% -------------------------------------------------------------------------
%
% U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
% on behalf of the U.S. Government ("Government"), the following
% provisions apply to you.  If the Software is supplied by the Department
% of Defense ("DoD"), it is classified as "Commercial Computer Software"
% under paragraph 252.227-7014 of the DoD Supplement to the Federal
% Acquisition Regulations ("DFARS") (or any successor regulations) and the
% Government is acquiring only the license rights granted herein (the
% license rights customarily provided to non-Government users).  If the
% Software is supplied to any unit or agency of the Government other than
% DoD, it is classified as "Restricted Computer Software" and the
% Government's rights in the Software are defined in paragraph 52.227-19
% of the Federal Acquisition Regulations ("FAR") (or any successor
% regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
% NASA Supplement to the FAR (or any successor regulations).
%
% =========================================================================
% 
% Commercial licensing and support of this software is available from
% OpenSS7 Corporation at a fee.  See http://www.openss7.com/
% 
% =========================================================================
%
% Last Modified 2005/05/14 08:26:10 by brian
%
% =========================================================================
\input texinfo @c -*- texinfo -*-
@c vim: ft=texinfo nosmartindent nocindent noautoindent tw=120
@c %**start of header
@setfilename npi.info
@settitle Network Provider Interface Specification
@c %**end of header

@dircategory OpenGroup
@direntry
* NPI: (npi).                   Network Provider Interface Specification
@end direntry

@include texi/args.texi

@ifinfo
This file documents the X/Open Network Provider Interface.

This is Edition @value{PACKAGE_VERSION}, last updated @value{PACKAGE_DATE}, for
@value{PACKAGE_TITLE} version @value{PACKAGE_VERSION} release
@value{PACKAGE_RELEASE} published by @uref{http://www.openss7.com/,OpenSS7
Corporation}.  This specification was originally published by UNIX International
OSI Work Group in Revision: 2.0.0 (1992/08/17).

Copyright @copyright{} 2001-2004  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock} @*
Copyright @copyright{} 1992       UNIX International, Inc.

All Rights Reserved.

Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on all
copies.

@ignore
Permission is granted to process this file through Tex and print the results,
provided the printed document carries copying permission notice identical to
this one except for the removal of this paragraph (this paragraph not being
relevant to the printed manual).

@end ignore
Permission to use, copy, modify, and distribute this documentation for any
purpose and without fee is hereby granted, provided that the above copyright
notice appears in all copies and that both that copyright notice and this
permission notice appear in supporting documentation, and that the name UNIX
International not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission. UNIX International
makes no representations about the suitability of this documentation for any
purpose. It is provided ``as is'' without express or implied warranty.

Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copying, provided the entire resulting
derived work is distributed under the terms of a permission notice identical to
this one.

Permission is granted to copy and distribute translations of this manual into
another language, under the above conditions for modified versions.
@end ifinfo

@include texi/args.texi

@shorttitlepage Network Provider Interface Specification
@titlepage
@titlefont{Network Provider Interface}
@sp 0.5
@title Specification
@subtitle UNIX International
@subtitle OSI Work Group
@subtitle Revision: 2.0.0
@subtitle August 17, 1992
@sp 0.2
@subtitle Version @value{PACKAGE_VERSION} Edition @value{PACKAGE_RELEASE}
@subtitle Updated @value{PACKAGE_DATE}
@sp 0.2
@subtitle Distributed with Package @value{PACKAGE}-@value{VERSION}
@author Brian Bidulock <@email{bidulock@@openss7.org}> for
@sp 0.2
@author The OpenSS7 Project <@uref{http://www.openss7.org/}>

@page
@vskip 0pt plus 1filll

@subsubheading Published by:

@center UNIX International
@center Waterview Corporate Center
@center 20 Waterview Boulevard
@center Parsippany, NJ 07054
@sp 1
@center for further information, contact:
@center Vice President of Marketing
@sp 1
@center Phone: +1 201-263-8400
@center Fax: +1 201-263-8401
@sp 1

@ignore
@subsubheading International Offices:

@multitable @columnfractions .33 .33 .34
@item

@noindent
UNIX International @*
Asian/Pacific Office @*
Shinei Bldg. 1F @*
Kameido @*
Koto-ku, Tokyo 136 @*
Japan

@noindent
Phone: (81) 3-3636-1122 @*
Fax: (81) 3-3636-1121

@tab

@noindent
UNIX International @*
Australian Office @*
22/74 - 76 Monarch St. @*
Cremorne, NSW 2090 @*
Australia

@noindent
Phone: (61) 2-953-7838 @*
Fax: (61) 2 953-3542

@tab

@noindent
UNIX International @*
Pacific Basin Office @*
Cintech II @*
75 Science Park Drive @*
Singapore Science Park @*
Singapore 0511 @*
Singapore

@noindent
Phone: (32) 2-672-3700 @*
Fax: (32) 2-672-4415

@end multitable

@multitable @columnfractions .5 .5
@item

@noindent
UNIX International @*
European Office @*
25, Avenue de Beaulieu @*
1160 Brussels @*
Belgium

@noindent
Phone: (65) 776-0313 @*
Fax: (65) 776-0421

@tab

@noindent
@ 

@end multitable
@end ignore

@noindent
Copyright @copyright{} 2001-2004  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock} @*
Copyright @copyright{} 1992       UNIX International, Inc. @*

@noindent
All Rights Reserved. @*

@noindent
Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on all
copies.

@noindent
Permission to use, copy, modify, and distribute this documentation for any
purpose and without fee is hereby granted, provided that the above copyright
notice appears in all copies and that both that copyright notice and this
permission notice appear in supporting documentation, and that the name UNIX
International not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission. UNIX International
makes no representations about the suitability of this documentation for any
purpose. It is provided ``as is'' without express or implied warranty.

@noindent
@b{UNIX INTERNATIONAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
DOCUMENTATION, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
IN NO EVENT SHALL UNIX INTERNATIONAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
DOCUMENTATION.}

@subsubheading Notice:

@noindent
This document is based on the UNIX System Laboratories Network Provider
Interface (NPI) specification which was used with permission by the UNIX
International OSI Work Group (UI OSIWG).  Participation inthe UI OSIWG is open
to UNIX International members and other interested parties.  For further
information contact UNIX International at the addresses above.

@noindent
UNIX International is making this documentation available as a reference point
for the industry.  While UNIX International believes that these interfaces are
well defined in this release of the document, minor changes may be made prior to
products conforming to the interfaces being made available from UNIX System
Laboratories or UNIX International members.

@subsubheading Trademarks:

@noindent
UNIX(R) is a registered trademark of UNIX System Laboratories in the United
States and other countries.
X/Open(TM) is a trademark of the X/Open Company Ltd. in the UK and other
countries.
OpenSS7(TM) is a trademark of OpenSS7 Corporation in the United States and other
countries.

@page
@vskip 0pt plus 1filll

@subsubheading Published by:

@sp 1

@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} @*
1469 Jefferys Crescent @*
Edmonton, Alberta  T6L 6T1 @*
Canada @*

@noindent
Copyright @copyright{} 2001-2004  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock} @*
All Rights Reserved.

@noindent
Unauthorized distribution or duplication is prohibited.

@noindent
This software and related documentation is protected by copyright and
distributed under licenses restricting its use, copying, distribution and
decompilation.  No part of this software or related documentation may be
reproduced in any form by any means without the prior written authorization of
the copyright holder, and licensors, if any.

@noindent
The recipient of this document, by its retention and use, warrants that the
recipient will protect this information and keep it confidential, and will not
disclose the information contained in this document without the written
permission of its owner.

@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} reserves the right to revise
this software and documentation for any reason, including but not limited to,
conformity with standards promulgated by various agencies, utilization of
advances in the state of the technical arts, or the reflection of changes in the
design of any techniques, or procedures embodied, described, or referred to
herein.  @uref{http://www.openss7.com/,OpenSS7 Corporation} is under no
obligation to provide any feature listed herein.

@vskip 0pt
@end titlepage
@iftex
@headings off
@everyheading @thistitle @| @thisfile @| @thischaptername
@evenheading @thischapter @| @| @thisfile
@oddheading @thistitle @| @| @thischaptername
@everyfooting Version @value{PACKAGE_VERSION} Rel. @value{PACKAGE_RELEASE} @| @value{PACKAGE_DATE} @| @thispage
@evenfooting @thispage @| @| Version @value{PACKAGE_VERSION} Rel. @value{PACKAGE_RELEASE}
@oddfooting @value{PACKAGE_DATE} @| @| @thispage
@end iftex
@page

@c Define an index of primitives
@defindex pr
@c Define an index of primitive values
@defindex pv
@c Define an index of protocol states
@defindex st

@syncodeindex pr cp
@syncodeindex pv cp
@syncodeindex tp cp
@syncodeindex vr cp

@ifnottex
@node Top
@top Network Provider Interface
@end ifnottex

@menu
* Introduction::
* The Network Layer::
* NPI Services Definition::
* NPI Primitives::
* Diagnostics Requirements::
* References::
* Addendum for OSI Conformance::
* Mapping NPI to ISO 8348 and CCITT X.213::
* State/Event Tables::
* Primitive Precedence Tables::
* NPI Header File Listing::
* Glossary::
* Acronyms::
* Bibliography::
* Index::
@end menu


@node Introduction
@chapter Introduction

This document specifies a STREAMS-based kernel-level instantiation of the
ISO/CCITT network service definition.  The Network Provider Interface (NPI)
enables the user of a network layer service to access and use any of a variety
of conforming network layer service providers without specific knowledge of the
provider's protocol.  The service interface is designed to support any
connection-mode network protocol and connectionless network protocol.  This
interface only specifies access to network layer service providers, and does not
address issues concerning network layer management,protocol performance, and
performance analysis tools.

The specification assumes that the reader is familiar with the OSI reference
model terminology, ISO/CCITT Network Layer Service, and STREAMS.

@section Related Documentation

@itemize ---

@item 1986 CCITT X.213 Recommendation [1]

@item ISO 8348 [2]

@item ISO 8348/AD1 [3]

@item ISO 8473 [4]

@item ISO 8208 [5]

@item ISO 8878 [6]

@item System V Interface Definition, Issue 2 - Volume 3 [7]

@end itemize

@subsection Role

This document specifies an interface that supports the service provided by the
Network Services Definition for Open Systems Interconnection for CCITT
Applications as described in CCITT Recommendation X.213 and ISO 8348 (for CONS)
and ISO8348/Addendum 1 (for CLNS).  These specifications are targeted for use by
developers and testers of protocol modules that require network layer service.

@page
@section Definitions, Acronyms, and Abbreviations

@table @dfn

@item Calling NS user
@cindex Calling NS user
An NS user that initiates a Network Connection (NC).

@item Called NS User
@cindex Called NS User
An NS user with whom a calling NS user wishes to establish a network connection
(NC).

@item CLNP
@cindex CLNP
Connection-less Network Protocol

@item CLNS
@cindex CLNS
Connection-less Network Service

@item CONP
@cindex CONP
Connection Oriented Network Protocol

@item CONS
@cindex CONS
Connection Oriented Network Service

@item DLSAP
@cindex DLSAP
Data Link Service Access Point

@item ISO
@cindex ISO
International Organization for Standardization

@item NC
@cindex NC
Network Connection

@item Network User
@cindex Network User
Kernel level protocol or user level application that is accessing the services
of the network layer.

@item Network Provider
@cindex Network Provider
Network layer entity/entities that provide/s the services of the network
interface.

@item NPI
@cindex NPI
Network Provider Interface

@item NS
@cindex NS
Network Service

@item NIDU
@cindex NIDU
Network Interface Data Unit

@item NSAP
@cindex NSAP
Network Service Access Point

@item NSDU
@cindex NSDU
Network Service Data Unit

@item OSI
@cindex OSI
Open Systems Interconnection

@item QOS
@cindex QOS
Quality of Service

@item STREAMS
@cindex STREAMS
A communication services development facility first available with UNIX System V Release 3

@end table

@node The Network Layer
@chapter The Network Layer

@ifnotinfo
@menu
* Model of the NPI::
* NPI Services::
@end menu
@end ifnotinfo

The Network Layer provides the means to manage the operation of the network.  It
is responsible for the routing and management of data exchange between
network-user entities.

@node Model of the NPI
@section Model of the NPI

The NPI defines the services provided by the network layer to the network-user
at the boundary between the network layer and the network layer user entity.  The
interface consists of a set of primitives defined as STREAMS messages that
provide access to the network layer services, and are transferred between the NS
user entity and the NS provider.  These primitives are of two types; ones that
originate from the NS user, and others that originate from the NS provider.  The
primitives that originate from the NS user make requests to the NS provider, or
respond to an event of the NS provider.  The primitives that originate from the
NS provider are either confirmations of a request or are indications to the NS
user that the event has occurred.  Figure 1 shows the model of the NPI.

@cartouche
@image{npi_fig1,4in} @center @b{Figure 1.  Model of the NPI}
@end cartouche

The NPI allows the NS provider to be configured with any network layer user
(such as the OSI Transport Layer) that also conforms to the NPI.  A network layer
user can also be a user program that conforms to the NPI and accesses the NS
provider via ``putmsg'' and ``getmsg'' system calls.
@fnindex putmsg
@fnindex getmsg

@node NPI Services
@section NPI Services

@ifnotinfo
@menu
* CONS::
* CLNS::
* Local Management::
@end menu
@end ifnotinfo

The features of the NPI are defined in terms of the services provided by the NS
provider,and the individual primitives that may flow between the NS user and the
NS provider.

The services supported by the NPI are based on two distinct modes of
communication, connection (CONS) and connectionless (CLNS).  In addition, the NPI
supports services for local management.

@node CONS
@subsection CONS

The main features of the connection mode communication are:

@enumerate a

@item It is virtual circuit oriented;

@item It provides transfer of data via a pre-established path;

@item It provides reliable data transfer.

@end enumerate

There are three phases to each instance of communication: Connection
Establishment; Data Transfer; and Connection Termination.  Units of data arrive
at their destination in the same order as they departed their source and the
data is protected against duplication or loss of data units within some
specified quality of service.

@node CLNS
@subsection CLNS

The main features of the connectionless mode communication are:

@enumerate a

@item It is datagram oriented;

@item It provides transfer of data in self contained units;

@item There is no logical relationship between these units of data;

@item It is unreliable.

@end enumerate

Connectionless mode communication has no separate phases.  Each unit of data
is transmitted from source to destination independently, appropriate addressing
information is included with each unit of data.  As the units of data are
transmitted independently from source to destination, there are, in general, no
guarantees of proper sequence and completeness of the data stream.

@node Local Management
@subsection Local Management

The NPI specifications also define a set of local management functions that
apply to both CONS and CLNS modes of communication.  These services have local
significance only.

Tables 1 and 2 summarizes the NPI service primitives by their state and service.

@cartouche
@image{npi_tab1} @center @b{Table 1.  Service Primitives for Connection Mode Data Transfer}
@end cartouche

@cartouche
@image{npi_tab2} @center @b{Table 2.  Service Primitives for Connectionless Mode Data Transfer}
@end cartouche

@node NPI Services Definition
@chapter NPI Services Definition

@menu
* Local Management Services Definition::
* Connection-Mode Network Services Definition::
* Connectionless Network Services Definition::
@end menu

This section describes the services of the NPI primitives.  Time-sequence
diagrams that illustrate the sequence of primitives are included.  (Conventions
for the time-sequence diagrams are defined in CCITT X.210 [8].) The format of
the primitives will be defined later in this document.

@node Local Management Services Definition
@section Local Management Services Definition

@menu
* Network Information Reporting Service::
* NS User Bind Service::
* NS User Unbind Service::
* Receipt Acknowledgement Service::
* Options Management Service::
* Error Acknowledgement Service::
@end menu

The services defined in this section are outside the scope of the international
standards.  These services apply to both connection-mode as well as the
connection-less modes of communication.  They are invoked for the
initialization/de-initialization of a stream connected to the NS provider.  They
are also used to manage options supported by the NS provider and to report
information on the supported parameter values.

@node Network Information Reporting Service
@subsection Network Information Reporting Service

This service provides information on the options supported by the NS provider.

@itemize @bullet

@item N_INFO_REQ: This primitive requests that the NS provider return the
values of all the supported protocol parameters.  This request may be invoked
during any phase.

@item N_INFO_ACK: This primitive is in response to the N_INFO_REQ primitive
and returns the values of the supported protocol parameters to the NS user.

@end itemize

The sequence of primitives for network information management is shown in Figure 2.

@cartouche
@image{npi_fig2,4in} @center @b{Figure 2.  Sequence of Primitives; Network Information Reporting Service}
@end cartouche

@node NS User Bind Service
@subsection NS User Bind Service

This service allows a network address to be associated with a stream.  It allows
the NS user to negotiate the number of connect indications that can remain
unacknowledged for that NS user (a connect indication is considered
unacknowledged while it is awaiting a corresponding connect response or
disconnect request from the NS user).  This service also defines a mechanism that
allows a stream (bound to a network address of the NS user) to be reserved to
handle incoming calls only.  This stream is referred to as the listener stream.

@itemize @bullet

@item N_BIND_REQ: This primitive requests that the NS user be bound to a
particular network address, and negotiate the number of allowable outstanding
connect indications for that address.

@item N_BIND_ACK: This primitive is in response to the N_BIND_REQ primitive
and indicates to the user that the specified NS user has been bound to a network
address.

@end itemize

The sequence of primitives for NS user bind service is shown in Figure 3.

@cartouche
@image{npi_fig3,4in} @center @b{Figure 3.  Sequence of Primitives; NS User Bind Service}
@end cartouche

@node NS User Unbind Service
@subsection NS User Unbind Service

This service allows the NS user to be unbound from a network address.

@itemize @bullet

@item N_UNBIND_REQ: This primitive requests that the NS user be unbound from
the network address that it had previously been bound to.

@end itemize

The sequence of primitives for NS user unbind service is shown in Figure 4.

@cartouche
@image{npi_fig4,4in} @center @b{Figure 4.  Sequence of Primitives; NS User Unbind & Receipt Acknowledgement}
@end cartouche

@node Receipt Acknowledgement Service
@subsection Receipt Acknowledgement Service

@itemize @bullet

@item N_OK_ACK: This primitive indicates to the NS user that the previous NS
user originated primitive was received successfully by the NS provider.

@end itemize

An example showing the sequence of primitives for successful receipt
acknowledgement is depicted in Figure 4.

@node Options Management Service
@subsection Options Management Service

This service allows the NS user to manage the QOS parameter values associated
with the NS provider.

@itemize @bullet

@item N_OPTMGMT_REQ: This primitive allows the NS user to select default
values for QOS parameters within the range supported by the NS provider, and to
indicate the default selection of receipt confirmation.

@end itemize

Figure 5 shows the sequence of primitives for network options management.

@cartouche
@image{npi_fig5,4in} @center @b{Figure 5.  Sequence of Primitives; Options Management Service}
@end cartouche

@node Error Acknowledgement Service
@subsection Error Acknowledgement Service

@itemize @bullet

@item N_ERROR_ACK: This primitive indicates to the NS user that a non-fatal
error has occurred in the last NS user originated request or response primitive
(listed in Figure 6), on the stream.

@end itemize

Figure 6 shows the sequence of primitives for the error management primitive.

@cartouche
@image{npi_fig6,4in} @center @b{Figure 6.  Sequence of Primitives; Error Acknowledgement Service}
@end cartouche

@page
@node Connection-Mode Network Services Definition
@section Connection-Mode Network Services Definition

@menu
* Connection Establishment Phase::
* Data Transfer Phase::
* Reset Operation Primitives::
* Connection Termination Phase::
@end menu

This section describes the required network service primitives that define the
CONS interface.

The queue model for CONS is discussed in more detail in CCITT X.213 section 9.2.
The queue model represents the operation of a network connection in the abstract
by a pair of queues linking the two network addresses.  There is one queue for
each direction of information flow.  Each queue represents a flow control
function in one direction of transfer.  The ability of a user to add objects to a
queue will be determined by the behaviour of the user removing objects from that
queue, and the state of the queue.  The pair of queues is considered to be
available for each potential NC.  Objects that are entered or removed from the
queue are either as a result of interactions at the two network addresses, or as
the result of NS provider initiatives.

@itemize @bullet

@item A queue is empty until a connect object has been entered and can be
returned to this state, with loss of its contents, by the NS provider.

@item Objects may be entered into a queue as a result of the actions of the
source NS user, subject to control by the NS provider;

@item Objects may also be entered into a queue by the NS provider.

@item Objects are removed from the queue under the control of the receiving NS user.

@item Objects are normally removed under the control of the NS user in the same
order as they were entered except:

@itemize ---

@item if the object is of a type defined to be able to advance ahead of the
preceding object (however, no object is defined to be able to advance ahead of
another object of the same type), or

@item if the following object is defined to be destructive with respect to the
preceding object on the queue.  If necessary, the last object on the queue will
be deleted to allow a destructive object to be entered - they will therefore
always be added to the queue.  For example, ``disconnect'' objects are defined to be
destructive with respect to all other objects.  ``Reset'' objects are defined to be
destructive with respect to all other objects except ``connect'', ``disconnect'', and
other ``reset'' objects.

@end itemize

@end itemize

Table 3 shows the ordering relationships among the queue model objects.

@cartouche
@image{npi_tab3} @center @b{Table 3.  Ordering Relationships Between Queue Model Objects}
@end cartouche

@node Connection Establishment Phase
@subsection Connection Establishment Phase

A pair of queues is associated with an NC between two network addresses when the
NS provider receives an N_CONNECT_REQ primitive at one of the network addresses
resulting in a connect object being entered into the queue.  The queues will
remain associated with the NC until a N_DISCON_REQ primitive (resulting in a
disconnect object) is either entered or removed from a queue.  Similarly, in the
queue from the called NS user, objects can be entered into the queue only after
the connect object associated with the N_CONN_RES has been entered into the
queue.  Alternatively, the called NS user can enter a disconnect object into the
queue instead of the connect object to terminate the NC.  The NC establishment
procedure will fail if the NS provider is unable to establish an NC,or if the
destination NS user is unable to accept the N_CONN_IND (see NC Release
primitive definition).

@subsubsection User Primitives for Successful Network Connection Establishment

@ 

@itemize @bullet

@item N_CONN_REQ: This primitive requests that the NS provider make a
connection to the specified destination.

@item N_CONN_RES: This primitive requests that the NS provider accept a
previous connection indication.

@end itemize

@subsubsection Provider Primitives for Successful Network Connection Establishment

@ 

@itemize @bullet

@item N_CONN_IND: This primitive indicates to the NS user that a connect
request has been made by a user at the specified source address.

@item N_CONN_CON: This primitive indicates to the NS user that a connect
request has been confirmed on the specified responding address.

@end itemize

The sequence of primitives in a successful NC establishment is defined by the
time sequence diagram as shown in Figure 7.  The sequence of primitives for the
NC response token value determination is shown in Figure 8 (procedures for NC
response token value determination are discussed in sections 4.1.3 and 4.1.4.).

@cartouche
@image{npi_fig7,4in} @center @b{Figure 7.  Sequence of Primitives; Successful NC Establishment}
@end cartouche

@cartouche
@image{npi_fig8,4in} @center @b{Figure 8.  Sequence of Primitives; NC Response Token Value Determination}
@end cartouche

@node Data Transfer Phase
@subsection Data Transfer Phase

Flow control on the NC is done by management of the queue capacity, and by
allowing objects of certain types to be inserted to the queues, as shown in
Table 4.

@cartouche
@image{npi_tab4} @center @b{Table 4.  Flow Control Relationships Between Queue Model Objects}
@end cartouche

@subsubsection User Primitives for Data Transfer

@ 

@itemize @bullet

@item N_DATA_REQ: This primitive requests that the NS provider transfer the
specified data.

@item N_DATACK_REQ: This primitive requests that the NS provider acknowledge
the data that had previously been received with receipt confirmation requested.

@item N_EXDATA_REQ: This primitive requests that the NS provider transfer
the specified expedited network service data unit.

@end itemize

@subsubsection Provider Primitives for Data Transfer

@ 

@itemize @bullet

@item N_DATA_IND: This primitive indicates to the NS user that this message
contains data.

@item N_DATACK_IND: This primitive indicates to the NS user that the remote NS
user has acknowledged the data that had previously been sent with receipt
confirmation requested.

@item N_EXDATA_IND: This primitive indicates to the NS user that this message
unit contains expedited data.

@end itemize

Figure 9 shows the sequence of primitives for successful normal data transfer.
The sequence of primitives may remain incomplete if a N_RESET or N_DISCON
primitive occurs.

@cartouche
@image{npi_fig9,4in} @center @b{Figure 9.  Sequence of Primitives; Data Transfer}
@end cartouche

The sequence of primitives in a successful confirmation of receipt is defined in
the time sequence diagram as shown in Figure 10.

@cartouche
@image{npi_fi10,4in} @center @b{Figure 10.  Sequence of Primitives; Successful Confirmation of Receipt}
@end cartouche

The sequence of primitives as shown above may remain incomplete if an N_RESET
or an N_DISCON primitive occurs (see Table 3).  A NS user must not issue an
N_DATACK_REQ primitive if no N_DATA_IND with confirmation request set has
been received, or if all such N_DATA_IND have been previously acknowledged.
Following a reset procedure (N_RESET_REQ or N_RESET_IND), a NS user may not
issue aN_DATACK_REQ to acknowledge an outstanding N_DATA_IND received before the
reset procedure was signalled.

Note --- The withholding of confirmation of receipt by a NS user can have an
effect on the attainable throughput on the NC.

The sequence of primitives for expedited data transfer is shown in the time
sequence diagram in Figure 11.  This sequence of primitives may remain incomplete
if a N_RESET or N_DISCON primitive is issued.

@cartouche
@image{npi_fi11,4in} @center @b{Figure 11.  Sequence of Primitives; Expedited Data Transfer}
@end cartouche

@node Reset Operation Primitives
@subsection Reset Operation Primitives

The reset service is used by the NS user to resynchronize the use of the NC, or
by the NS provider to report detected loss of unrecoverable data.

The reset procedure involves the following interactions:

@enumerate A

@item a N_RESET_REQ from the NS user, followed by a N_RESET_CON from the
NS provider; or

@item a N_RESET_IND from the NS provider, followed by a N_RESET_RES from the NS
user.

@end enumerate

The complete sequence of primitives depends upon the origin/s of the reset
action.  The reset service may be:

@enumerate 1

@item invoked by one NS user, leading to interaction (A) with that NS user
and interaction (B) with the peer NS user;

@item invoked by both NS users, leading to interaction (A) with both NS users;

@item invoked by the NS provider, leading to interaction (B) with both NS users;

@item invoked by one NS user and the NS provider, leading to interaction (A)
with the originating NS user and (B) with the peer NS user.

@end enumerate

The N_RESET_REQ acts as a synchronization mark in the flow of N_DATA,N_EXDATA,
and N_DATACK primitives transmitted by the issuing NS user; the N_RESET_IND acts
as a synchronization mark in the flow of N_DATA, N_EXDATA,and N_DATACK
primitives received by the receiving NS user.  Similarly, N_RESET_RES acts as a
synchronization mark in the flow of N_DATA, N_EXDATA,and N_DATACK primitives
transmitted by the responding NS user, while the N_RESET_CON acts as a
synchronization mark in the flow of N_DATA, N_EXDATA, and N_DATACK primitives
received by the NS user that originally issued the reset.  The resynchronizing
properties of the reset service are the following:

@enumerate a

@item All N_DATA, N_EXDATA, and N_DATACK primitives issued before issuing
the N_RESET_REQ/N_RESET_RES that have not been delivered to the other NS user
before the N_RESET_IND/N_RESET_CON are issued by the NS provider,should be
discarded by the NS provider.

@item Any N_DATA, N_EXDATA, and N_DATACK primitives issued after
the synchronization mark will not be delivered to the other NS user before the
synchronization mark is received.

@end enumerate

@subsubsection User Primitives for Reset Operations

@ 

@itemize @bullet

@item N_RESET_REQ: This primitive requests that the NS provider reset the
network connection.

@item N_RESET_RES: This primitive indicates to the NS provider that the NS user
has accepted a reset indication.

@end itemize

@subsubsection Provider Primitives for Reset Operations

@ 

@itemize @bullet

@item N_RESET_IND: This primitive indicates to the NS user that the
network connection has been reset.

@item N_RESET_CON: This primitive indicates to the NS user that the reset
request has been confirmed.

@end itemize

The sequence of primitives as shown in Figures 12, 13, 14, and 15 may
remain in complete if a N_DISCON primitive occurs.

@cartouche
@image{npi_fi12,4in} @center @b{Figure 12.  Sequence of Primitives; NS User Invoked Reset}
@end cartouche

@cartouche
@image{npi_fi13,4in} @center @b{Figure 13.  Sequence of Primitives; Simultaneous NS User Invoked Reset}
@end cartouche

@cartouche
@image{npi_fi14,4in} @center @b{Figure 14.  Sequence of Primitives; NS Provider Invoked Reset}
@end cartouche

@cartouche
@image{npi_fi15,4in} @center @b{Figure 15.  Sequence of Primitives; Simultaneous NS User & NS Provider}
@end cartouche

@node Connection Termination Phase
@subsection Connection Termination Phase

The NC release procedure is initialized by the insertion of a disconnect
object (associated with a N_DISCON_REQ) into the queue.  As shown in Table 3, the
disconnect procedure is destructive with respect to other objects in the queue,
and eventually results in the emptying of queues and termination of the NC
connection.

The sequence of primitives depends on the origin of the release action.  The
sequence may be:

@enumerate 1

@item invoked by one NS user, with a request from that NS user leading to an
indication to the other;

@item invoked by both NS users, with a request from each of the NS users;

@item invoked by the NS provider, with an indication to each of the NS users;

@item invoked independently by one NS user and the NS provider, with a request
from the originating NS user and an indication to the other.

@end enumerate

@subsubsection User Primitives for Connection Termination

@ 

@itemize @bullet

@item N_DISCON_REQ: This primitive requests that the NS provider deny
an outstanding request for a connection or disconnect an existing connection.

@end itemize

@subsubsection Provider Primitives for Connection Termination

@ 

@itemize @bullet

@item N_DISCON_IND: This primitive indicates to the NS user that either a
request for connection has been denied or an existing connection has been
terminated.

@end itemize

The sequence of primitives are shown in the time sequence diagrams in Figures
16, 17, 18, and 19.

@cartouche
@image{npi_fi16,4in} @center @b{Figure 16.  Sequence of Primitives; NS User Invoked Release}
@end cartouche

@cartouche
@image{npi_fi17,4in} @center @b{Figure 17.  Sequence of Primitives; Simultaneous NS User Invoked Release}
@end cartouche

@cartouche
@image{npi_fi18,4in} @center @b{Figure 18.  Sequence of Primitives; NS Provider Invoked Release}
@end cartouche

@cartouche
@image{npi_fi19,4in} @center @b{Figure 19.  Sequence of Primitives; Simultaneous NS User & NS Provider}
@end cartouche

A NS user may reject an NC establishment attempt by issuing a N_DISCON_REQ.
The originator parameter in the N_DISCON primitives will indicate NS user invoked
release.  The sequence of events is shown in Figure 20.

@cartouche
@image{npi_fi20,4in} @center @b{Figure 20.  Sequence of Primitives; NS User Rejection of an NC}
@center @b{Establishment Attempt}
@end cartouche

If the NS provider is unable to establish an NC, it indicates this to the
requester by an N_DISCON_IND.  The originator in this primitive indicates an NS
provider invoked release.  This is shown in Figure 21.

@cartouche
@image{npi_fi21,4in} @center @b{Figure 21.  Sequence of Primitives; NS Provider Rejection of an NC}
@center @b{Establishment Attempt}
@end cartouche

@node Connectionless Network Services Definition
@section Connectionless Network Services Definition

The CLNS allows for the transfer of the NS user data in one or both directions
simultaneously without establishing a network connection.  A set of primitives
are defined that carry user data and control information between the NS user and
NS provider entities.  The primitives are modelled as requests initiated by the
NS user and indications initiated by the NS provider.  Indications may be
initiated by the NS provider independently from requests by the NS user.

The connectionless network service consists of one phase.

@subsection User Request Primitives

@ 

@itemize @bullet

@item N_UNITDATA_REQ: This primitive requests that the NS provider send the
data unit to the specified destination.

@end itemize

@subsection Provider Response Primitives

@ 

@itemize @bullet

@item N_UNITDATA_IND: This primitive indicates to the NS user that a data unit
has been received from the specified source address.

@end itemize

Figure 22 shows the sequence of primitives for the connectionless mode of data
transfer.

@cartouche
@image{npi_fi22,4in} @center @b{Figure 22.  Sequence of Primitives; Connectionless Data Transfer}
@end cartouche

@itemize @bullet

@item N_UDERROR_IND: This primitive indicates to the NS user that the data unit
with the specified destination address and QOS parameters produced an error.
This primitive is specific to CLNS.

@end itemize

Figure 23 shows the sequence of primitives for the CLNS error management
primitive.

@cartouche
@image{npi_fi23,4in} @center @b{Figure 23.  Sequence of Primitives; CLNS Error Indication Service}
@end cartouche

@node NPI Primitives
@chapter NPI Primitives

@menu
* Management Primitives::
* CONS Primitive Format and Rules::
* CLNS Primitive Format and Rules::
@end menu

This section describes the format and parameters of the NPI primitives (Appendix
A shows the mapping of the NPI primitives to the primitives defined in ISO 8348
and CCITT X.213).  In addition, it discusses the states the primitive is valid
in, the resulting state, and the acknowledgement that the primitive expects.
(The state/event tables for these primitives are shown in Appendix B.  The
precedence tables for the NPI primitives are shown in Appendix C.) Rules for OSI
conformance are described in Addendum 1 to this document.

Tables 5, 6, and 7 provide a summary of the NS primitives and their parameters.

@cartouche
@image{npi_tab5} @center @b{Table 5.  NC Establishment Network Service Primitives}
@end cartouche

@cartouche
@image{npi_tab6} @center @b{Table 6.  Data Transfer Network Service Primitives}
@end cartouche

@cartouche
@image{npi_tab7} @center @b{Table 7.  NC Release Network Service Primitives}
@end cartouche

@page
@node Management Primitives
@section Management Primitives

@menu
* N_INFO_REQ::
* N_INFO_ACK::
* N_BIND_REQ::
* N_BIND_ACK::
* N_UNBIND_REQ::
* N_OPTMGMT_REQ::
* N_ERROR_ACK::
* N_OK_ACK::
@end menu

These primitives apply both to CONS as well as CLNS.

@node N_INFO_REQ
@subsection Network Information Request

@subsubheading N_INFO_REQ
@prindex N_INFO_REQ

This primitive requests the NS provider to return the values of all supported
protocol parameters (see under N_INFO_ACK), and also the current state of the NS
provider (as defined in Appendix B).  This primitive does not affect the state of
the network provider and does not appear in the state tables.

@subsubheading Format

The format of the message is one M_PCPROTO message block and its structure is
as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_INFO_REQ */
@} N_info_req_t;
@tpindex N_info_req_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@end vtable

@subsubheading Valid States

This primitive is valid in any state where a local acknowledgement is not
pending.

@subsubheading New State

The new state remains unchanged.

@subsubheading Acknowledgements

This primitive requires the NS provider to generate one of the following
acknowledgements upon receipt of the primitive:

@itemize ---

@item Successful:
Acknowledgement of the primitive via the N_INFO_ACK primitive.

@item Non-fatal_errors:
There are no errors associated with the issuance of this primitive.

@end itemize

@page
@node N_INFO_ACK
@subsection Network Information Acknowledgement

@subsubheading N_INFO_ACK
@prindex N_INFO_ACK

This primitive indicates to the NS user any relevant protocol-dependent
parameters.
@footnote{In the future, this primitive will be modified such that it will allow
the NPI to accept either sub-network point of attachment addresses or network
addresses.}
It should be initiated in response to the N_INFO_REQ primitive described above.

@subsubheading Format

The format of this message is one M_PCPROTO message block and its structure is
as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_INFO_ACK */
        ulong NSDU_size;                /* maximum NSDU size */
        ulong ENSDU_size;               /* maximum ENSDU size */
        ulong CDATA_size;               /* connect data size */
        ulong DDATA_size;               /* discon data size */
        ulong ADDR_size;                /* address size */
        ulong ADDR_length;              /* address length */
        ulong ADDR_offset;              /* address offse t */
        ulong QOS_length;               /* length of default QOS values */
        ulong QOS_offset;               /* offset of default QOS values from
                                           the beginning of block */
        ulong QOS_range_length;         /* length of range of QOS values */
        ulong QOS_range_offset;         /* offset of range of QOS values from
                                           the beginning of block */
        ulong OPTIONS_flags;            /* bit masking for options supported */
        ulong NIDU_size;                /* network interface data unit size */
        long SERV_type;                 /* service type */
        ulong CURRENT_state;            /* current state */
        ulong PROVIDER_type;            /* type of provider */
        ulong NODU_size;                /* optimal NSDU size */
        ulong PROTOID_length;           /* length of bound protocol ids */
        ulong PROTOID_offset;           /* offset of bound protocol ids */
        ulong NPI_version;              /* version number of NPI that's
                                           supported */
@} N_info_ack_t;
@tpindex N_info_ack_t

/* Flags to indicate support of NS provider options */
#define REC_CONF_OPT    0x00000001L
#define EX_DATA_OPT     0x00000002L
#define DEFAULT_RC_SEL  0x00000004L

/* Service types supported by the NS provider */
#define N_CONS 1
#define N_CLNS 2

/* Valid provider types */
#define N_SNICFP 1
#define N_SUBNET 2
@end smallexample

@subsubheading Parameters

The above fields have the following meaning:

@vtable @var

@item PRIM_type
Indicates the primitive type.

@item NSDU_size
Specifies the maximum size (in octets) of a Network Service Data Unit (NSDU)
supported by the NS provider.

@item ENSDU_size
Specifies the maximum size (in octets) of an Expedited Network Service Data Unit
(ENSDU) supported by the NS provider.

@item CDATA_size
Specifies the maximum number of octets of data that may be associated with
connection establishment primitives.

@item DDATA_size
Specifies the maximum number of octets of data that may be associated with the
disconnect primitives.

@item ADDR_size
Specifies the maximum size (in decimal digits) of a network address.

@item ADDR_length
Specifies the length in bytes of the network address bound on the STREAM on
which the N_INFO_REQ was issued (a network address is bound to a STREAM via a
N_BIND_REQ).

@item ADDR_offset
Specifies the offset of the bound network address from the beginning of the
M_PCPROTO message block (this field should be ignored if the ADDR_length field
is zero).

@item QOS_length
in an addendum to this document.  In the connection-mode environment, when this
primitive is invoked before the NC is established on the stream, the values
returned specify the the default values supported by the NS provider.  When this
primitive is invoked after a NC has been established on the stream, the values
returned indicate the negotiated values for the QOS parameters.  In the
connection-less environment, these values represent the default or the selected
QOS parameter values.  In case a QOS parameter is not supported by the NS
Provider, a value of QOS_UNKNOWN will be returned.  In the case where no QOS
parameters are supported by the NS provider, this field will be zero.

@item QOS_offset
Indicates the offset of the QOS parameters from the beginning of the M_PCPROTO
message block.

@item QOS_range_length
Indicates the length in bytes, of the available range of QOS parameters values
supported by the NS provider.  These ranges are used by the NS user to select QOS
parameter values that are valid with the NS provider.  QOS parameter values are
selected, or the default values altered via the N_OPTMGMT_REQ primitive.  In the
connection-mode environment, the values for end-to-end QOS parameters may be
specified with the N_CONN primitives for negotiation.  If the NS provider does
not support a certain QOS parameter, its value will be set to QOS_UNKNOWN.  In
the case where no QOS parameters are supported by the NS provider, the length
of this field will be zero.

@item QOS_range_offset
Indicates the offset of the range of QOS parameter values from the beginning of
the M_PCPROTO message block.

@item OPTIONS_flags
Defines flags that indicate whether the options described below are supported by
the NS provider.  The possible options are receipt confirmation, expedited data
and default selection for use of receipt confirmation.

@item NIDU_size
This indicates the amount of user data that may be present in a N_DATA primitive.
The NIDU_size should not be larger than the NSDU_size specification.

@item SERV_type
Specifies the service type supported by the NS provider.  The possible values can
be N_CONS, N_CLNS, (or both as indicated by using N_CONS|N_CLNS).

@item CURRENT_state
This indicates the current state of the NS provider.

@item PROVIDER_type
This indicates the type of NS provider.  The possible values can be N_SNICFP or
N_SUBNET.  The value N_SNICFP indicates that the provider is the Subnetwork
Independent Convergence Function/Protocol sub-layer of the network layer.  The
value N_SUBNET indicates that the provider is a subnetwork.

@item NODU_size
This specifies the optimal NSDU size (in octets) of an NSDU given the current
routing information.

@item PROTOID_length
This specifies the length of the protocol ids that were bound using the
N_BIND_REQ.

@item PROTOID_offset
This specifies the offset of the protocol ids that were bound using the
N_BIND_REQ.

@item NPI_version
This indicates the current version of NPI that is supported.

@end vtable

@subsubheading Flags

@vtable @var

@item REC_CONF_OPT
When set, it indicates that the NS provider supports receipt confirmation.

@emph{This flag is used only in the connection-mode environment.}

@item EX_DATA_OPT
When set, it indicates that the NS provider supports expedited data transfer.

@emph{This flag is used only in the connection-mode environment.}

@item DEFAULT_RC_SEL
When set, it indicates that the default selection is for the use of receipt
confirmation for every N_DATA_REQ primitive (This parameter is applicable only
when use of receipt confirmation is successfully negotiated via the N_CONN
primitives).

@emph{This flag is used only in the connection-mode environment.}

@item N_CONS
When set, it indicates that the NS provider supports connection-mode network
services.

@item N_CLNS
When set, it indicates that the NS provider supports connection-less network
services.

@end vtable

@subsubheading Valid States

This primitive is valid in any state in response to a N_INFO_REQ primitive.

@subsubheading New State

The state remains the same.

@page
@node N_BIND_REQ
@subsection Bind Protocol Address Request

@subsubheading N_BIND_REQ
@prindex N_BIND_REQ

This primitive requests that the NS provider bind a NS user entity to a network
address and negotiate the number of connect indications allowed to be outstanding
by the NS provider for the specified NS user entity being bound.

@subsubheading Format

The format of the message is one M_PROTO message block and its structure is as
follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_BIND_REQ */
        ulong ADDR_length;              /* length of address */
        ulong ADDR_offset;              /* offset of address */
        ulong CONIND_number;            /* req # of conn-indications to be
                                           queued */
        ulong BIND_flags;               /* flags associated with N_BIND_REQ */
        ulong PROTOID_length;           /* length of the protocol id */
        ulong PROTOID_offset;           /* offset of protocol id */
@} N_bind_req_t;
@tpindex N_bind_req_t

/* Flags associated with N_BIND_REQ */
#define DEFAULT_LISTENER    0x00000001L
#define TOKEN_REQUEST       0x00000002L
#define DEFAULT_DEST        0x00000004L
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Is the primitive type.

@item ADDR_length
Is the length in bytes of the network address to be bound to the stream.

@item ADDR_offset
Is the offset from the beginning of the M_PROTO block where the network address
begins.

@item CONIND_number
Is the requested number of connect indications allowed to be outstanding by the
NS provider for the specified protocol address.  (If the number of outstanding
connect indications equals CONIND_number, the NS provider need not discard
further incoming connect indications, but may choose to queue them internally
until the number of outstanding connect indications drops below the
CONIND_number.) Only one stream per network address is allowed to have a
CONIND_number value greater than zero.  This indicates to the network provider
that this stream is the listener stream for the NS user.  This stream will be
used by the NS provider for connect indications for that network address.

If a stream is bound as a listener stream, it will not be able to initiate
connect requests.  If the NS user attempts to send an N_CONN_REQ primitive down
this stream, an N_ERROR_ACK message will be sent to the NS user by the NS
provider with an error value of NACCESS.

@emph{This field should be ignored in CLNS.}

@item PROTOID_length
Is the length in bytes of the protocol ids to be bound to the stream.

@item PROTOID_offset
Is the offset from the beginning of the M_PROTO block where the protocol id
begins.

@end vtable

@subsubheading Flags

@vtable @var

@item DEFAULT_LISTENER

When set, this flag indicates that this stream is the ``default listener
stream''.  This stream is used to pass connect indications for all incoming calls
that contain protocol identifiers that are not bound to any other listener, or
when a listener stream with CONIND_number value of greater than zero is not
found.  Also, the default listener will receive all incoming call indications
that contain no user data.

Only one default listener stream is allowed per occurrence of NPI.  An attempt to
bind a default listener stream when one is already bound should result in an
error (of type NBOUND).

@emph{The DEFAULT_LISTENER flag is ignored in CLNS.}

@item TOKEN_REQUEST
When set, this flag indicates to the NS provider that the NS user has requested
that a ``token'' be assigned to the stream (to be used in the NC response
message), and the token value be returned to the NS user via the N_BIND_ACK
primitive.

The token assigned by the NS provider can then be used by the NS user in a
subsequent N_CONN_RES primitive to identify the stream on which the NC is to be
established.

@emph{The TOKEN_REQUEST flag is ignored in CLNS.}

@item DEFAULT_DEST
When set, this flag indicates that this stream is the ``default destination
stream.'' This stream will receive all packets destined for the NSAP specified
in the bind request.  If no NSAP is indicated in the bind request, then this
stream should receive all packets destined to an NSAP which is bound to no other
stream.

Only one default destination stream per NSAP is allowed per occurrence of NPI.  An
attempt to bind a default destination stream to an NSAP when one is already
bound should result in an error of type NBOUND.

@emph{The DEFAULT_DEST flag is ignored in the CONS.}

@end vtable

@subsubheading Valid States

This primitive is valid in state NS_UNBND (see Appendix B).

@subsubheading New State

The new state is NE_WACK_BREQ.

@subsubheading Acknowledgements

The NS provider will generate one of the following acknowledgements upon receipt
of the N_BIND_REQ primitive:

@itemize ---

@item Successful:
Correct acknowledgement of the primitive is indicated using the N_BIND_ACK
primitive.

@item Non-fatal errors:
These errors will be indicated using the N_ERROR_ACK primitive.  The applicable
non-fatal errors are as follows:

@vtable @asis

@item NBADADDR
The network address was in an incorrect format or the address contained illegal
information.  It is not intended to indicate protocol errors.

@item NBOUND
The NS user attempted to bind a second stream to a network address with the
CONIND_number set to a non-zero value, or attempted to bind a second stream with
the DEFAULT_LISTENER flag value set to non-zero.

@item NNOADDR
The NS provider could not allocate an address.

@item NACCESS
The user did not have proper permissions for the use of the requested address.

@item NOUTSTATE
The primitive was issued from an invalid state.

@item NSYSERR
A system error has occurred and the UNIX system error is indicated in the
primitive.

@item NNOPROTOID
Protocol identifier could not be allocated.

@end vtable

@end itemize

@page
@node N_BIND_ACK
@subsection Bind Protocol Address Acknowledgement

@subsubheading N_BIND_ACK
@prindex N_BIND_ACK

This primitive indicates to the NS user that the specified network user entity
has been bound to the requested network address and that the specified number of
connect indications are allowed to be queued by the NS provider for the
specified network address.

@subsubheading Format

The format of the message is one M_PCPROTO message block, and its structure is
the following:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_BIND_ACK */
        ulong ADDR_length;              /* address length */
        ulong ADDR_offset;              /* offset of address */
        ulong CONIND_number;            /* connection indications */
        ulong TOKEN_value;              /* NC response token value */
        ulong PROTOID_length;           /* length of protocol id */
        ulong PROTOID_offset;           /* offset from beg. of block */
@} N_bind_ack_t;
@tpindex N_bind_ack_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@item ADDR_length
Is the length of the network address that was bound.

@item ADDR_offset
Is the offset from the beginning of the M_PCPROTO block where the network
address begins.

@item CONIND_number
Is the accepted number of connect indications allowed to be outstanding by the
NS provider for the specified network address.  If its value is zero, this stream
cannot acceptN_CONN_IND messages.  If its value is greater than zero, then the NS
user can accept N_CONN_IND messages up to the value specified in this parameter
before having to respond with a N_CONN_RES or a N_DISCON_REQ message.

@emph{This field should be ignored for CLNS.}

@item TOKEN_value
Conveys the value of the ``token'' assigned to this stream that can be used by
the NS user in a N_CONN_RES primitive to accept a NC on this stream.  It is a
non-zero value, and is unique to all streams bound to the NS provider.

@emph{This field should be ignored for CLNS.}

@item PROTOID_length
Conveys the length of the protocol ids that were bound.

@item PROTOID_offset
Conveys the offset of the protocol ids that were bound.

@end vtable

The proper alignment of the address in the M_PCPROTO message block is not guaranteed.

@subsubheading Bind Rules:

The following rules apply to the binding of the specified network address to the
stream:

@itemize ---

@item If the ADDR_length field in the N_BIND_REQ primitive is zero, then the NS
provider is to assign a network address to the user.

@item The NS provider is to bind the network address as specified in the
N_BIND_REQ primitive.  If the NS provider cannot bind the specified address, it
may assign another network address to the user.  It is the network user's
responsibility to check the network address returned in the N_BIND_ACK primitive
to see if it is the same as the one requested.

@end itemize

The following rules apply to negotiating CONIND_number argument:

@itemize ---

@item The CONIND_number in the N_BIND_ACK primitive must be less than or equal
to the corresponding requested number as indicated in the N_BIND_REQ primitive.

@item Only one stream that is bound to the indicated network address may have a
negotiated accepted number of maximum connect requests greater than zero.  If a
N_BIND_REQ primitive specifies a value greater than zero, but another stream has
already bound itself to the given network address with a value greater than
zero, the NS provider should assign another protocol address to the user.

@item If a stream with CONIND_number greater than zero is used to accept a
connection,the stream will be found busy during the duration of that connection
and no other streams may be bound to that network address with a CONIND_number
greater than zero.  This will prevent more than one stream bound to the identical
network address from accepting connect indications.

@item A stream requesting a CONIND_number of zero should always be legal.  This
indicates to the NS provider that the stream is to be used to request
connections only.

@item A stream with a negotiated CONIND_number greater than zero may generate
connect requests or accept connect indications.

@end itemize

@emph{If the above rules result in an error condition, then the NS provider must
issue anN_ERROR_ACK primitive to the NS user specifying the error as defined in
the description of the N_BIND_REQ primitive.}

@subsubheading Valid States

This primitive is in response to a N_BIND_REQ primitive and is valid in the
state NS_WACK_BREQ.

@subsubheading New State

The new state is NS_IDLE.

@page
@node N_UNBIND_REQ
@subsection Unbind Protocol Address Request

@subsubheading N_UNBIND_REQ
@prindex N_UNBIND_REQ

This primitive requests that the NS provider unbind the NS user entity that
was previously bound to the network address.

@subsubheading Format

The format of the message is one M_PROTO block, and its structure is as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_UNBIND_REQ */
@} N_unbind_req_t;
@tpindex N_unbind_req_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@end vtable

@subsubheading Valid States

This primitive is valid in the NS_IDLE state.

@subsubheading New State

The new state is NS_WACK_UREQ.

@subsubheading Acknowledgements

This primitive requires the NS provider to generate the following
acknowledgements upon receipt of the primitive:

@itemize ---

@item Successful:
Correct acknowledgement of the primitive is indicated via the N_OK_ACK
primitive, @pxref{N_OK_ACK}.

@item Unsuccessful (Non-fatal errors):
These errors will be indicated via the N_ERROR_ACK primitive.  The applicable
non-fatal errors are as follows:

@vtable @asis

@item NOUTSTATE
The primitive was issued from an invalid state.

@item NSYSERR
A system error has occurred and the UNIX system error is indicated in the
primitive.

@end vtable

@end itemize

@page
@node N_OPTMGMT_REQ
@subsection Network Options Management Request

@subsubheading N_OPTMGMT_REQ
@prindex N_OPTMGMT_REQ

This primitive allows the NS user to manage the QOS parameter values associated
with the stream.

@subsubheading Format

The format of the message is one M_PROTO message block, and its structure is
as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_OPTMGMT_REQ */
        ulong QOS_length;               /* length of QOS values */
        ulong QOS_offset;               /* offset of QOS values */
        ulong OPTMGMT_flags;            /* default receipt conf. selection */
@} N_optmgmt_req_t;
@prindex N_optmgmt_req_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@item QOS_length
Indicates the length of the default values of the QOS parameters as selected by
the NS user.  In the connection-mode environment these values will be used in
subsequent N_CONN_REQprimitives on the stream that do not specify values for
these QOS parameters.  In the connection-less environment, these values represent
the selected QOS values that would apply to each unit data transmission.  If the
NS user cannot determine the value of a QOS parameter, its value should be set
to QOS_UNKNOWN.  If the NS user does not specify any QOS parameter values, the
length of this field should be set to zero.

@item QOS_offset
Indicates the offset of the QOS parameters from the beginning of the M_PROTO
message block.

@end vtable

@subsubheading Flags

@vtable @var

@item DEFAULT_RC_SEL
When set, it indicates to the NS provider that the NS user's default selection
is for the use of receipt confirmation with every N_DATA_REQ message (applicable
only when its use is successfully negotiated via the N_CONN primitives).  This
default indication is used only when the M_PROTO message block is not present in
the N_DATA_REQ primitive.

@emph{This flag should be ignored in the connection-less environment.}

@end vtable

@subsubheading Valid States

This primitive is valid in the NS_IDLE state.

@subsubheading New State

The new state is NS_WACK_OPTREQ.

@subsubheading Acknowledgements

The N_OPTMGMT_REQ primitive requires the NS provider to generate one of the
following acknowledgements upon receipt of the primitive:

@itemize ---

@item Successful:
Acknowledgement is via the N_OK_ACK primitive.  At successful completion, the
resulting state is NS_IDLE.

@item Non-fatal errors:
These errors are indicated in the N_ERROR_ACK primitive.  The resulting state
remains unchanged.  The applicable non-fatal errors are defined as follows:

@vtable @asis

@item NOUTSTATE
The primitive was issued from an invalid state.

@item NBADQOSPARAM
The QOS parameter values specified are outside the range supported by the NS provider.

@item NBADQOSTYPE
The QOS structure type is not supported by the NS provider.

@item NSYSERR
A system error has occurred and the UNIX system error is indicated in the primitive.

@end vtable

@end itemize


@page
@node N_ERROR_ACK
@subsection Error Acknowledgement

@subsubheading N_ERROR_ACK
@prindex N_ERROR_ACK

This primitive indicates to the NS user that a non-fatal error has occurred in
the last network-user-originated primitive.  This may only be initiated as an
acknowledgement for those primitives that require one.  It also indicates to the
user that no action was taken on the primitive that caused the error.

@subsubheading Format

The format of the message is one M_PCPROTO message block, and its structure is
asfollows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_ERROR_ACK */
        ulong ERROR_prim;               /* primitive in error */
        ulong NPI_error;                /* NPI error code */
        ulong UNIX_error;               /* UNIX system error code */
@} N_error_ack_t;
@tpindex N_error_ack_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Identifies the primitive type

@item ERROR_prim
Identifies the primitive type that caused the error.

@item NPI_error
Contains the Network Provider Interface error code.

@item UNIX_error
Contains the UNIX system error code.  This may only be non-zero if the NPI_error
is equal to NSYSERR.

@end vtable

@subsubheading Valid Error Codes

@emph{The following error codes are allowed to be returned:}

@vtable @asis

@item NBADADDR
The network address as specified in the primitive was in an incorrect format, or
the address contained illegal information.

@item NBADOPT
The options values as specified in the primitive were in an incorrect format, or
they contained illegal information.

@item NBADQOSPARAM
The QOS values specified are outside the range supported by the NS provider.
illegal.

@item NBADQOSTYPE
The QOS structure type is not supported by the NS provider.

@item NBADTOKEN
Token used is not associated with an open stream.

@item NNOADDR
The NS provider could not allocate an address.

@item NACCESS
The user did not have proper permissions.

@item NOUTSTATE
The primitive was issued from an invalid state.

@item NBADSEQ
The sequence number specified in the primitive was incorrect or illegal.

@item NBADFLAG
The flags specified in the primitive were incorrect or illegal.

@item NBADDATA
The amount of user data specified was outside the range supported by the NS
provider.

@item NSYSERR
A system error has occurred and the UNIX system error is indicated in the
primitive.

@item NNOTSUPPORT
Specified primitive type is not known to the NS provider.

@end vtable

@subsubheading Valid States

This primitive is valid in all states that have a pending acknowledgement or
confirmation.

@subsubheading New State

The new state is the same as the one from which the acknowledged request or
response was issued.

@page
@node N_OK_ACK
@subsection Successful Receipt Acknowledgement

@subsubheading N_OK_ACK
@prindex N_OK_ACK

This primitive indicates to the NS user that the previous network-
user-originated primitive was received successfully by the network provider.  It
does not indicate to the NS user any network protocol action taken due to the
issuance of the last primitive.  The N_OK_ACK primitive may only be initiated as
an acknowledgement for those user originated primitives that have no other means
of confirmation.

@subsubheading Format

The format of the message is one M_PCPROTO message block, and its structure is
as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_OK_ACK */
        ulong CORRECT_prim;             /* primitive being acknowledged */
@} N_ok_ack_t;
@tpindex N_ok_ack_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Identifies the primitive.

@item CORRECT_prim
Identifies the successfully received primitive type.

@end vtable

@subsubheading Valid States

This primitive is issued in states
@itemize @bullet
@item NS_WACK_UREQ,
@item NS_WACK_OPTREQ,
@item NS_WACK_RRES,
@item NS_WACK_CRES,
@item NS_WACK_DREQ6,
@item NS_WACK_DREQ7,
@item NS_WACK_DREQ9,
@item NS_WACK_DREQ10, and
@item NS_WACK_DREQ11,
@end itemize
in response to
@itemize @bullet
@item N_UNBIND_REQ,
@item N_RESET_RES,
@item N_CONN_RES, and
@item N_DISCON_REQ
@end itemize
primitives.

@subsubheading New State

The resulting state depends on the current state (see Appendix B, Tables B-7 and
B-8.)

@page
@node CONS Primitive Format and Rules
@section CONS Primitive Format and Rules

@menu
* Connection Establishment Primitives::
* Normal Data Transfer Phase::
* Receipt Confirmation Service Primitives::
* Expedited Data Transfer Service::
* Reset Service::
* Network Connection Release Phase::
@end menu

This section describes the format of the CONS primitives and the rules
associated with these primitives.  The default values of the QOS parameters
associated with a NC may be selected via the N_OPTMGMT_REQ primitive.

@node Connection Establishment Primitives
@subsection Connection Establishment Primitives

@menu
* N_CONN_REQ::
* N_CONN_IND::
* N_CONN_RES::
* N_CONN_CON::
@end menu

The following network service primitives pertain to the establishment of an NC,
provided the NS users exist, and are known to the NS provider.

@node N_CONN_REQ
@subsubsection Network Connection Request

@subsubheading N_CONN_REQ
@prindex N_CONN_REQ

This primitive requests that the NS provider make a network connection to the
specified destination.

@subsubheading Format

The format of the message is one M_PROTO message block followed by one or
more M_DATA blocks for the NS user data transfer.  The specification of the NS
user data is optional.  The NS user can send any integral number of octets of
data within the range supported by the NS provider (see N_INFO_ACK).  If the user
does not specify QOS parameter values, the default values (specified via
N_OPTMGMT_REQ) are used by the NS provider.

The structure of the M_PROTO message block is as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_CONN_REQ */
        ulong DEST_length;              /* destination address length */
        ulong DEST_offset;              /* destination address offset */
        ulong CONN_flags;               /* bit masking for options flags */
        ulong QOS_length;               /* QOS parameters' length */
        ulong QOS_offset;               /* QOS parameters' offset */
@} N_conn_req_t;
@tpindex N_conn_req_t

/* Flags to indicate if options are requested */
#define REC_CONF_OPT    0x00000001L
#define EX_DATA_OPT     0x00000002L
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@item DEST_length
Indicates the length of the destination address parameter that conveys an address
identifying the NS user to which the NC is to be established.  This field will
accommodate variable length addresses within a range supported by the NS
provider.

@item DEST_offset
Is the offset of the destination address from the beginning of the M_PROTO
message block.

@item QOS_length
Indicates the length of the QOS parameters values that apply to the NC being
requested.  If the NS user cannot determine the value of a QOS parameter, its
value should be set to QOS_UNKNOWN.  If the NS user does not specify any QOS
parameter values, the length of this field should be set to zero.

@item QOS_offset
Indicates the offset of the QOS parameters from the beginning of the M_PROTO
message block.

@end vtable

@subsubheading Flags

@vtable @var

@item REC_CONF_OPT
The receipt confirmation selection parameter indicates the use/availability of
the receipt confirmation service on the NC.  The receipt confirmation service
must be supported by the NS provider to be used on the NC.

@item EX_DATA_OPT
Indicates the use of the expedited data transfer service on the NC.  The
expedited data transfer service must be provided by the NS provider for it to be
used on the NC.

@end vtable

@subsubheading Valid States

This primitive is valid in state NS_IDLE.

@subsubheading New State

The new state is NS_WCON_CREQ.

@subsubheading Acknowledgements

The following acknowledgements are valid for this primitive:

@itemize ---

@item Successful NC Establishment:
This is indicated via the N_CONN_CON primitive.  This results in the data transfer
state.

@item Unsuccessful NC Establishment:
This is indicated via the N_DISCON_IND primitive.  For example, a connection may
be rejected because either the called NS user cannot be reached, or the NS
provider and/or the called NS user did not agree with the specified QOS.  This
results in the idle state.

@item Non-fatal errors:
These are indicated via the N_ERROR_ACK primitive.  The applicable non-fatal
errors are defined as follows:

@vtable @asis

@item NACCESS
The user did not have proper permissions for the use of the requested address or
options.

@item NBADQOSPARAM
The QOS parameter values specified are outside the range supported by the NS
provider.

@item NBADQOSTYPE
The QOS structure type is not supported by the NS provider.

@item NBADADDR
The network address was in an incorrect format or contained illegal information.
It is not intended to indicate NC errors, such as an unreachable destination.
These errors types are indicated via the N_DISCON_IND primitive.

@item NBADOPT
The options were in an incorrect format, or they contained illegal information.

@item NOUTSTATE
The primitive was issued from an invalid state.

@item NBADDATA
The amount of user data specified was outside the range supported by the NS
provider.

@item NSYSERR
A system error has occurred and the UNIX system error is indicated in the
primitive.

@end vtable

@end itemize

@page
@node N_CONN_IND
@subsubsection Network Connection Indication

@subsubheading N_CONN_IND
@prindex N_CONN_IND

This primitive indicates to the destination NS user that a network connect
request has been made by the user at the specified source address.

@subsubheading Format

The format of this message is one M_PROTO message block followed by one or
more M_DATA blocks for NS user data.  The specification of NS user data is
optional.  The NS user can send any integral number of octets of data within the
range supported by the NS provider.  The NS user data will only be present if the
corresponding N_CONN_REQ had NS user data parameter specified, and their data
will be identical.

The structure of the M_PROTO message block is as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_CONN_IND */
        ulong DEST_length;              /* destination address length */
        ulong DEST_offset;              /* destination address offset */
        ulong SRC_length;               /* source address length */
        ulong SRC_offset;               /* source address offset */
        ulong SEQ_number;               /* sequence number */
        ulong CONN_flags;               /* bit masking for options flags */
        ulong QOS_length;               /* QOS parameters' length */
        ulong QOS_offset;               /* QOS parameters' offset */
@} N_conn_ind_t;
@tpindex N_conn_ind_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@item DEST_length
Indicates the length of the destination address parameter that conveys an address
identifying the NS user to which the NC is to be established.

@item DEST_offset
Is the offset of the destination address from the beginning of theM_PROTO
message block.

@item SRC_length
The source address parameter conveys the network address of the NS user from
which the NC has been requested.  The semantics of the value in the N_CONN_IND
primitive is identical to the value associated with the stream on which the
N_CONN_REQ was issued.

@item SRC_offset
Is the offset of the destination address from the beginning of theM_PROTO
message block.

@item SEQ_number
Identifies the sequence number that can be used by the NS user to associate this
message with the N_CONN_RES or N_DISCON_REQ primitive that is to follow.  This
value must be unique among the outstanding N_CONN_IND messages.  The use of this
field allows the NS user to issue the N_CONN_RES or the N_DISCON_REQ messages in
any order.

@item QOS_length
Indicates the length of the QOS parameters values that are negotiated during NC
establishment.  If the destination NS user does not agree to the range of QOS
values specified by the source NS user in the N_CONN_REQ primitive, it will
reject the NC establishment by invoking a N_DISCON_REQ primitive(the originator
parameter in the N_DISCON_REQ primitive will indicate NS user initiated
release).  If the NS user does not support or cannot determine the value of a QOS
parameter, its value will be set to QOS_UNKNOWN.  If the NS user does not specify
any QOS parameter values, the length of this field should be set to zero.

@item QOS_offset
Indicates the offset of the QOS parameters from the beginning of the M_PROTO
message block.

@end vtable

@subsubheading Flags

@vtable @var

@item REC_CONF_OPT
The receipt confirmation selection parameter indicates the use/availability of
the receipt confirmation service on the NC.  The receipt confirmation service must
be provided in the network service to be used on the NC.

@item EX_DATA_OPT
The expedited data selection parameter indicates the use/ availability of the
expedited data transfer service on the NC.  The expedited data transfer service
must be provided by the NS provider for it to be used on the NC.  Valid States
This primitive is valid in the states NS_IDLE and NS_WRES_CIND.  New State In
both cases the resulting state is NS_WRES_CIND (the number of connect
indications waiting for user response is incremented by one).

@end vtable


@page
@node N_CONN_RES
@subsubsection Network Connection Response

@subsubheading N_CONN_RES
@prindex N_CONN_RES

This primitive allows the destination NS user to request that the network
provider accept a previous connect request.

@subsubheading Format

The format of this message is one M_PROTO message block followed by one or
more M_DATA blocks (for NS user data).  The specification of the NS user data is
optional.

The NS user can send any integral number of octets of data within the range
supported by the NS provider.

The structure of the M_PROTO block is as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_CONN_RES */
        ulong TOKEN_value;              /* NC response token value */
        ulong RES_length;               /* responding address length */
        ulong RES_offset;               /* responding address offset */
        ulong SEQ_number;               /* sequence number */
        ulong CONN_flags;               /* bit masking for options flags */
        ulong QOS_length;               /* QOS parameters' length */
        ulong QOS_offset;               /* QOS parameters' offset */
@} N_conn_res_t;
@tpindex N_conn_res_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@item TOKEN_value
Is used to identify the stream that the NS user wants to establish the NC on.
(Its value is determined by the NS user by issuing a N_BIND_REQ primitive with
the TOKEN_REQUEST flag set.The token value is returned in the N_BIND_ACK).  The
value of this field should be non-zero when the NS user wants to establish the NC
on a stream other than the stream on which the N_CONN_IND arrived.  If the NS
user wants to establish a NC on the same stream that the N_CONN_IND arrived on,
then the value of this field should be zero.

@item RES_length
Indicates the length of the responding address parameter that conveys the network
address of the NS user to which the NC has been established.  Under certain
circumstances, such as call redirection, generic addressing, etc., the value of
this parameter may be different from the destination address
parameter specification in the corresponding N_CONN_REQ.

@item RES_offset
Indicates the offset of the responding address from the beginning of the M_PROTO
message block.

@item SEQ_number
Indicates the sequence number of the N_CONN_RES message.It is used by the NS
provider to associate the N_CONN_RES message with an outstanding N_CONN_IND
message.  An invalid sequence number should result in error with the message type
NBADSEQ.

@item QOS_length
Indicates the length of the QOS parameters values that are negotiated during NC
establishment.  If the NS user does not agree to the QOS values, it will reject
the NC establishment by invoking a N_DISCON_REQ primitive (the originator
parameter in the N_DISCON_REQ primitive will indicate NS user invoked release).
If the NS user cannot determine the value of a QOS parameter, its value should
be set to QOS_UNKNOWN.  If the NS user does not specify any QOS parameter values,
the length of this field should be set to zero.

@item QOS_offset
Indicates the offset of the QOS parameters from the beginning of the M_PROTO
message block.

@end vtable

@subsubheading Flags

@vtable @var

@item REC_CONF_OPT
The receipt confirmation selection parameter indicates the use/availability of
the receipt confirmation service on the NC.  The receipt confirmation service must
be provided in the network service to be used on the NC.

@item EX_DATA_OPT
The expedited data selection parameter indicates the use/availability of the
expedited data transfer service on the NC.  The expedited data transfer service
must be provided by the NS provider for it to be used on the NC.

@end vtable

@subsubheading Valid States

This primitive is valid in state NS_WRES_CIND.

@subsubheading New State

The new state is NS_WACK_CRES.

@subsubheading Acknowledgements

The NS provider should generate one of the following acknowledgements upon
receipt of this primitive:

@itemize ---

@item Successful:
Successful completion is indicated via the N_OK_ACK primitive.

@item Unsuccessful (Non-fatal errors):
Errors are indicated via the N_ERROR_ACK primitive.  The applicable non-fatal
errors are defined as follows:

@vtable @asis

@item NBADOPT
The options were in an incorrect format, or they contained illegal information.

@item NBADQOSPARAM
The QOS parameter values specified are outside the range supported by the NS
provider.

@item NBADQOSTYPE
The QOS structure type is not supported by the NS provider.

@item NBADTOKEN
The token specified is not associated with an open stream.

@item NACCESS
The user did not have proper permissions for the use of the options of the
options or response id.

@item NOUTSTATE
The primitive was issued from an invalid state.

@item NBADDATA
The amount of user data specified was outside the range supported by the NS
provider.

@item NBADSEQ
The sequence number specified in the primitive was incorrect or illegal.

@item NSYSERR
A system error has occurred and the UNIX system error is indicated in the
primitive.

@end vtable

@end itemize


@page
@node N_CONN_CON
@subsubsection Network Connection Confirm

@subheading N_CONN_CON
@prindex N_CONN_CON

This primitive indicates to the source NS user that the network connect request
has been confirmed on the specified responding address.

@subsubheading Format

The format of this message is one M_PROTO message block followed by one or
more M_DATA blocks (for NS user data).  The specification of the NS user data is
optional.

The NS user can send any integral number of octets of NS user data within a
range supported by the NS provider (see N_INFO_ACK).  The NS user data will only
be present if the corresponding N_CONN_RES had NS user data specified with it,
and their data will always be identical.

The structure of the M_PROTO block is as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_CONN_CON */
        ulong RES_length;               /* responding address length */
        ulong RES_offset;               /* responding address offset */
        ulong CONN_flags;               /* bit masking for options flags */
        ulong QOS_length;               /* QOS parameters' length */
        ulong QOS_offset;               /* QOS parameters' offset */
@} N_conn_con_t;
@tpindex N_conn_con_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@item RES_length
Indicates the length of the responding address parameter that conveys the
network address of the NS user entity to which the NC has been established.  The
semantics of the values in the N_CONN_CON is identical to the values in
N_CONN_RES.  Under certain circumstances, such as call redirection,
generic addressing, etc., the value of this parameter may be different from the
destination address parameter specification in the corresponding N_CONN_REQ.

@item RES_offset
Indicates the offset of the responding address from the beginning of the M_PROTO
message block.

@item QOS_length
Indicates the length of the QOS parameters values selected by the responding NS
user.  If the NS provider does not support or cannot determine the selected value
of a QOS parameter, its value will be set to QOS_UNKNOWN.  If the NS provider does
not specify any QOS parameter values, the length of this field should be set to
zero.

@item QOS_offset
Indicates the offset of the QOS parameters from the beginning of the M_PROTO
message block.

@end vtable

@subsubheading Flags

@vtable @var

@item REC_CONF_OPT
The receipt confirmation selection parameter indicates the use/availability of
the receipt confirmation service on the NC.  The receipt confirmation service must
be provided in the network service to be used on the NC.

@item EX_DATA_OPT
The expedited data selection parameter indicates the use/ availability of the
expedited data transfer service on the NC.  The expedited data transfer service
must be provided by the NS provider for it to be used on the NC.  Valid States
This primitive is valid in state NS_WCON_CREQ.  New State The new state is
NS_DATA_XFER.

@end vtable

@page
@node Normal Data Transfer Phase
@subsection Normal Data Transfer Phase

@menu
* N_DATA_REQ::
* N_DATA_IND::
@end menu

The data transfer service primitives provide for an exchange of NS user data
known as NSDUs, in either direction or in both directions simultaneously on a
NC.  The network service preserves both the sequence and the boundaries of the
NSDUs (when the NS provider supports NSDUs).

@node N_DATA_REQ
@subsubsection Normal Data Transfer Request

@subsubheading N_DATA_REQ
@prindex N_DATA_REQ

This user-originated primitive indicates to the NS provider that this message
contains NS user data.  It allows the transfer of NS_user_data between NS users,
without modification by the NS provider.  The NS user must send any integral
number of octets of data greater than zero.  In a case where the size of the NSDU
exceeds the NIDU (as specified by the size of the NIDU_size parameter of the
N_INFO_ACK primitive), the NSDU may be broken up into more than one NIDU.  When
an NSDU is broken up into more than one NIDU, the N_MORE_DATA_FLAG will be set
on each NIDU except the last one.  The RC_flagmay only be set on the last NIDU.

@subsubheading Format

The format of the message is one or more M_DATA blocks.  Use of a M_PROTOmessage
block is optional.  The M_PROTO message block is used for two reasons:

@enumerate 1

@item to indicate that the NSDU is broken into more than one NIDUs, and that the
data carried in the following M_DATA message block constitutes one NIDU;

@item to indicate whether receipt confirmation is desired for the NSDU.

@end enumerate

@subsubheading Guidelines for use of M_PROTO:

The following guidelines must be followed with respect to the use of the M_PROTO
message block:

@enumerate 1

@item The M_PROTO message block need not be present when the NSDU size is
less than or equal to the NIDU size and one of the following is true:

@itemize ---

@item receipt confirmation has been negotiated for non-use (via the
N_CONNprimitives); or

@item receipt confirmation has been successfully negotiated for use or non-use
and the default selection as specified via the N_OPTMGMT primitive is to be used.

@end itemize

@item The M_PROTO message block must be present when:

@itemize ---

@item the NSDU size is greater than the NIDU size;

@item receipt confirmation has been successfully negotiated for use and the
default selection as specified via N_OPTMGMT_REQ primitive needs to be
overridden.

@end itemize

@end enumerate

The structure of the M_PROTO message block, if present, is as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_DATA_REQ */
        ulong DATA_xfer_flags;          /* bit masking for data xfer flags */
@} N_data_req_t;
@tpindex N_data_req_t

/* Data Transfer Flags */
#define N_MORE_DATA_FLAG    0x00000001L
#define N_RC_FLAG           0x00000002L
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@end vtable

@subsubheading Flags

@vtable @var

@item N_MORE_DATA_FLAG
When set, the MORE_DATA_FLAG indicates that the next N_DATA_REQ message (NIDU) is
also part of this NSDU.

@item N_RC_FLAG
By setting this flag on the N_DATA_REQ, the originating NS user can request
confirmation of receipt of the N_DATA primitive.  The receipt is provided by the
N_DATACK primitives.  The parameter may only be present if use of Receipt
Confirmation was agreed by both NS users and the NS provider during NC
establishment.

@end vtable

@subsubheading Valid States

This primitive is valid in the NS_DATA_XFER state.

@subsubheading New State

The resulting state remains the same (NS_DATA_XFER).

@subsubheading Acknowledgements

This primitive does not require any acknowledgements, although it may generate
a fatal error.  This is indicated to the NS user via a M_ERROR STREAMS message
type (specifying an errno value of EPROTO) which results in the failure of
all system calls on that stream.  The applicable errors are defined as follows:

@vtable @asis

@item EPROTO
This indicates one of the following unrecoverable protocol conditions:

@itemize ---

@item The network interface was found to be in an incorrect state.

@item The amount of NS user data associated with the primitive is outside the range
supported by the NS provider (as specified by the NIDU_size parameter
ofN_INFO_ACK primitive).

@item The options requested are either not supported by the NS provider or its use
not specified with the N_CONN_REQ primitive.

@item The M_PROTO message block was not followed by one or more M_DATA message
blocks.

@item The amount of NS user data associated with the current NSDU is outside the
range supported by the NS provider (as specified by the NSDU_sizeparameter if
the N_INFO_ACK primitive.)

@item The N_RC_FLAG and N_MORE_DATA_FLAG were both set in the primitive, or the
flags field contained an unknown value.

@end itemize

@end vtable

NOTE: If the interface is in the NS_IDLE or NS_WRES_RIND states when the provider
receives the N_DATA_REQ primitive, then the NS provider should discard the
request without generating a fatal error.


@page
@node N_DATA_IND
@subsubsection Normal Data Transfer Indication

@subsubheading N_DATA_IND
@prindex N_DATA_IND

This network-provider-originated primitive indicates to the NS user that this
message contains NS user data.  As in the N_DATA_REQ primitive, the NSDU can be
segmented into more than one NIDUs.  The NIDUs are associated with the NSDU by
using theMORE_DATA_FLAG.  The RC_FLAG is allowed to be set only on the last NIDU.

@subsubheading Format

The format of the message is one or more M_DATA message blocks.  The value of the
NS user data field is always the same as that supplied in the corresponding
N_DATA_REQ primitive at the peer service access point.  Use of M_PROTO message
blocks is optional (see guidelines under N_DATA_REQ).

The structure of the M_PROTO message block, if present, is as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_DATA_IND */
        ulong DATA_xfer_flags;          /* bit masking for data xfer flags */
@} N_data_ind_t;
@tpindex N_data_ind_t

/* Data Transfer Flags */
#define N_MORE_DATA_FLAG    0x00000001L
#define N_RC_FLAG           0x00000002L
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@end vtable

@subsubheading Flags

@vtable @var

@item MORE_DATA_FLAG
When set, indicates that the next N_DATA_IND message (NIDU) is part of this NSDU.

@item RC_FLAG
The value of the parameter may indicate either that confirmation is requested or
that it is not requested.  The parameter is allowed to be set only if use of
Receipt Confirmation was agreed to between both the NS users and the NS provider
during NC establishment.  The value of this parameter is always identical to that
supplied in the corresponding N_DATA_REQ primitive.

@end vtable

@subsubheading Valid States

This primitive is valid in state NS_DATA_XFER.

@subsubheading New State

The resulting state remains the same (NS_DATA_XFER).

@page
@node Receipt Confirmation Service Primitives
@subsection Receipt Confirmation Service Primitives

@menu
* N_DATACK_REQ::
* N_DATACK_IND::
@end menu

The receipt confirmation service is requested by the confirmation request
parameter on the N_DATA_REQ primitive.  For each and every NSDU with the
confirmation request parameter set, the receiving NS user should return an
N_DATACK_REQ primitive.Such acknowledgements should be issued in the same
sequence as the corresponding N_DATA_IND primitives are received, and are to be
conveyed by the NS provider in such a way so as to preserve them distinct from
any previous or subsequent acknowledgements.  The NS user may thus correlate them
with the original requests by counting.  When an NSDU has been segmented into
more than one NIDUs, only the last NIDU is allowed to request receipt
confirmation.  N_DATACK_REQ primitives will not be subject to the flow control
affectingN_DATA_REQ primitives at the same NC endpoint.  N_DATACK_IND primitives
will not be subject to the flow control affecting N_DATA_IND primitives at the
same NC endpoint.

The use of the receipt confirmation service must be agreed to by the two NS
users of the NC and the NS provider during the NC establishment by using the
RC_selection parameter on the N_CONN primitives.

@node N_DATACK_REQ
@subsubsection Data Acknowledgement Request

@subsubheading N_DATACK_REQ
@prindex N_DATACK_REQ

This is a user-originated primitive that requests that the network provider
acknowledge the N_DATA_IND that had previously been received with the receipt
confirmation parameter set.

@subsubheading Format

The format of the message is one M_PROTO message block and its structure is
as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_DATACK_REQ */
@} N_datack_req_t;
@tpindex N_datack_req_t;
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@end vtable

@subsubheading Valid States

This primitive is valid in state NS_DATA_XFER.

@subsubheading New State

The resulting state remains the same (NS_DATA_XFER).

@subsubheading Acknowledgements

This primitive does not require any acknowledgements, although it may generate a
fatal (unrecoverable) error.  This is indicated via an M_ERROR STREAMS message
type (issued to the NS user specifying the errno value of EPROTO), which results
in the failure of all system calls on that stream.  The allowable errors are as
follows:

@vtable @asis

@item EPROTO
This indicates the following unrecoverable protocol condition:

@itemize ---

@item The network interface was found to be in an incorrect state.

@end itemize

@end vtable

NOTE: If the interface is in the NS_IDLE state when the provider receives
the N_DATACK_REQ primitive, then the NS provider should discard the request
without generating a fatal error.  If the NS provider had no knowledge of a
previous N_DATA_IND with the receipt confirmation flag set, then the NS provider
should just ignore the request without generating a fatal error.

@page
@node N_DATACK_IND
@subsubsection Data Acknowledgement Indication

@subsubheading N_DATACK_IND
@prindex N_DATACK_IND

This is a NS provider originated primitive that indicates to the network service
user that the remote network service user has acknowledged the data that had
previously been sent with the receipt confirmation set.

@subsubheading Format

The format of the message is one M_PROTO message block and its structure is as
follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_DATACK_IND */
@} N_datack_ind_t;
@tpindex N_datack_ind_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@end vtable

@subsubheading Valid States

This primitive is valid in state NS_DATA_XFER.

@subsubheading New State

The resulting state remains the same (NS_DATA_XFER).

@page
@node Expedited Data Transfer Service
@subsection Expedited Data Transfer Service

@menu
* N_EXDATA_REQ::
* N_EXDATA_IND::
@end menu

The expedited data transfer service provides a further means of information
exchange on an NC in both directions simultaneously.  The transfer of expedited
network service data unit (ENSDU) is subject to separate flow control from that
applying to NS user data (However, a separate STREAMS message type for expedited
data is not available with UNIX(R) System V Release 3.1.  Until a new STREAMS
message type is provided, expedited data will be implemented via queue
manipulation).  The NS provider should guarantee that an expedited-NSDU will not
be delivered after any subsequently issued NSDU or expedited-NSDU on that NC.
The relationship between normal and expedited data is shown in Table 2.
Expedited data can still be delivered when the receiving NS user is not accepting
normal data (however this cannot be guaranteed if there are blockages occurring
in the lower layers).  The expedited data transfer service is a NS provider
option, and its use must be agreed by the two NS users of the NC and the NS
provider during NC establishment by using the EX_DATA_OPT parameter on the
N_CONN primitives.

@node N_EXDATA_REQ
@subsubsection Expedited Data Transfer Request

@subsubheading N_EXDATA_REQ
@prindex N_EXDATA_REQ

This is a NS user originated primitive and is used to indicate to the network
provider that the message block contains an ENSDU.

@subsubheading Format

The format of the message is one M_PROTO message block, followed by one or
more M_DATA blocks.  The NS user must send an integral number of octets of data
within the range supported by the NS provider (see N_INFO_ACK).

The structure of the M_PROTO message block is as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_EXDATA_REQ */
@} N_exdata_req_t;
@tpindex N_exdata_req_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@end vtable

@subsubheading Valid States

This primitive is valid in state NS_DATA_XFER.

@subsubheading New State

The resulting state remains the same (NS_DATA_XFER).

@subsubheading Acknowledgements

This primitive does not require any acknowledgements, although it may generate a
fatal (unrecoverable) error.  This is indicated via an M_ERROR STREAMS message
type (issued to the NS user with the errno value of EPROTO), which results in
the failure of all system calls on that stream.  The applicable errors are as
follows:

@vtable @asis

@item EPROTO
This indicates one of the following unrecoverable protocol conditions:

@itemize ---

@item The network interface was found to be in an incorrect state.

@item The amount of NS user data associated with the primitive defines an
expedited network service data unit of a size that is outside the range
supported by the NS provider.

@item Expedited data transfer is either not supported by the NS provider or not
requested with the N_CONN_REQ primitive.

@end itemize

@end vtable

NOTE: If the interface is in the NS_IDLE or NS_WRES_RIND states when the
provider receives the N_EXDATA_REQ primitive, then the NS provider should
discard the request without generating a fatal error.

@page
@node N_EXDATA_IND
@subsubsection Expedited Data Transfer Indication

@subsubheading N_EXDATA_IND
@prindex N_EXDATA_IND

This is a NS provider originated primitive and is used to indicate to the NS
user that this message contains an ENSDU.

@subsubheading Format

The format of the message is one M_PROTO message block, followed by one or
more M_DATA blocks.  The value of the data in the M_DATA blocks is identical to
that supplied with the corresponding N_EXDATA_REQ primitive.

The structure of the M_PROTO message block is as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_EXDATA_IND */
@} N_exdata_ind_t;
@tpindex N_exdata_ind_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@end vtable

@subsubheading Valid States

This primitive is valid in state NS_DATA_XFER.

@subsubheading New State

The resulting state remains the same (NS_DATA_XFER).

@page
@node Reset Service
@subsection Reset Service

@menu
* N_RESET_REQ::
* N_RESET_IND::
* N_RESET_RES::
* N_RESET_CON::
@end menu

The reset service can be used by the NS user to resynchronize the use of the NC;
or by the NS provider to report detected loss of data unrecoverable within the
network service.

All loss of data which does not involve loss of the NC is reported in this way.
Invocation of the reset service will unblock the flow of NSDUs and ENSDUs in case
of congestion of the NC; it will cause the NS provider to discard NSDUs, ENSDUs,
or confirmations of receipt associated with the NC (See Table 1), and to notify
any NS user or users that did not invoke reset that a reset has occurred.  The
service will be completed in finite time,irrespective of the acceptance of the
NSDUs, ENSDUs, and confirmations of receipt by the NS users.

@node N_RESET_REQ
@subsubsection Reset Request

@subsubheading N_RESET_REQ
@prindex N_RESET_REQ

This user-originated primitive requests that the NS provider reset the
network connection.

@subsubheading Format

The format of the message is one M_PROTO message block, and its structure is
as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_RESET_REQ */
        ulong RESET_reason;             /* reason for reset */
@} N_reset_req_t;
@tpindex N_reset_req_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@item RESET_reason
Gives information indicating the cause of the reset.

@end vtable

@subsubheading Valid States

This primitive is valid in the NS_DATA_XFER state.

@subsubheading New State

The resulting state is NS_WACK_RREQ.

@subsubheading Acknowledgements

@itemize ---

@item Successful:
This primitive does not require an immediate acknowledgement, although when the
resynchronization completes successfully, a N_RESET_CON primitive is issued to
the NS user that issued the N_RESET_REQ.

@item Unsuccessful:
A non-fatal error is acknowledged via the N_ERROR_ACK primitive.  In this case the
resulting state remains unchanged.  The following non-fatal error codes are
valid:

@vtable @asis

@item NOUTSTATE
The primitive was issued from an invalid state.

@item NSYSERR
A system error has occurred and the UNIX(R) system error is indicated with the
N_ERROR_ACK primitive.

@end vtable

@end itemize

NOTE: If the interface is in the NS_IDLE state when the provider receives
the N_RESET_REQ primitive, then the NS provider should discard the message
without generating an error.

@page
@node N_RESET_IND
@subsubsection Reset Indication

@subsubheading N_RESET_IND
@prindex N_RESET_IND

This network-provider-originated primitive indicates to the NS user that the
network connection has been reset.

@subsubheading Format

The format of the message is one M_PROTO message block, and its structure is
as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_RESET_IND */
        ulong RESET_orig;               /* reset originator */
        ulong RESET_reason;             /* reason for reset */
@} N_reset_ind_t;
@tpindex N_reset_ind_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@item RESET_orig
This parameter indicates the source of the reset.

@item RESET_reason
Gives information indicating the cause of the reset.

@end vtable

@subsubheading Valid States

This primitive is valid in the NS_DATA_XFER state.

@subsubheading New State

The new state is NS_WRES_RIND.

@page
@node N_RESET_RES
@subsubsection Reset Response

@subsubheading N_RESET_RES
@prindex N_RESET_RES

This user-originated primitive indicates that the NS user has accepted a reset
request.

Format

The format of the message is one M_PROTO message block and its structure is
the following:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_RESET_RES */
@} N_reset_res_t;
@tpindex N_reset_res_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@end vtable

@subsubheading Valid States

This primitive is valid in state NS_WRES_RIND.

@subsubheading New State

The new state is NS_WACK_RRES.

@subsubheading Acknowledgements

@itemize ---

@item Successful:
The successful completion of this primitive is indicated via the N_OK_ACK
primitive.  This results in the data transfer state.

@item Unsuccessful:
An unsuccessful completion of this primitive is indicated by the N_ERROR_ACK
primitive.  The resulting state remains the same.  The following non-fatal
error-codes are valid:

@vtable @asis

@item NOUTSTATE
The primitive was issued from an invalid state.

@item NSYSERR
A system error has occurred and the UNIX system error
is indicated in the N_ERROR_ACK primitive.

@end vtable

@end itemize

NOTE: If the interface is in the NS_IDLE state when the provider receives
the N_RESET_RES primitive, then the NS provider should discard the message
without generating an error.

@page
@node N_RESET_CON
@subsubsection Reset Confirmation

@subsubheading N_RESET_CON
@prindex N_RESET_CON

This NS provider-originated primitive indicates to the network user that
initiated the reset, that the reset request has been confirmed.  The NS provider
is allowed to issue the N_RESET_CON primitive to the NS user that initiated the
reset even before receiving a N_RESET_RES.

@subsubheading Format

The format of the message is one M_PROTO message block and its structure is
the following:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_RESET_CON */
@} N_reset_con_t;
@tpindex N_reset_con_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@end vtable

@subsubheading Valid States

This primitive is valid in state NS_WCON_RREQ.

@subsubheading New State

The resulting state is NS_DATA_XFER.

@page
@node Network Connection Release Phase
@subsection Network Connection Release Phase

@menu
* N_DISCON_REQ::
* N_DISCON_IND::
@end menu

The NC release service primitives are used to release a NC.  The release may
be performed by:

@itemize ---

@item either or both of the NS users to release an established NC;

@item the NS provider to release an established NC (all failures to maintain an
NC are indicated in this manner);

@item the destination NS user to reject an N_CONN_IND;

@item by the NS provider to indicate its inability to establish a requested NC.

@end itemize

An NC release is permitted at any time regardless of the current phase of the
NC.  Once an NC release procedure has been invoked, the NC will be released; a
request for release cannot be rejected.  The network service does not guarantee
delivery of any data once the NC release phase is entered (see Table 1).

@node N_DISCON_REQ
@subsubsection Disconnect Request

@subsubheading N_DISCON_REQ
@prindex N_DISCON_REQ

This user-originated primitive requests that the NS provider deny a request for
a network connection, or disconnect an existing connection.

@subsubheading Format

The format of the message is one M_PROTO message block, followed by one or
more M_DATA message blocks (for NS user data).  The NS user data may be lost if
the NS provider initiates release before the N_DISCON_IND is delivered.
Therefore, the NS user data parameter is present only if the originator
parameter (as discussed in N_DISCON_IND definition) indicates that the release
was originated by an NS user.  The NS user may send any integral number of octets
of data within a range supported by the NS provider (see N_INFO_ACK).

The structure of the M_PROTO message block is as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_DISCON_REQ */
        ulong DISCON_reason;            /* reason */
        ulong RES_length;               /* responding address length */
        ulong RES_offset;               /* responding address offset */
        ulong SEQ_number;               /* sequence number */
@} N_discon_req_t;
@tpindex N_discon_req_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@item DISCON_reason
Gives information about the cause of the release.

@item RES_length
Indicates the length of the address of the responding address parameter.  The
responding address parameter is an optional parameter, and is present in the
primitive only in the case where the primitive is used to indicate rejection of
an NC establishment attempt by an NS user.  The responding address parameter
conveys the network address of the NS user entity from which the N_DISCON_REQ
was issued and under certain circumstances (e.g.  call redirection, generic
addressing, etc.) may be different from the ``destination address'' in
the corresponding N_CONN_REQ primitive.

@item RES_offset
Is the offset from the beginning of the M_PROTO message block where the network
address begins.

@item SEQ_number
When non-zero, it identifies the sequence number of the N_CONN_IND message being
rejected.  This number is used by the NS provider to associate the N_DISCON_REQ
with an unacknowledged N_CONN_IND that is to be rejected.  If the N_DISCON_REQ is
rejecting a NC that is already established(or rejecting a N_CONN_REQ that the NS
user had previously sent and has not yet been confirmed), then this field should
have a value of 0.

@end vtable

@subsubheading Valid States

This primitive is valid in states NS_WCON_CREQ, NS_WRES_CIND,NS_DATA_XFER, NS_WCON_RREQ, NS_WRES_RIND.

@subsubheading New State

The new state depends on the original state (see Appendix B, Table B-8).

@subsubheading Acknowledgements:

The NS provider should generate one of the following acknowledgements upon
receipt of this primitive:

@itemize ---

@item Successful:
Successful completion is indicated via the N_OK_ACK primitive.

@item Unsuccessful (Non-fatal errors):
Errors are indicated via the N_ERROR_ACK primitive.  The applicable non-fatal
errors are as follows:

@vtable @asis

@item NOUTSTATE
The primitive was issued from an invalid state.

@item NBADDATA
The amount of user data specified was outside the range supported by the NS
provider.

@item NSYSERR
A system error has occurred and the UNIX system error is indicated in the
primitive.

@item NBADSEQ
The specified sequence number referred to an invalid N_CONN_IND message, or the
N_DISCON_REQ is rejecting an NC that is already established (or rejecting
anN_CONN_REQ that the NS user had previously sent and has not yet been
confirmed) and the value of the sequence number is not 0.

@end vtable

@end itemize

@page
@node N_DISCON_IND
@subsubsection Disconnect Indication

@subsubheading N_DISCON_IND
@prindex N_DISCON_IND

This network-provider originated primitive indicates to the NS user that either
a request for connection has been denied or an existing connection has been
disconnected.

@subsubheading Format

The format of the message is one M_PROTO message block, followed by one or
more M_DATA blocks.  The value of the NS user data parameter is identical to the
value in the corresponding N_DISCON_REQ primitive.  The NS user data parameter is
present only if the originator parameter indicates that the release was
initiated by the NS user.

The structure of the M_PROTO message block is as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_DISCON_IND */
        ulong DISCON_orig;              /* originator */
        ulong DISCON_reason;            /* reason */
        ulong RES_length;               /* responding address length */
        ulong RES_offset;               /* responding address offset */
        ulong SEQ_number;               /* sequence number */
@} N_discon_ind_t;
@tpindex N_discon_ind_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@item DISCON_orig
Indicates the source of the NC release.

@item DISCON_reason
Gives information about the cause of the release.

@item RES_length
Indicates the length of the address of the responding address parameter.  The
responding address parameter is an optional parameter, and is present in the
primitive only in the case where the primitive is used to indicate rejection of
an NC establishment attempt by an NS user.  When not present, the value of this
parameter is zero.  When present, the value of the disconnect address parameter
is identical to that supplied with the corresponding N_DISCON_REQ primitive.

@item RES_offset
Is the offset from the beginning of the M_PROTO message block where the network
address begins.

@item SEQ_number
When its value is non-zero, it identifies the sequence number associated with the
N_CONN_IND that is being aborted.

The value of this parameter must be zero when:

@enumerate a

@item indicating the rejection of a previously issuedN_CONN_REQ primitive; or

@item indicating the release of a NC that is already successfully established.

@end enumerate

When this field is non-zero and its value is the same as the sequence number
assigned to an unacknowledged N_CONN_IND, it indicates that the NS provider is
canceling the unacknowledged N_CONN_IND.

@end vtable

@subsubheading Valid States

The valid states are as follows:

@itemize @bullet
@item NS_WCON_CREQ,
@item NS_WRES_CIND,
@item NS_DATA_XFER,
@item NS_WCON_RREQ, and
@item NS_WRES_RIND.
@end itemize

@subsubheading New State

The new state is NS_IDLE (except when number of outstanding connect indications
is greater than 1, in which case the resulting state is NS_WRES_CIND).

@page
@node CLNS Primitive Format and Rules
@section CLNS Primitive Format and Rules

@menu
* N_UNITDATA_REQ::
* N_UNITDATA_IND::
* N_UDERROR_IND::
@end menu

This section describes the format of the CLNS primitives and the rules
associated with these primitives.  The values of the QOS parameters associated
with each unit data transmission are selected via the N_OPTMGMT_REQ primitive.

@node N_UNITDATA_REQ
@subsection Unitdata Request

@subsubheading N_UNITDATA_REQ
@prindex N_UNITDATA_REQ

This primitive requests that the NS provider send the specified datagram to the
specified destination.

@subsubheading Format

The format of the message is one M_PROTO message block followed by one or
more M_DATA message blocks.

The structure of the M_PROTO is as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_UNITDATA_REQ */
        ulong DEST_length;              /* destination address length */
        ulong DEST_offset;              /* destination address offset */
        ulong RESERVED_field[2];        /* reserved field for DLPI
                                           compatibility */
@} N_unitdata_req_t;
@tpindex N_unitdata_req_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@item DEST_length
Indicates the length of the destination address.

@item DEST_offset
Indicates the offset of the destination address from the beginning of the M_PROTO message block.

@item RESERVED_field
This is a reserved field (for compatibility with DLPI) whose value must be set
to zero for both entries of the array.

@end vtable

@subsubheading Valid States

This primitive is valid in state NS_IDLE.

@subsubheading New State

The resulting state remains unchanged.

@subsubheading Acknowledgements

@itemize ---

@item Successful:
There is no acknowledgement for the successful completion of this primitive.

@item Non-Fatal Error:
If a non-fatal error occurs, it is the responsibility of the NS provider to
report it via the N_UDERROR_IND primitive.  The following non-fatal error codes
are allowed:

@vtable @asis

@item NBADADDR
The network address as specified in the primitive was in an incorrect format, or
the address contained illegal information.

@item NBADDATA
The amount of user data specified was outside the range supported by the NS
provider.

@item NOUTSTATE
The primitive was issued from an invalid state.

@end vtable

@item Fatal Error:
Fatal errors are indicated via an M_ERROR STREAMS message type (issued to the NS
user with the errno value of EPROTO), which results in the failure of all UNIX
system calls on the stream.  The fatal errors are as follows:

@vtable @asis

@item EPROTO
This indicates one of the following unrecoverable protocol conditions:

@itemize ---

@item The network service interface was found to be in an incorrect state.

@item The amount of NS user data associated with the primitive defines a network
service data unit larger than that allowed by the NS provider.

@end itemize

@end vtable

@end itemize

@page
@node N_UNITDATA_IND
@subsection Unitdata Indication

@subsubheading N_UNITDATA_IND
@prindex N_UNITDATA_IND

This primitive indicates to the NS user that a datagram has been received from
the specified source address.

@subsubheading Format

The format of the message is one M_PROTO message block followed by one or
more M_DATA blocks containing at least one byte of data.  The format of the
M_PROTO is as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_UNITDATA_IND */
        ulong DEST_length;              /* destination address length */
        ulong DEST_offset;              /* destination address offset */
        ulong SRC_length;               /* source address length */
        ulong SRC_offset;               /* source address offset */
        ulong ERROR_type;               /* specifies the reason for the error */
@} N_unitdata_ind_t;
@tpindex N_unitdata_ind_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@item DEST_length
Indicates the length of the destination address.  The address is the same as in
the corresponding N_UNITDATA_REQ primitive.

@item DEST_offset
Indicates the offset of the destination address from the beginning of the M_PROTO
message block.

@item SRC_length
Indicates the length of the source network address.  This address is the same as
the value associated with the stream on which the N_UNITDATA_REQ was issued.

@item SRC_offset
Indicates the offset of the source address from the beginning of the M_PROTO
message block.

@item ERROR_type
Specifies the reason for the error.  The possible values are:

@vtable @var

@item N_UD_CONGESTION
This packet experienced congestion during its delivery.

@end vtable

@end vtable

@subsubheading Valid States

This primitive is valid in state NS_IDLE.

@subsubheading New State

The resulting state remains unchanged.

@page
@node N_UDERROR_IND
@subsection Unitdata Error Indication

@subsubheading N_UDERROR_IND
@prindex N_UDERROR_IND

This primitive indicates to the NS user that a datagram with the specified
destination address and QOS parameters has resulted in an error condition.

@subsubheading Format

The format of the message is one M_PROTO message block, and its structure is
as follows:

@smallexample
typedef struct @{
        ulong PRIM_type;                /* always N_UDERROR_IND */
        ulong DEST_length;              /* destination address length */
        ulong DEST_offset;              /* destination address offset */
        ulong RESERVED_field;           /* reserved field for DLPI
                                           compatibility */
        ulong ERROR_type;               /* error type */
@} N_uderror_ind_t;
@tpindex N_uderror_ind_t
@end smallexample

@subsubheading Parameters

@vtable @var

@item PRIM_type
Indicates the primitive type.

@item DEST_length
Indicates the length of the destination address.  The address is the same as in the corresponding N_UNITDATA_REQ
primitive.

@item DEST_offset
Indicates the offset of the destination address from the beginning of the M_PROTO message block.

@item RESERVED_field
This field is reserved whose value must be set to zero.

@item ERROR_type
Specifies the reason for the error.

@end vtable

@subsubheading Valid States

This primitive is valid in state NS_IDLE.

@subsubheading New State

The resulting state remains unchanged.

@node Diagnostics Requirements
@chapter Diagnostics Requirements

Two error handling facilities should be provided to the network service user:
one to handle non-fatal errors, and the other to handle fatal errors.

@section Non-Fatal Error Handling Facility

These are errors that do not change the state of the network service interface
as seen by the network service user, and provide the user the option of reissuing
the network service primitive with the corrected options specification.  The
non-fatal error handling is provided only to those primitives that require
acknowledgements, and uses the N_ERROR_ACK to report these errors.  These errors
retain the state of the network service interface the same as it was before the
network provider received the primitive that was in error.  Syntax errors and
rule violations are reported via the non-fatal error handling facility.

@section Fatal Error Handling Facility

These errors are issued by the NS provider when it detects errors that are not
correctable by the network service user, or if it is unable to report a
correctable error to the network service user.  Fatal errors are indicated via
the STREAMS message type M_ERRORwith the UNIX system error EPROTO.  The M_ERROR
STREAMS message type will result in the failure of all the UNIX system calls on
the stream.  The network service user can recover from a fatal error by having all
the processes close the files associated with the stream, and then reopening
them for processing.

@node References
@chapter References

@enumerate 1

@item CCITT X.213, (Geneva, 1986), ``Network Service Definition for Open Systems
Interconnection (OSI) for CCITT Applications'', (Grey Book)

@item ISO 8348 -- ``Information Processing Systems -- Data Communications --
Network Service Definition'', 4/15/87

@item ISO 8348/AD1 -- ``Information Processing Systems -- Data Communications --
Network Service Definition -- Addendum 1: Connectionless Mode Transmission'',
4/15/87

@item ISO 8473 -- ``Information Processing Systems -- Data Communications
Protocol for Providing the Connectionless Mode Network Service'', SC6 N4542

@item ISO 8208 -- ``Information Processing Systems -- X.25 Packet Level Protocol
for Data Terminal Equipment'', 9/15/87

@item ISO 8878 -- ``Information Processing Systems -- Data Communications -- Use
of X.25 to Provide the OSI Connection-Mode Network Service'', 9/1/87

@item System V Interface Definition, Issue 2 - Volume 3

@item CCITT X.210, (Geneva, 1984), ``Open Systems Interconnection (OSI)
Layer Service Definition Conventions'', (Red Book)

@end enumerate

@node Addendum for OSI Conformance
@chapter Addendum for OSI Conformance

This section describes the formats and rules that are specific to OSI.  The
addendum must be used along with the generic NPI as defined in the main document
when implementing a NS provider that will be configured with the OSI Transport
Layer.

@section Quality of Service: Model & Description
The ``Quality of Service'' characteristics apply to both CONS as well as CLNS.

@subsection QOS Overview
QOS (Quality of Service) is described in terms of QOS parameters.  There are two
types of QOS parameters:

@enumerate 1

@item Those that are ``negotiated'' on a per-connection basis during NC
establishment.(CLNS does not support end-to-end QOS parameter negotiation).

@item Those that are not negotiated and their values are selected/determined by
local management methods.

@end enumerate

Table 8 summarizes the supported parameters both for connection-mode
and connectionless network service.  For more details on the definition of the
QOS parameters, refer to CCITT X.213 [1] and ISO 8348 [2].

@cartouche
@image{npi_tab8} @center @b{Figure 8.  Supported QoS Parameters}
@end cartouche

@subsection QOS Parameter Formats

This section describes the formats of the QOS parameters for CONS and/or
CLNS services.  The requested QOS parameter values apply to complete NSDUs.

@subsubsection NC Establishment Delay

This parameter applies to CONS only.  It is defined as the maximum acceptable
delay between a N_CONN_REQ and the corresponding N_CONN_CON primitive.  NC
establishment delay is measured in milliseconds.

@subsubheading Format: 

@smallexample
long nc_estab_delay; /* maximum NC establishment delay */
@end smallexample

@vtable @var

@item nc_estab_delay
Is the maximum acceptable delay value for NC establishment.

@end vtable

@subsubsection NC Establishment Failure Probability

This parameter applies to CONS only.  NC Establishment Failure Probability is
the percent ratio (rounded to the nearest integer) of total NC establishment
failures to total NC establishment attempts in a measurement sample.  A
measurement sample consists of100 NC establishment attempts.

NC establishment failure occurs due to NS provider behaviour such as
mis-connection, NC refusal, and excessive delay.  NC establishment attempts that
fail due to NS user behaviour such as error, NC refusal, or excessive delay are
excluded in calculating NC establishment failure probability.

@subsubheading Format:

@smallexample
long nc_estab_fail_prob; /* maximum NC estab failure probability */
@end smallexample

@vtable @var

@item nc_estab_fail_prob
Is the maximum acceptable percent value (rounded to the nearest integer) for the
NC establishment failure probability.

@end vtable

@subsubsection Throughput

This parameter applies to CONS only, is specified separately for each direction
of transfer, and has end-to-end significance.  Throughput is defined in terms of
at least two successfully transferred NSDUs presented continuously to the NS
provider at the maximum rate the NS provider can continuously sustain, and
unconstrained by flow control applied by the receiving NS user.  Given a sequence
of ``n'' NSDUs (where is greater than or equal to two; suggested value is 100),
throughput is defined to be the smaller of:

@enumerate a

@item the number of NS user data octets contained in the last ``n-1'' NSDUs
divided bythe time between the first and the last N_DATA_REQs in the sequence;
and

@item the number of NS user data octets contained in the last ``n-1'' NSDUs
divided bythe time between the first and the last N_DATA_INDs in the sequence.

@end enumerate

Throughput should be measured and specified in bits per second.

@subsubheading Format:

@smallexample
typedef struct @{
        long thru_targ_value;
        long thru_min_value;
@} thru_values_t;
@tpindex thru_values_t
@end smallexample

@vtable @var

@item thru_targ_value
Specifies the requested QOS value for throughput for data transfer between the
two NS users.

@item thru_min_value
Specifies the requested lowest acceptable QOS value for throughput between the
two NS users.

@end vtable

@subsubsection Transit Delay

This parameter applies to CONS as well as CLNS.  Transit Delay is the elapsed
time between a N_DATA_REQ and the corresponding N_DATA_IND (calculated on
successfully transferred NSDUs only).  The pair of values specified for an NC
applies to both directions of transfer.  The specified values are averages (based
on 100 samples using a NSDU size of 128 bytes).  Transit Delay should be measured
in milliseconds.

@subsubheading Format:

@smallexample
typedef struct @{
        long td_targ_value;
        long td_max_value;
@} td_values_t;
@tpindex td_values_t
@end smallexample

@vtable @var

@item td_targ_value
Specifies the desired QOS value for transit delay between the two NS users.

@item td_max_value
Specifies the maximum QOS value that the source NS user will agree for transit
delay between the two NS users.

@end vtable

@subsubsection Residual Error Rate

This parameter applies to both CONS as well as CLNS.  Residual Error Rate is
the percent ratio (rounded to the nearest integer) of total incorrect, lost, and
duplicate NSDUs to total NSDUs transferred across the NS boundary during a
measurement period.  The measurement period will be 3600 seconds.

@subsubheading Format:

@smallexample
long residual_error_rate; /* maximum acceptable residual error rate */
@end smallexample

@vtable @var

@item residual_error_rate
Specifies the maximum acceptable percent value (rounded to the nearest integer)
of the residual error rate.

@end vtable

@subsubsection NC Resilience

This parameter applies to CONS only.  NC Resilience specifies the percent
probability (rounded to the nearest integer) of a NS provider invoked NC release
or a NS provider invoked reset during a specified time interval on an
established NC.  The time interval will be 3600 seconds.

@subsubheading Format:

@smallexample
long nc_resilience; /* maximum acceptable nc resilience */
@end smallexample

@vtable @var

@item nc_resilience
Specifies the maximum acceptable value for NC resilience.

@end vtable

@subsubsection Transfer Failure Probability

This parameter applies to CONS only.  It is the percent ratio (rounded to the
nearest integer) of total transfer failures to total transfer samples observed
during a performance measurement.  A transfer sample is a discrete observation of
NS provider performance in transferring NSDUs between specified sending and
receiving NS user.  A transfer sample will last for the duration of the NC.  A
transfer failure is a transfer sample in which the observed performance is worse
than the specified minimum acceptable level.  A transfer failure is identified by
comparing the measured values for the supported performance parameters with
specified transfer failure thresholds.  The three supported performance
parameters are throughput, transit delay, and residual error rate.

@subsubheading Format:

@smallexample
long xfer_fail_prob; /* maximum xfer failure prob */
@end smallexample

@vtable @var

@item xfer_fail_prob
Specifies the maximum acceptable percent value (rounded to the nearest integer)
for transfer failure probability.

@end vtable

@subsubsection NC Release Delay

This parameter applies to CONS only.  NC Release Delay is defined as the
maximum acceptable delay between a NS user invoked N_DISCON_REQ and the
successful release of the NC at the peer NS user.  NC Release Delay is specified
independently for each NS user.  It does not apply in cases where NC release is
invoked by the NS provider.  NC release delay should be measured in milliseconds.

@subsubheading Format:

@smallexample
long nc_rel_delay; /* maximum nc release delay */
@end smallexample

@vtable @var

@item nc_rel_delay
Is the maximum acceptable value for NC release delay.

@end vtable

@subsubsection NC Release Failure Probability

This parameter applies to CONS only.  It is the percent ratio (rounded to the
nearest integer) of total NC release requests resulting in release failure to
total NC release requests included in a measurement sample.  A measurement sample
consists of a 100NC release requests.  This parameter is specified independently
for each NS user.

A release failure is defined to occur for a particular NS user, if that user
does not receive a N_DISCON_IND within a specified maximum NC release delay of
the NS user issuing the N_DISCON_REQ (given that the former NS user has not
issued aN_DISCON_REQ).

@subsubheading Format:

@smallexample
long nc_rel_fail_prob; /* maximum nc rel fail probability */
@end smallexample

@vtable @var

@item nc_rel_fail_prob
Is the maximum acceptable percent value (rounded to the nearest integer) of NC
release failure probability.

@end vtable

@subsubsection Protection

This parameter applies to both CONS and CLNS.  It specifies the extent to which
the NS provider attempts to prevent unauthorized monitoring or manipulation of NS
user originated information.

@smallexample
/* Types of protection */
#define N_NO_PROT               0x00000000L     /* no protection */
#define N_PASSIVE_PROT          0x00000001L     /* protection against passive
                                                   monitoring */
#define N_ACTIVE_PROT           0x00000002L     /* protection against active
                                                   monitoring */
#define N_ACTIVE_PASSIVE_PROT   0x00000003L     /* maximum protection */
@end smallexample

Four protection options are provided:

@enumerate 1

@item No protection features;

@item Protection against passive monitoring;

@item Protection against modification, replay, addition, or deletion

@item Both 2 and 3.

@end enumerate

@subsubheading Format:

@smallexample
typedef struct @{
        long protect_targ_value;        /* target protection */
        long protect_min_value;         /* minimum protection */
@} protection_values_t;
@tpindex protection_values_t
@end smallexample

@vtable @var

@item protect_targ_value
Specifies the target protection of the NS user originated information.

@item protect_min_value
Specifies the lowest quality acceptable of protection of the NS user originated
information.

@end vtable

@subsubsection Priority

This parameter applies to both CONS and CLNS.

It specifies the target priority of:

@enumerate a

@item an NSDU in relation to any other NSDUs (for CLNS);

@item a NC (for CONS).  The number of priority levels is limited to 15 (where
level 1 is the highest priority and level 15 is the lowest priority).

@end enumerate

@subsubheading Format:

@smallexample
typedef struct @{
        long priority_targ_value;       /* target priority */
        long priority_min_value;        /* minimum priority */
@} priority_values_t;
@tpindex priority_values_t
@end smallexample

@vtable @var

@item priority_targ_value
Specifies the target NC priority level.

@item priority_min_value
Specifies the lowest quality acceptable of the NC priority level.

@end vtable

@subsubsection Maximum Acceptable Cost

This parameter applies to both CONS and CLNS.  It specifies the maximum
acceptable cost in local currency (composed of communications and end-system
resource costs), or indicates to the NS provider that it should choose the least
expensive means available to it.

@subsubheading Format

@smallexample
long max_accept_cost;                   /* acceptable cost maximum */

/* Choose least expensive means */
#define N_LEAST_EXPENSIVE 0x00000000L   /* choose least expensive means */
@end smallexample

@vtable @var

@item max_accept_cost
Specifies the maximum acceptable cost in local currency.

@end vtable

@subsection QOS Data Structures

The quality of services parameters are organized into six different structures
for simplicity:

@vtable @var

@item N_QOS_CO_RANGE1

Quality of service range requested for connection-mode service as used with the
N_CONN_REQ and N_CONN_IND primitives.

@item N_QOS_CO_SEL1

Quality of service values selected for the connection-mode service as used with
the N_CONN_RES and N_CONN_CON primitives.

@item N_QOS_CL_RANGE1

Range of quality of service values for connectionless-mode service as
specified with the QOS_@-range_@-length and QOS_@-range_@-offset parameters of
the N_@-INFO_@-ACK primitive.

@item N_QOS_CL_SEL1

Quality of service values supported/selected for connectionless-mode service as
specified with the QOS_length and QOS_offset parameters of the N_INFO_ACK and
the N_OPTMGMT_REQ primitives.

@item N_QOS_CO_OPT_RANGE1

Range of quality of service values for connection-mode service as specified with
the QOS_range_length and QOS_range_offset parameters of the N_INFO_ACK
primitive.

@item N_QOS_CO_OPT_SEL1

Default quality of service values supported/selected for connection-mode service
as specified with the QOS_length and QOS_offset parameters of the N_INFO_ACK and
the N_OPTMGMT_REQ primitives.

@end vtable

@subsubsection Structure N_QOS_CO_RANGE1
@vrindex N_QOS_CO_RANGE1

Structure N_qos_co_range1 defines the QOS parameters that are transferred
between the source and destination NS users for a NC.  The format of this
structure is as follows:

@smallexample
typedef struct @{
        ulong n_qos_type;               /* always N_QOS_CO_RANGE */
        thru_values_t src_throughput_range;     /* source throughput range */
        thru_values_t dest_throughput_range;    /* dest throughput range */
        td_values_t transit_delay_range;        /* transit delay range */
        protection_values_t protection_range;   /* protection range */
        priority_values_t priority_range;       /* priority target */
@} N_qos_co_range1_t;
@tpindex N_qos_co_range1_t
@end smallexample

This structure should be used in the QOS_length and QOS_offset fields of the
following NPI primitives:

@itemize @bullet

@item N_CONN_REQ

@item N_CONN_IND

@end itemize

@subsubsection Structure N_QOS_CO_SEL1
@vrindex N_QOS_CO_SEL1

Structure N_qos_co_sel1 defines the QOS parameters that are transferred between
the destination and source NS users for a NC.  The format of this structure is as
follows:

@smallexample
typedef struct @{
        ulong n_qos_type;               /* always N_QOS_CO_SEL */
        long src_throughput_sel;        /* source throughput selected */
        long dest_throughput_sel;       /* destination throughput selected */
        long transit_delay_sel;         /* transit delay selected */
        long protection_sel;            /* NC protection selected */
        long priority_sel;              /* NC priority selected */
@} N_qos_co_sel1_t;
@tpindex N_qos_co_sel1_t
@end smallexample

This structure should be used in the QOS_length and QOS_offset fields of the
following NPI primitives:

@itemize @bullet

@item N_CONN_RES

@item N_CONN_CON

@end itemize

@subsubsection Structure N_QOS_CL_RANGE1
@vrindex N_QOS_CL_RANGE1

Structure N_qos_cl_range1 defines the range of QOS parameter values that
are supported by the NS provider.  The format of the structure is as follows:

@smallexample
typedef struct @{
        ulong n_qos_type;               /* always N_QOS_CL_RANGE */
        td_values_t transit_delay_max;  /* maximum transit delay */
        long residual_error_rate;       /* residual error rate */
        protection_values_t protection_range;   /* target protection */
        priority_values_t priority_range;       /* target priority */
        long max_accept_cost;           /* maximum acceptable cost */
@} N_qos_cl_range1_t;
@tpindex N_qos_cl_range1_t
@end smallexample

This structure should be used in the:

@itemize @bullet

@item QOS_range_length and QOS_range_offset fields of the N_INFO_ACK primitive;

@end itemize

@subsubsection Structure N_QOS_CL_SEL1
@vrindex N_QOS_CL_SEL1

Structure N_qos_cl_sel1 defines the QOS parameters values that will apply to
each unitdata transmission between the CLNS users.  The format of the structure
is as follows:

@smallexample
typedef struct @{
        ulong n_qos_type;               /* always N_QOS_CL_sel */
        long transit_delay_max;         /* maximum transit delay */
        long residual_error_rate;       /* residual error rate */
        long protection_sel;            /* protection selected */
        long priority_sel;              /* priority selected */
        long max_accept_cost;           /* maximum acceptable cost */
@} N_qos_cl_sel1_t;
@tpindex N_qos_cl_sel1_t
@end smallexample

This structure should be used in the:

@itemize @bullet

@item QOS_length and QOS_offset fields of the N_INFO_ACK primitive;

@item QOS_length and QOS_offset fields of the N_OPTMGMT_REQ primitive.

@end itemize

@subsubsection Structure N_QOS_CO_OPT_RANGE1
@vrindex N_QOS_CO_OPT_RANGE1

Structure N_qos_opt_range1 defines the range of the default QOS parameter values
that are supported by the NS provider.  This allows the NS user to select values
within the range supported by the NS provider.  The format of the structure is as
follows:

@smallexample
typedef struct @{
        ulong n_qos_type;               /* always N_QOS_CO_OPT_RANGE */
        thru_values_t src_throughput;   /* source throughput values */
        thru_values_t dest_throughput;  /* dest throughput values */
        td_values_t transit_delay;      /* transit delay values */
        long nc_estab_delay;            /* NC establishment delay */
        long nc_estab_fail_prob;        /* NC estab failure probability */
        long residual_error_rate;       /* residual error rate */
        long xfer_fail_prob;            /* transfer failure probability */
        long nc_resilience;             /* NC resilience */
        long nc_rel_delay;              /* NC release delay */
        long nc_rel_fail_prob;          /* NC release fail probability */
        protection_values_t protection_range;   /* protection range */
        priority_values_t priority_range;       /* priority range */
        long max_accept_cost;           /* maximum acceptable cost */
@} N_qos_co_opt_range1_t;
@tpindex N_qos_co_opt_range1_t
@end smallexample

This structure should be used in the:

@itemize @bullet

@item QOS_range_length and QOS_range_offset fields of the N_INFO_ACK primitive;

@end itemize

@subsubsection Structure N_QOS_CO_OPT_SEL1
@vrindex N_QOS_CO_OPT_SEL1

Structure N_qos_opt_sel1 defines the selected QOS parameter values.  The format
of the structure is as follows:

@smallexample
typedef struct @{
        ulong n_qos_type;               /* always N_QOS_CO_OPT_SEL */
        thru_values_t src_throughput;   /* source throughput values */
        thru_values_t dest_throughput;  /* dest throughput values */
        td_values_t transit_delay;      /* transit delay values */
        long nc_estab_delay;            /* NC establishment delay */
        long nc_estab_fail_prob;        /* NC estab failure probability */
        long residual_error_rate;       /* residual error rate */
        long xfer_fail_prob;            /* transfer failure probability */
        long nc_resilience;             /* NC resilience */
        long nc_rel_delay;              /* NC release delay */
        long nc_rel_fail_prob;          /* NC release failure probability */
        long protection_sel;            /* protection selected */
        long priority_sel;              /* priority selected */
        long max_accept_cost;           /* maximum acceptable cost */
@} N_qos_co_opt_sel1_t;
@tpindex N_qos_co_opt_sel1_t;
@end smallexample

This structure should be used in the:

@itemize @bullet

@item QOS_length and QOS_offset fields of the N_INFO_ACK primitive;

@item QOS_length and QOS_offset fields of the N_OPTMGMT_REQ primitive.

@end itemize

@page
@section NPI Primitives Rules for OSI Conformance

The following are the rules that apply to the NPI primitives for OSI
compatibility.

@subsection Local Management Primitives

@subsubsection N_INFO_ACK
@prindex N_INFO_ACK

@subsubheading Parameters

@vtable @var

@item NSDU_size
A value greater than zero specifies the maximum size of a Network Service Data
Unit (NSDU); a value of 0 specifies that the transfer of normal data is not
supported by the NS provider,and a value of -1 specifies that there is no limit
on the size of a NSDU.

@item ENSDU_size
A value between 1 and 32 inclusive specifies the maximum size of an Expedited
Network Service Data Unit (ENSDU); a value of 0 specifies that the transfer of
expedited data is not supported by the NS provider.

@item CDATA_size
A value between 1 and 128 inclusive specifies the maximum number of octets of
data that may be associated with connection establishment primitives.  A value of
0 specifies that the NS provider does not allow data to be sent with connection
establishment primitives.  When used in an OSI conforming environment, CDATA_size
shall always equal 128.

@item DDATA_size
A value between 1 and 128 inclusive specifies the maximum number of octets of
data that may be associated with the disconnect primitives; a value of 0
specifies that the NS provider does not allow data to be sent with the
disconnect primitives.  When used in an OSI conforming environment, DDATA_size
shall always equal 128.

@item ADDR_size
A value between 1 and 40 indicates the maximum size of a network address in
decimal digits.  When used in an OSI conforming environment, ADDR_size
shall always equal 40 in order to accommodate a full NSAP address.

@item QOS_length
Indicates the length in bytes of the default/negotiated/selected values of the
QOS parameters.  The applicable QOS parameters are defined in the following
structures:

@enumerate a

@item N_QOS_CO_OPT_SEL1 for CONS; and

@item N_QOS_CL_SEL1 for CLNS.

@end enumerate

In the connection-mode environment, when this primitive is invoked before the NC
is established on the stream, the values returned specify the the default values
supported by the NS provider.  When this primitive is invoked after a NC has been
established on the stream, the values returned indicate the negotiated values
for the QOS parameters.  In the connectionless environment, these values
represent the default or the selected QOS parameter values.

In case a QOS parameter is not supported by the NS Provider, a value of
QOS_UNKNOWN will be returned.  In the case where no QOS parameters are supported
by the NS provider, the length of this field will be zero.

@item QOS_range_length
Indicates the length in bytes, of the available range of QOS parameters values
supported by the NS provider.  These ranges are used by the NS user to select QOS
parameter values that are valid with the NS provider.

The applicable QOS parameters are defined in the following structures:

@enumerate a

@item N_QOS_CO_OPT_RANGE1 for CONS; and

@item N_QOS_CL_RANGE1 for CLNS.

@end enumerate

QOS parameter values are selected, or the default values altered via the
N_OPTMGMT_REQ primitive.  In the connection-mode environment, the values for
end-to-end QOS parameters may be specified with the N_CONN primitives for
negotiation.  If the NS provider does not support a certain QOS parameter, its
value will be set to QOS_UNKNOWN.  In the case where no QOS parameters are
supported by the NS provider, the length of this field will be zero.

@item NIDU_size
This indicates the amount of user data that may be present in aN_DATA primitive.
The NIDU_size should not be larger than the NSDU_size specification.

@item SERV_type
Specifies the service type supported by the NS provider.  The possible values can
be N_CONS, N_CLNS, (or both by using N_CONS|N_CLNS).  If the SERV_type is N_CLNS,
the following rules will apply:

@itemize ---

@item The ENSDU_size, CDATA_size, DDATA_size, and DEFAULT_rc_sel fields are not
used and their values should be set to 0;

@item The NSDU_size should be the same as the NIDU_size.

@end itemize

@item NODU_size
The NODU_size specifies the optimal NSDU size in octets of an NSDU given the
current routing information.

@item PROTOID_length
The length of the protocol identifiers to be bound.

@item PROTOID_offset
The offset of the protocol identifiers to be bound, from the beginning of the
block.

@end vtable

@subsubsection N_OPTMGMT_REQ
@prindex N_OPTMGMT_REQ

@subsubheading Parameters

@vtable @var

@item QOS_length
Indicates the length of the default values of the QOS parameters as selected by
the NS user.  In the connection-mode environment these values will be used in
subsequent N_CONN_REQ primitives on the stream that do not specify values for
these QOS parameters.  In the connection-less environment, these values represent
the selected QOS values that would apply to each unit data transmission.  The
applicable QOS parameters are defined in the following structures:

@enumerate a

@item N_QOS_CO_OPT_SEL1 for CONS; and

@item N_QOS_CL_SEL1 for CLNS.

@end enumerate

If the NS user cannot determine the value of a QOS parameter,its value should be
set to QOS_UNKNOWN.  If the NS user does not specify any QOS parameter values,
the length of this field should be set to zero.

@end vtable

@subsection CONS Connection Establishment Phase Rules for QOS Parameter Negotiation

The negotiation for NC throughput and NC transit-delay QOS parameters
are conducted as follows:

@enumerate a

@item in the N_CONN_REQ primitive, the source NS user specifies two values
for each negotiable QOS parameter:

@enumerate 1

@item a ``target'' which is the QOS value desired; and

@item a ``lowest acceptable'' QOS value to which the source NS user will agree;

@end enumerate

The value of each of these parameters must be within the limit of the allowable
values defined for the network service.  ``Default'' values for these parameters
are supported by the NS provider.  The default values may be selected by the NS
user via the N_OPTMGMT_REQ primitive.

@item if the NS provider agrees to provide a value of QOS which is in the
range between the ``target'' and the ``lowest acceptable'' QOS values, inclusive,
of the N_CONN_REQ, then the NS provider specifies two parameters in
the N_CONN_IND issued to the destination NS user:

@enumerate 1

@item an ``available'' value which is the QOS value the NS provider is willing
to provide; and

@item a ``lowest acceptable'' QOS value which is identical to the
``lowest acceptable'' value specified in the N_CONN_REQ; (if the NS provider
does not agree to provide QOS in the given range, then the NC establishment
request is rejected);

@end enumerate

@item if the destination NS user agrees to a QOS value which is in the range
between the ``available'' and the ``lowest acceptable'' QOS values, inclusive,
of the N_CONN_IND, then the destination NS user specifies a single parameter,
``selected'' in the N_CONN_RES; this parameter is the QOS value the destination
NS user agrees to; (if the destination NS user does not agree to a QOS in the
given range, then the NC establishment request is rejected);

@item the NS provider adopts the QOS value for the NC which was specified by
the destination NS user and supplies this as a single parameter, ``selected'', in
the N_CONN_CON primitive.

@end enumerate

@itemize @bullet

@item The negotiation for the NC protection parameter is conducted as follows:

@enumerate a

@item In the N_CONN_REQ primitive, the calling NS user specifies values for
the ``Target'' and ``Lowest Quality Acceptable'' sub-parameters; permitted value
assignments are:

@table @asis

@item Case1:
both the ``Target'' and ``Lowest Quality Acceptable'' are ``unspecified'';

@item Case2:
values other than ``unspecified'' are specified for both ``Target'' and ``Lowest
Quality Acceptable'';

@item Case3:
a value other than ``unspecified'' is specified for ``Target'' and the ``Lowest
Quality Acceptable'' is ``unspecified''.

@end table

NOTE: In case where ``Target'' is ``unspecified'', the ``Lowest Quality
Acceptable'' must also be ``unspecified''.

@item If the NS provider does not support a choice of NC protection levels, the
value of the ``Target'' parameter is conveyed by the NS provider and passed to
the called NS user unchanged as the ``Available'' sub-parameter in the N_CONN_IND
primitive;

@item If the NS provider does support a choice of NC protection levels, then:

@enumerate 1

@item In Case1, the NS provider determines the QOS value to be offered on the NC
and specifies it in the ``Available'' sub-parameter in the N_CONN_IND primitive;

@item In Case2 and Case3, if the NS provider does not agree to provide a QOS in
the requested range, then the NC establishment attempt is rejected as described
in clause 13.5 of ISO 8348.  If the NS provider does agree to provide a QOS in
the requested range, then in the N_CONN_IND primitive, the ``Available''
sub-parameter specifies the highest QOS value within the range which the NS
provider is willing to provide.

@end enumerate

@item The value of the ``Lowest Quality Acceptable'' sub-parameter in
the N_CONN_IND primitive is identical to that in the N_CONN_REQ primitive;

@item If the value of the ``Available'' sub-parameter of the N_CONN_IND primitive
is ``unspecified'' then:

@enumerate 1

@item if the called NS user does not agree to accept establishment of a NC
with this unspecified quality, the NS user rejects the NC establishment attempt
as described in clause 13.4 of ISO 8348;

@item if the called NS user does agree, then the NS user specifies the
value ``unspecified'' in the ``Selected'' sub-parameter of the N_CONN_RES
primitive.

@end enumerate

@item If the value of the ``Available'' sub-parameter in the N_CONN_IND primitive
is not ``unspecified'' then:

@enumerate 1

@item if the called NS user does not agree to a QOS in the range identified
by the ``Available'' and ``Lowest Quality Acceptable'' sub-parameters of the
N_CONN_IND primitive, then the NS user rejects the NC establishment attempt as
described in clause 13.4 of ISO 8348;

@item if the called NS user does agree to a QOS in the identified range, then
the NS user specifies the agreed value in the ``Selected'' sub-parameter of the
N_CONN_RES primitive.

@end enumerate

@item In the N_CONN_CON primitive, the ``Selected'' sub-parameter has a
value identical to that of ``Selected'' in the N_CONN_RES primitive.

@end enumerate

@item The negotiation of the NC priority parameter is conducted as follows:

@enumerate a

@item In the N_CONN_REQ primitive, the calling NS user specifies values for
the ``Target'' and ``Lowest Quality Acceptable'' sub-parameters; permitted value
assignments are:

@table @asis

@item Case1:
both the ``Target'' and ``Lowest Quality Acceptable'' are ``unspecified'';

@item Case2:
values other than ``unspecified'' are specified for both ``Target'' and ``Lowest
Quality Acceptable'';

@item Case3:
a value other than ``unspecified'' is specified for ``Target'' and the ``Lowest
Quality Acceptable'' is ``unspecified''.

@end table

NOTE: In case where ``Target'' is ``unspecified'', the ``Lowest Quality
Acceptable'' must also be ``unspecified''.

@item If the NS provider does not support a choice of NC priority levels, the
value of the ``Target'' parameter is conveyed by the NS provider and passed to
the called NS user unchanged as the ``Available'' sub-parameter in the
N_CONN_IND primitive;

@item If the NS provider does support a choice of NC priority levels, then:

@enumerate 1

@item In Case1, the NS provider determines the QOS value to be offered on the NC and
specifies it in the ``Available'' sub-parameter in the N_CONN_IND primitive;

@item In Case2 and Case3, if the NS provider does not agree to provide a QOS in the
requested range, then the NC establishment attempt is rejected as described in
clause 13.5 of ISO 8348.  If the NS provider does agree to provide a QOS in the
requested range, then in the N_CONN_IND primitive, the ``Available''
sub-parameter specifies the highest QOS value within the range which the NS
provider is willing to provide.

@end enumerate

@item The value of the ``Lowest Quality Acceptable'' sub-parameter in
the N_CONN_IND primitive is identical to that in the N_CONN_REQ primitive;

@item If the value of the ``Available'' sub-parameter of the N_CONN_IND primitive
is ``unspecified'' then:

@enumerate 1

@item if the called NS user does not agree to accept establishment of a NC with this
unspecified quality, the NS user rejects the NC establishment attempt as
described in clause 13.4 of ISO 8348;

@item if the called NS user does agree, then the NS user specifies the
value ``unspecified'' in the ``Selected'' sub-parameter of the N_CONN_RES
primitive.

@end enumerate

@item If the value of the ``Available'' sub-parameter in the N_CONN_IND primitive
is not ``unspecified'' then:

@enumerate 1

@item if the called NS user does not agree to a QOS in the range identified by
the ``Available'' and ``Lowest Quality Acceptable'' sub-parameters of the
N_CONN_IND primitive, then the NS user rejects the NC establishment attempt as
described in clause 13.4 of ISO 8348;

@item if the called NS user does agree to a QOS in the identified range, then
the NS user specifies the agreed value in the ``Selected'' sub-parameter of the
N_CONN_RES primitive.

@end enumerate

@item In the N_CONN_CON primitive, the ``Selected'' sub-parameter has a
value identical to that of ``Selected'' in the N_CONN_RES primitive.

@end enumerate

@end itemize

@subsubheading Rules for QOS Parameter Selection

When a NS user/provider cannot determine the value of a QOS field, it should
return a value of QOS_UNKNOWN.

@smallexample
#define QOS_UNKNOWN -1
@end smallexample

@subsubheading Rules for Receipt Confirmation Selection

@itemize @bullet

@item The receipt confirmation selection parameter values on the various
primitives are related such that:

@enumerate 1

@item on the N_CONN_REQ, either of the defined values may occur (namely, ``use of
receipt confirmation'', or ``no use of receipt confirmation'').

@item on the N_CONN_IND, the value is either equal to the value on the
request primitive, or is ``no use of receipt confirmation''.

@item on the N_CONN_RES, the value is either equal to the value on the indication
primitive or is ``no use of receipt confirmation''.

@item on the N_CONN_CON, the value is equal to the value on the response primitive.

@end enumerate

@item Since the NS users and the NS provider must agree to the use of receipt
confirmation selection, there are four possible cases of negotiation of receipt
confirmation on an NC:

@enumerate 1

@item if the source NS user does not request it --- it is not used;

@item if the source NS user requests it but the NS provider does not provide it ---
it is not used;

@item if the source NS user requests it and the NS provider agrees to provide
it,but the destination NS user does not agree to its use -- it is not used;

@item if the source NS user requests it, the NS provider agrees to provide it,
and the destination NS user agrees to its use -- it can be used.  Rules for
Expedited Data Selection

@end enumerate

@item The expedited data selection parameter values on the various primitives
are related such that:

@enumerate 1

@item on the N_CONN_REQ, either of the defined values may occur, (namely ``use of
expedited data'' or ``no use of expedited data'');

@item on the N_CONN_IND, the value is either equal to the value on the
request primitive, or is ``no use of expedited data'';

@item on the N_CONN_RES, the value is either equal to the value on the
indication primitive, or is ``no use of expedited data'';

@item on the N_CONN_CON, the value is equal to the value on the response
primitive.

@end enumerate

@item Since the NS users and the NS provider must agree to the use of expedited
data selection, there are four possible cases of negotiation of expedited data on
an NC:

@enumerate 1

@item if the source NS user does not request it --- it is not used;

@item if the source NS user requests it but the NS provider does not provide it
--- it is not used;

@item if the source NS user requests it and the NS provider agrees to provide
it, but the destination NS user does not agree to its use --- it is not used;

@item if the source NS user requests it, the NS provider agrees to provide it,
and the destination NS user agrees to its use --- it can be used.

@end enumerate

@end itemize

@subsubsection N_CONN_REQ
@prindex N_CONN_REQ

@subsubheading Parameters

@vtable @var

@item QOS_length
Indicates the length of the QOS parameters values that apply to the NC being requested.

The applicable QOS parameters are defined in the following structure:

@enumerate a

@item N_QOS_CO_RANGE1

@end enumerate

If the NS user cannot determine the value of a QOS parameter, its value should
be set to QOS_UNKNOWN.  If the NS user does not specify any QOS parameter values,
the length of this field should be set to zero.

@end vtable

@subsubheading Flags

@vtable @var

@item REC_CONF_OPT
The receipt confirmation selection parameter indicates whether receipt
confirmation service is desired by the calling NS user on the NC.  The receipt
confirmation service must be provided in the network service to be used on the
NC.  When set, it indicates ``use of receipt confirmation'', and when not set it
indicates ``no use of receipt confirmation''.

@item EX_DATA_OPT
The expedited data selection parameter indicates whether the expedited data
service is desired by the calling NS user on the NC.  The expedited data transfer
service must be provided by the NS provider for it to be used on the NC.  When
set, it indicates ``use of expedited data'', and when not set it indicates ``no
use of expedited data''.

@end vtable

@subsubsection N_CONN_IND
@prindex N_CONN_IND

@subsubheading Parameters

@vtable @var

@item QOS_length
Indicates the length of the QOS parameters values that are negotiated during NC
establishment.

The applicable QOS parameters are defined in the following structure:

@enumerate a

@item N_QOS_CO_RANGE1

@end enumerate

If the NS provider does not support or cannot determine the value of a QOS
parameter, its value will be set to QOS_UNKNOWN.  If the NS provider does not
specify any QOS parameter values, the length of this field should be set to
zero.

@item QOS_offset
Indicates the offset of the QOS parameters from the beginning of the M_PROTO
message block.

@end vtable

@subsubheading Flags

@vtable @var

@item REC_CONF_OPT
The receipt confirmation selection parameter indicates whether the receipt
confirmation service is available on the NC and the calling NS user desires its
use.  The receipt confirmation service must be provided in the network service to
be used on the NC.  When set, it indicates ``use of receipt confirmation'', and
when not set, it indicates ``no use of receipt confirmation''.  The value on the
N_CONN_IND is either equal to the value on the request primitive or is ``no use
of receipt confirmation''.

@item EX_DATA_OPT
The expedited data selection parameter indicates whether the expedited data
transfer service is available on the NC and the calling NS user desires its use.
The expedited data transfer service must be provided by the NS provider for it
to be used on the NC.  When set, it indicates ``use of expedited data'' or ``no
use of expedited data''.  The value on the N_CONN_IND is either equal to the value
on the request primitive or is ``no use of expedited data''.

@end vtable

@subsubsection N_CONN_RES
@prindex N_CONN_RES

@subsubheading Parameters

@vtable @var

@item QOS_length
Indicates the length of the QOS parameters values that are negotiated during NC
establishment.  The applicable QOS parameters are defined in the following
structure:

@enumerate a

@item N_QOS_CO_SEL1

@end enumerate

If the NS user does not agree to the QOS values, it will reject the NC
establishment by invoking a N_DISCON_REQ primitive (the originator parameter in
the N_DISCON_REQ primitive will indicate NS user invoked release).  If the NS user
cannot determine the value of a QOS parameter, its value should be set to
QOS_UNKNOWN.  If the NS user does not specify any QOS parameter values, the
length of this field should be set to zero.

@end vtable

@subsubheading Flags

@vtable @var

@item REC_CONF_OPT
The receipt confirmation selection parameter indicates whether the receipt
confirmation service can be used on the NC.  The receipt confirmation service
must be provided in the network service to be used on the NC.  When set, it
indicates ``use of receipt confirmation'', and when not set it indicates ``no
use of receipt confirmation''.  The value on the N_CONN_RES is either equal to
the value on the indication primitive or is ``no use of receipt confirmation''.

@item EX_DATA_OPT
The expedited data selection parameter indicates whether the expedited data
transfer service can be used on the NC.  The expedited data transfer service must
be provided by the NS provider for it to be used on the NC.  When set, it
indicates ``use of expedited data'', and when not set, it indicates ``no use of
expedited data''.  The value on the N_CONN_RES is either equal to the value on the
indication primitive or is ``no use of expedited data''.

@end vtable

@subsubsection N_CONN_CON
@prindex N_CONN_CON

@subsubheading Parameters

@vtable @var

@item QOS_length
Indicates the length of the QOS parameters values selected by the responding NS
user.  The applicable QOS parameters are defined in the following structure:

@enumerate a

@item N_QOS_CO_SEL1

@end enumerate

If the NS provider does not support or cannot determine the selected value of a
QOS parameter, its value will be set to QOS_UNKNOWN.  If the NS provider does not
specify any QOS parameter values, the length of this field should be set to
zero.

@end vtable

@subsubheading Flags

@vtable @var

@item REC_CONF_OPT
The receipt confirmation selection parameter indicates whether the receipt
confirmation service can be used on the NC.  The receipt confirmation service
must be provided in the network service to be used on the NC.  When set, it
indicates ``use of receipt confirmation'', and when not set it indicates ``no
use of receipt confirmation''.  The value on the N_CONN_CON is equal to the value
on the response primitive.

@item EX_DATA_OPT
The expedited data selection parameter indicates whether the expedited data
transfer service can be used on the NC.  The expedited data transfer service must
be provided by the NS provider for it to be used on the NC.  When set, it
indicates ``use of expedited data'', and when not set, it indicates ``no use of
expedited data''.  The value on the N_CONN_CON is equal to the value on the
response primitive.

@end vtable

@subsection CONS Reset Service

@subsubsection N_RESET_REQ
@prindex N_RESET_REQ

@subsubheading Parameters

@vtable @var

@item RESET_reason

Gives information indicating the cause of the reset.  Rules governing the value
of the RESET_reason parameter For an N_RESET_REQ, the reason shall always
indicate N_USER_RESYNC.

@end vtable

@subsubsection N_RESET_IND
@prindex N_RESET_IND

@subsubheading Parameters

@vtable @var

@item RESET_orig
This parameter indicates the source of the reset.

Reset Originator

@vtable @var

@item N_PROVIDER
NS provider originated reset

@item N_USER
NS user originated reset

@item N_UNDEFINED
reset originator undefined

@end vtable

@item RESET_reason
Gives information indicating the cause of the reset.

@end vtable

@subsubheading Rules governing the value of the RESET_reason parameter

The value conveyed in this parameter will be as follows:

@enumerate a

@item when the originator parameter indicates an NS provider invoked reset;
the parameter is one of:

@vtable @var

@item N_CONGESTION
reset due to congestion;

@item N_RESET_UNSPECIFIED
reset-reason unspecified.

@end vtable

@item when the originator parameter indicates an NS user invoked reset, the value is:

@vtable @var

@item N_USER_RESYNC
user resynchronization.

@end vtable

@item when the originator parameter has the value ``undefined'', then the value of the reason parameter is:

@vtable @var

@item N_REASON_UNDEFINED
reset reason undefined

@end vtable

@end enumerate

@subsection CONS NC Release Phase

@subsubsection N_DISCON_REQ
@prindex N_DISCON_REQ

@subsubheading Parameters:

@vtable @var

@item DISCON_reason
Gives information about the cause of the release.

@end vtable

@subsubheading Rules governing the value of the DISCON_reason parameter

The value conveyed in the parameter will be as follows:

@vtable @var

@item N_DISC_NORMAL
``disconnection-normal condition''

@item N_DISC_ABNORMAL
``disconnection-abnormal condition''

@item N_REJ_P
``connection rejection-permanent condition''

@item N_REJ_T
``connection rejection-transient condition''

@item N_REJ_QOS_UNAVAIL_P
``connection rejection-QOS not available/permanent condition''

@item N_REJ_QOS_UNAVAIL_T
``connection rejection-QOS not available/transient condition''

@item N_REJ_INCOMPAT_INFO
``connection rejection-incompatible information in NS user data''

@item N_REJ_UNSPECIFIED
``connection rejection-reason unspecified''

@end vtable

@subsubsection N_DISCON_IND
@prindex N_DISCON_IND

@subsubheading Parameters

@vtable @var

@item DISCON_orig
Indicates the source of the NC release.  Its value are as follows:

@vtable @var

@item N_PROVIDER
NS provider originated disconnect N_USER: NS user originated disconnect

@item N_UNDEFINED
disconnect originator undefined

@end vtable

The value ``undefined'' is not permitted when an N_DISCON_IND is issued by an NS
user or the NS provider in order to reject an NC establishment attempt.

@item DISCON_reason
Gives information about the cause of the release.

@end vtable

@subsubheading Rules governing the value of the DISCON_reason parameter

The value conveyed in the parameter will be as follows:

@enumerate a

@item When the originator parameter indicates an NS provider invoked release,
the value is one of:

@vtable @var

@item N_DISC_P
``disconnection-permanent condition''

@item N_DISC_T
``disconnection-transient condition''

@item N_REJ_NSAP_UNKNOWN
``connection rejection-NSAP address unknown (permanent condition)''

@item N_REJ_NSAP_UNREACH_P
``connection rejection-NSAP unreachable(permanent condition)''

@item N_REJ_NSAP_UNREACH_T
``connection rejection-NSAP unreachable(transient condition)''

@item N_REJ_QOS_UNAVAIL_P
``connection rejection-QOS not available/permanent condition''

@item N_REJ_QOS_UNAVAIL_T
``connection rejection-QOS not available/transient condition''

@item N_REJ_UNSPECIFIED
``connection rejection-reason unspecified''

@end vtable

@item When the originator parameter indicates an NS user invoked release, the
value is one of:

@vtable @var

@item N_DISC_NORMAL
``disconnection-normal condition''

@item N_DISC_ABNORMAL
``disconnection-abnormal condition''

@item N_REJ_P
``connection rejection-permanent condition''

@item N_REJ_T
``connection rejection-transient condition''

@item N_REJ_QOS_UNAVAIL_P
``connection rejection-QOS not available/permanent condition''

@item N_REJ_QOS_UNAVAIL_T
``connection rejection-QOS not available/transient condition''

@item N_REJ_INCOMPAT_INFO
``connection rejection-incompatible information in NS user data''

@item N_REJ_UNSPECIFIED
``connection rejection-reason unspecified''

@end vtable

@item When the originator parameter value is undefined, then the value of the
reason parameter shall be:

@vtable @var

@item N_REASON_UNDEFINED
disconnect reason undefined

@end vtable

@end enumerate

@subsection CLNS

@subsubsection N_UDERROR_IND
@prindex N_UDERROR_IND

@subsubheading Parameters

@vtable @var

@item ERROR_type
Specifies the reason for the error.  The possible values are:

@vtable @var

@item N_UD_UNDEFINED
no reason specified;

@item N_UD_TD_EXCEEDED
transit delay exceeded;

@item N_UD_CONGESTION
NS provider congestion;

@item N_UD_QOS_UNAVAIL
other requested QOS/service characteristic unavailable;

@item N_UD_LIFE_EXCEEDED
NSDU lifetime exceeded;

@item N_UD_ROUTE_UNAVAIL
suitable route unavailable.

@end vtable

@end vtable

@node Mapping NPI to ISO 8348 and CCITT X.213
@appendix Mapping NPI to ISO 8348 and CCITT X.213

Table A-1 shows a mapping of the NPI primitives to the OSI network service
definition primitives.

@cartouche
@image{npi_taba1} @center @b{Table A-1.  Mapping NPI Primitives to OSI NS}
@end cartouche

@node State/Event Tables
@appendix State/Event Tables

This appendix contains tables showing the network-user's view of the possible
states that the NPI may enter due to an event, and the possible events that may
occur on the interface.  The N_INFO_REQ, N_INFO_ACK, N_TOKEN_REQ, and N_TOKEN_ACK
primitives are excluded from the state transition table because they can be
issued from several states, and secondly, they do not cause a state transition
to occur.  However, the N_INFO_REQ and the N_TOKEN_REQ primitives may not be
issued by the NS user when a local acknowledgement to a previously issued
primitive is pending.

@cartouche
@image{npi_tabb1} @center @b{Table B-1.  Kernel Level NPI States}
@end cartouche

Tables B-2 and B-3 describe the variables and outputs used in the state tables.

@cartouche
@image{npi_tabb2} @center @b{Table B-2.  State Table Variables}
@end cartouche

@cartouche
@image{npi_tabb3} @center @b{Table B-3.  State Table Outputs}
@end cartouche

Table B-4 shows outgoing events that are initiated by the network-user entity.
These events are either requests to the network provider or responses to an
event of the network provider.

@cartouche
@image{npi_tabb4} @center @b{Table B-4.  Kernel Level NPI Outgoing Events}
@end cartouche

Table B-5 shows incoming events that are initiated by the network provider.
These events are either confirmations of a request, or are indications to the NS
user entity that an event has occurred.

@cartouche
@image{npi_tabb5} @center @b{Table B-5.  Kernel Level NPI Incoming Events}
@end cartouche

Tables B-6 and B-7 describe the possible events the NPI may enter given a
current state and event.  The contents of each box represent the next state given
the current state (column) and the current incoming or outgoing event (row).  An
empty box represents a state/event combination that is invalid.  Along with the
next state, each box may include an action.  The network provider must take
specific actions in the order specified in the state table.

@cartouche
@image{npi_tabb6} @center @b{Table B-6.  Data Transfer State Table for CLNS}
@end cartouche

@cartouche
@image{npi_tabb7} @center @b{Table B-7.  Initialization State Table for CONS}
@end cartouche

@cartouche
@image{npi_tabb8} @center @b{Table B-8.  State Table for CONS for Connection/Release/Data Transfer States}
@end cartouche

@node Primitive Precedence Tables
@appendix Primitive Precedence Tables

Tables C-1 and C-2 describe the precedence of the NPI primitives for both the
stream write and read queues.  In both these tables, primitive Y is already on the
queue and primitive X is about to be put on the queue.  The stream write queue
contains network user initiated primitives and the stream read queue contains
network provider initiated primitives.  The column headings are a shorthand
notation for the row headings.

@cartouche
@image{npi_tabc1} @center @b{Table C-1.  STREAM Write Queue Precedence Table}
@end cartouche

@cartouche
@image{npi_tabc2} @center @b{Table C-2.  STREAM Read Queue Precedence Table}
@end cartouche

@node NPI Header File Listing
@appendix NPI Header File Listing

This appendix contains a listing of the NPI header file needed by
implementations.

@smallexample
/*
 * npi.h header for the Network Provider Interface (OSI Conforming)
 */
#define N_CURRENT_VERSION   0x02        /* current version of NPI */
#define N_VERSION_2         0x02        /* version of npi, December 16, 1991 */

/*
 * Primitives that are initiated by the network user.
 */
#define N_CONN_REQ      0       /* NC request */
#define N_CONN_RES      1       /* Accept previous connection indication */
#define N_DISCON_REQ    2       /* NC disconnection request */
#define N_DATA_REQ      3       /* Connection-Mode data transfer request */
#define N_EXDATA_REQ    4       /* Expedited data request */
#define N_INFO_REQ      5       /* Information Request */
#define N_BIND_REQ      6       /* Bind a NS user to network address */
#define N_UNBIND_REQ    7       /* Unbind NS user from network address */
#define N_UNITDATA_REQ  8       /* Connection-less data send request */
#define N_OPTMGMT_REQ   9       /* Options Management request */

/*
 * Primitives that are initiated by the network provider.
 */
#define N_CONN_IND     11       /* Incoming connection indication */
#define N_CONN_CON     12       /* Connection established */
#define N_DISCON_IND   13       /* NC disconnected */
#define N_DATA_IND     14       /* Incoming connection-mode data indication */
#define N_EXDATA_IND   15       /* Incoming expedited data indication */
#define N_INFO_ACK     16       /* Information Acknowledgement */
#define N_BIND_ACK     17       /* NS User bound to network address */
#define N_ERROR_ACK    18       /* Error Acknowledgement */
#define N_OK_ACK       19       /* Success Acknowledgement */
#define N_UNITDATA_IND 20       /* Connection-less data receive indication */
#define N_UDERROR_IND  21       /* UNITDATA Error Indication */

/*
 * Additional NPI Primitivies
 */
#define N_DATACK_REQ   23       /* Data acknowledgement request */
#define N_DATACK_IND   24       /* Data acknowledgement indication */
#define N_RESET_REQ    25       /* NC reset request */
#define N_RESET_IND    26       /* Incoming NC reset request indication */
#define N_RESET_RES    27       /* Reset processing accepted */
#define N_RESET_CON    28       /* Reset processing complete */

/*
 * The following are the events that drive the state machine
 */

/*
 * Initialization events
 */
#define NE_BIND_REQ      0      /* bind request */
#define NE_UNBIND_REQ    1      /* unbind request */
#define NE_OPTMGMT_REQ   2      /* manage options request */
#define NE_BIND_ACK      3      /* bind acknowledgement */
#define NE_ERROR_ACK     5      /* error acknowledgement */
#define NE_OK_ACK1       6      /* ok ack, outcnt == 0 */
#define NE_OK_ACK2       7      /* ok ack, outcnt == 1, q == rq */
#define NE_OK_ACK3       8      /* ok ack, outcnt == 1, q! == rq */
#define NE_OK_ACK4       9      /* ok ack, outcnt > 1 */

/*
 * Connection-Mode events
 */
#define NE_CONN_REQ     10      /* connect request */
#define NE_CONN_RES     11      /* connect response */
#define NE_DISCON_REQ   12      /* disconnect request */
#define NE_DATA_REQ     13      /* data request */
#define NE_EXDATA_REQ   14      /* expedited data request */
#define NE_CONN_IND     16      /* connect indication */
#define NE_CONN_CON     17      /* connect confirm */
#define NE_DATA_IND     18      /* data indication */
#define NE_EXDATA_IND   19      /* expedited data indication */
#define NE_DISCON_IND1  21      /* disconnect indication, outcnt == 0 */
#define NE_DISCON_IND2  22      /* disconnect indication, outcnt == 1 */
#define NE_DISCON_IND3  23      /* disconnect indication, outcnt > 1 */
#define NE_PASS_CON     24      /* pass connection */
#define NE_RESET_REQ    28      /* reset request */
#define NE_RESET_RES    29      /* reset response */
#define NE_DATACK_REQ   30      /* data acknowledgement request */
#define NE_DATACK_IND   31      /* data acknowledgement indication */
#define NE_RESET_IND    32      /* reset indication */
#define NE_RESET_CON    33      /* reset confirm */

/*
 * Connection-less events
 */
#define NE_UNITDATA_REQ 25      /* unitdata request */
#define NE_UNITDATA_IND 26      /* unitdata indication */
#define NE_UDERROR_IND  27      /* unitdata error indication */

#define NE_NOEVENTS     36      /* no events */

/*
 * NPI interface states
 */
#define NS_UNBND        0       /* NS user not bound to network address */
#define NS_WACK_BREQ    1       /* Awaiting acknowledgement of N_BIND_REQ */
#define NS_WACK_UREQ    2       /* Pending acknowledgement for N_UNBIND_REQ */
#define NS_IDLE         3       /* Idle, no connection */
#define NS_WACK_OPTREQ  4       /* Pending acknowledgement of N_OPTMGMT_REQ */
#define NS_WACK_RRES    5       /* Pending acknowledgement of N_RESET_RES */
#define NS_WCON_CREQ    6       /* Pending confirmation of N_CONN_REQ */
#define NS_WRES_CIND    7       /* Pending response of N_CONN_REQ */
#define NS_WACK_CRES    8       /* Pending acknowledgement of N_CONN_RES */
#define NS_DATA_XFER    9       /* Connection-mode data transfer */
#define NS_WCON_RREQ   10       /* Pending confirmation of N_RESET_REQ */
#define NS_WRES_RIND   11       /* Pending response of N_RESET_IND */
#define NS_WACK_DREQ6  12       /* Waiting ack of N_DISCON_REQ */
#define NS_WACK_DREQ7  13       /* Waiting ack of N_DISCON_REQ */
#define NS_WACK_DREQ9  14       /* Waiting ack of N_DISCON_REQ */
#define NS_WACK_DREQ10 15       /* Waiting ack of N_DISCON_REQ */
#define NS_WACK_DREQ11 16       /* Waiting ack of N_DISCON_REQ */

#define NS_NOSTATES 18          /* No states */

/*
 * N_ERROR_ACK error return code values
 */
#define NBADADDR       1        /* Incorrect address format/illegal address *
                                   information */
#define NBADOPT        2        /* Options in incorrect format or contain
                                   illegal * information */
#define NACCESS        3        /* User did not have proper permissions */
#define NNOADDR        5        /* NS Provider could not allocate address */
#define NOUTSTATE      6        /* Primitive was issues in wrong sequence */
#define NBADSEQ        7        /* Sequence number in primitive was
                                   incorrect/illegal */
#define NSYSERR        8        /* UNIX system error occurred */
#define NBADDATA      10        /* User data spec. outside range supported by
                                   NS provider */
#define NBADFLAG      16        /* Flags specified in primitive were
                                   illegal/incorrect */
#define NNOTSUPPORT   18        /* Primitive type not supported by the NS
                                   provider */
#define NBOUND        19        /* Illegal second attempt to bind listener or
                                   default listener */
#define NBADQOSPARAM  20        /* QOS values specified are outside the range
                                   supported by the NS provider */
#define NBADQOSTYPE   21        /* QOS structure type specified is not
                                   supported by the NS provider */
#define NBADTOKEN     22        /* Token used is not associated with an open
                                   stream */
#define NNOPROTOID    23        /* Protocol id could not be allocated */

/* 
 * N_UDERROR_IND reason codes
 */
#define N_UD_UNDEFINED     10   /* no reason specified */
#define N_UD_TD_EXCEEDED   11   /* Transit delay exceeded */
#define N_UD_CONGESTION    12   /* NS Provider congestion */
#define N_UD_QOS_UNAVAIL   13   /* Requested QOS/service characteristic
                                   unavailable */
#define N_UD_LIFE_EXCEEDED 14   /* NSDU Lifetime exceeded */
#define N_UD_ROUTE_UNAVAIL 15   /* Suitable route unavailable */
#define N_UD_SEG_REQUIRED  16   /* Segmentation reqd where none permitted */

/*
 * NPI Originator for Resets and Disconnects
 */
#define N_PROVIDER           0x0100     /* provider originated reset/disconnect 
                                         */
#define N_USER               0x0101     /* user originated reset/disconnect */
#define N_UNDEFINED          0x0102     /* reset/disconnect originator
                                           undefined */

/*
 * NPI Disconnect & Reset reasons when the originator is the N_UNDEFINED
 */
#define N_REASON_UNDEFINED  0x0200

/*
 * NPI Disconnect reasons when the originator is the N_PROVIDER
 */
#define N_DISC_P             0x0300     /* Disconnection-permanent condition */
#define N_DISC_T             0x0301     /* Disconnection-transient condition */
#define N_REJ_NSAP_UNKNOWN   0x0302     /* Connection rejection-NSAP address
                                           unknown (permanent condition) */
#define N_REJ_NSAP_UNREACH_P 0x0303     /* Connection rejection-NSAP
                                           unreachable (permanent condition) */
#define N_REJ_NSAP_UNREACH_T 0x0304     /* Connection rejection-NSAP
                                           unreachable (transient condition) */

/*
 * NPI Disconnect reasons when the originator is the N_USER
 */
#define N_DISC_NORMAL        0x0400     /* Disconnection-normal condition */
#define N_DISC_ABNORMAL      0x0401     /* Disconnection-abnormal condition */
#define N_REJ_P              0x0402     /* Connection rejection-permanent
                                           condition */
#define N_REJ_T              0x0403     /* Connection rejection-transient
                                           condition */
#define N_REJ_INCOMPAT_INFO  0x0406     /* Connection rejection-incompatible
                                           information in NS-user-data */

/*
 * NPI Disconnect reasons when the originator is the N_USER or N_PROVIDER
 */
#define N_REJ_QOS_UNAVAIL_P  0x0305     /* Connection rejection-QOS unavailable 
                                           (permanent condition) */
#define N_REJ_QOS_UNAVAIL_T  0x0306     /* Connection rejection-QOS unavailable 
                                           (transient condition) */
#define N_REJ_UNSPECIFIED    0x0307     /* Connection rejection-reason
                                           unspecified */

/*
 * NPI Reset reasons when originator is N_PROVIDER
 */
#define N_CONGESTION         0x0500     /* Reset due to congestion */
#define N_RESET_UNSPECIFIED  0x0501     /* Reset-reason "unspecified" */

/*
 * NPI Reset reasons when originator is N_USER
 */
#define N_USER_RESYNC        0x0600     /* Reset due to user resynchronization */

/*
 * CONN_flags definition; (used in N_conn_req, N_conn_ind, N_conn_res, and
 * N_conn_con primitives)
 *
 * Flags to indicate support of network provider options; (used with the
 * OPTIONS_flags field of N_info_ack primitive)
 */
#define REC_CONF_OPT        0x00000001L /* Receipt Confirmation Selection and
                                           Support */
#define EX_DATA_OPT         0x00000002L /* Expedited Data Selection and Support 
                                         */

/*
 * This flag is used with the OPTIONS_flags field of N_info_ack as well as the
 * OPTMGMT_flags field of the N_optmgmt_req primitive
 */
#define DEFAULT_RC_SEL      0x00000003L /* Indicates if default receipt
                                           confirmation is selected */

/*
 * BIND_flags; (used with N_bind_req primitive)
 */
#define DEFAULT_LISTENER    0x00000001L /* indicates if this stream is the
                                           default listener */
#define TOKEN_REQUEST       0x00000002L /* indicates if "token" should be
                                           assigned to the stream */
#define DEFAULT_DEST        0x00000004L /* indicates if default dest. stream */

/*
 * QOS Parameter Definitions
 */
/*
 * Throughput
 *
 * This parameter is specified for both directions.
 */
typedef struct @{
        long thru_targ_value;           /* target throughput values */
        long thru_min_value;            /* minimum acceptable throughput value */
@} thru_values_t;
@tpindex thru_values_t

/*
 * Transit Delay
 */
typedef struct @{
        long td_targ_value;             /* target transit delay */
        long td_max_value;              /* maximum acceptable transit delay */
@} td_values_t;
@tpindex td_values_t

/*
 * Protection Values
 */
typedef struct @{
        long protect_targ_value;        /* target protection value */
        long protect_min_value;         /* minimum or available protection */
@} protection_values_t;
@tpindex protection_values_t

/*
 * Priority Values
 */
typedef struct @{
        long priority_targ_value;       /* target priority */
        long priority_min_value;        /* minimum acceptable priority */
@} priority_values_t;
@tpindex priority_values_t

/*
 * Types of protection specifications
 */
#define N_NO_PROT               0x00000000L     /* no protection */
#define N_PASSIVE_PROT          0x00000001L     /* protection against passive
                                                   monitoring */
#define N_ACTIVE_PROT           0x00000002L     /* protection against active
                                                   monitoring */
#define N_ACTIVE_PASSIVE_PROT   0x00000003L     /* protection against active
                                                   and passive monitoring */

/*
 * Cost Selection
 */
#define N_LEAST_EXPENSIVE       0x00000000L     /* choose least expensive means 
                                                 */

/*
 * QOS STRUCTURE TYPES AND DEFINED VALUES
 */
#define N_QOS_CO_RANGE1         0x0101
#define N_QOS_CO_SEL1           0x0102
#define N_QOS_CL_RANGE1         0x0103
#define N_QOS_CL_SEL1           0x0104
#define N_QOS_CO_OPT_RANGE1     0x0105
#define N_QOS_CO_OPT_SEL1       0x0106

/*
 * When a NS user/provider cannot determine the value of a QOS field, it should
 * return a value of QOS_UNKNOWN.
 */
#define QOS_UNKNOWN -1

/*
 * QOS range for CONS. (Used with N_CONN_REQ and N_CONN_IND.)
 */
typedef struct @{
        ulong n_qos_type;               /* always N_QOS_CO_RANGE */
        thru_values_t src_throughput_range;     /* source throughput range */
        thru_values_t dest_throughput_range;    /* destination throughput range 
                                                 */
        td_values_t transit_delay_range;        /* transit delay range */
        protection_values_t protection_range;   /* protection range */
        priority_values_t priority_range;       /* priority range */
@} N_qos_co_range_t;
@tpindex N_qos_co_range_t

/*
 * QOS selected for CONS. (Used with N_CONN_RES and N_CONN_CON.)
 */
typedef struct @{
        ulong n_qos_type;               /* always N_QOS_CO_SEL */
        long src_throughput_sel;        /* source throughput selected */
        long dest_throughput_sel;       /* destination throughput selected */
        long transit_delay_sel;         /* transit delay selected */
        long protection_sel;            /* NC protection selected */
        long priority_sel;              /* NC priority selected */
@} N_qos_co_sel_t;
@tpindex N_qos_co_sel_t

/*
 * QOS range for CLNS options management. (Used with N_INFO_ACK.)
*/
typedef struct @{
        ulong n_qos_type;               /* always N_QOS_CL_RANGE */
        td_values_t transit_delay_max;  /* maximum transit delay */
        ulong residual_error_rate;      /* residual error rate */
        protection_values_t protection_range;   /* protection range */
        priority_values_t priority_range;       /* priority range */
        long max_accept_cost;           /* maximum acceptable cost */
@} N_qos_cl_range_t;
@tpindex N_qos_cl_range_t

/*
 * QOS selection for CLNS options management. (Used with N_OPTMGMT_REQ and *
 * N_INFO_ACK.)
 */
typedef struct @{
        ulong n_qos_type;               /* always N_QOS_CL_sel */
        long transit_delay_max;         /* maximum transit delay */
        ulong residual_error_rate;      /* residual error rate */
        long protection_sel;            /* protection selected */
        long priority_sel;              /* priority selected */
        long max_accept_cost;           /* maximum acceptable cost */
@} N_qos_cl_sel_t;
@tpindex N_qos_cl_sel_t

/*
 * QOS range for CONS options management. (Used with N_OPTMGMT_REQ.)
 */
typedef struct @{
        ulong n_qos_type;               /* always N_QOS_CO_OPT_RANGE */
        thru_values_t src_throughput;   /* source throughput values */
        thru_values_t dest_throughput;  /* dest throughput values */
        td_values_t transit_delay_t;    /* transit delay values */
        long nc_estab_delay;            /* NC establishment delay */
        ulong nc_estab_fail_prob;       /* NC estab failure probability */
        ulong residual_error_rate;      /* residual error rate */
        ulong xfer_fail_prob;           /* transfer failure probability */
        ulong nc_resilience;            /* NC resilience */
        long nc_rel_delay;              /* NC release delay */
        ulong nc_rel_fail_prob;         /* NC release failure probability */
        protection_values_t protection_range;   /* protection range */
        priority_values_t priority_range;       /* priority range */
        long max_accept_cost;           /* maximum acceptable cost */
@} N_qos_co_opt_range_t;
@tpindex N_qos_co_opt_range_t

/*
 * QOS values selected for CONS options management. (Used with N_OPTMGMT_REQ *
 * and N_INFO_ACK.)
 */

typedef struct @{
        ulong n_qos_type;               /* always N_QOS_CO_OPT_SEL */
        thru_values_t src_throughput;   /* source throughput values */
        thru_values_t dest_throughput;  /* dest throughput values */
        td_values_t transit_delay_t;    /* transit delay values */
        long nc_estab_delay;            /* NC establishment delay */
        ulong nc_estab_fail_prob;       /* NC estab failure probability */
        ulong residual_error_rate;      /* residual error rate */
        ulong xfer_fail_prob;           /* transfer failure probability */
        ulong nc_resilience;            /* NC resilience */
        long nc_rel_delay;              /* NC release delay */
        ulong nc_rel_fail_prob;         /* NC release failure probability */
        long protection_sel;            /* protection selected */
        long priority_sel;              /* priority selected */
        long max_accept_cost;           /* maximum acceptable cost */
@} N_qos_co_opt_sel_t;
@tpindex N_qos_co_opt_sel_t

/*
 * NPI Primitive Definitions
 */

/*
 * Local management service primitives
 */

/*
 * Information request
 */
typedef struct @{
        ulong PRIM_type;                /* always N_INFO_REQ */
@} N_info_req_t;
@tpindex N_info_req_t

/*
 * Information acknowledgement
 */
typedef struct @{
        ulong PRIM_type;                /* always N_INFO_ACK */
        ulong NSDU_size;                /* maximum NSDU size */
        ulong ENSDU_size;               /* maximum ENSDU size */
        ulong CDATA_size;               /* connect data size */
        ulong DDATA_size;               /* discon data size */
        ulong ADDR_size;                /* address size */
        ulong ADDR_length;              /* address length */
        ulong ADDR_offset;              /* address offset */
        ulong QOS_length;               /* QOS values length */
        ulong QOS_offset;               /* QOS values offset */
        ulong QOS_range_length;         /* length of QOS values' range */
        ulong QOS_range_offset;         /* offset of QOS values' range */
        ulong OPTIONS_flags;            /* bit masking for options supported */
        ulong NIDU_size;                /* network i/f data unit size */
        long SERV_type;                 /* service type */
        ulong CURRENT_state;            /* current state */
        ulong PROVIDER_type;            /* type of NS provider */
        ulong NODU_size;                /* optimal NSDU size */
        ulong PROTOID_length;           /* length of bound protocol ids */
        ulong PROTOID_offset;           /* offset of bound protocol ids */
        ulong NPI_version;              /* version # of npi that is supported */
@} N_info_ack_t;
@tpindex N_info_ack_t

/*
 * Service types supported by NS provider
 */
#define N_CONS  1               /* Connection-mode network service supported */
#define N_CLNS  2               /* Connection-less network service supported */

/*
 * Valid provider types
 */
#define N_SNICFP    1
#define N_SUBNET    2

/*
 * Bind request
 */
typedef struct @{
        ulong PRIM_type;                /* always N_BIND_REQ */
        ulong ADDR_length;              /* length of address */
        ulong ADDR_offset;              /* offset of address */
        ulong CONIND_number;            /* requested # of connect-indications
                                           to be queued */
        ulong BIND_flags;               /* bind flags */
        ulong PROTOID_length;           /* length of bound protocol ids */
        ulong PROTOID_offset;           /* offset of bound protocol ids */
@} N_bind_req_t;
@tpindex N_bind_req_t

/*
 * Bind acknowledgement
 */
typedef struct @{
        ulong PRIM_type;                /* always N_BIND_ACK */
        ulong ADDR_length;              /* address length */
        ulong ADDR_offset;              /* offset of address */
        ulong CONIND_number;            /* connection indications */
        ulong TOKEN_value;              /* value of ``token'' assigned to
                                           stream */
        ulong PROTOID_length;           /* length of bound protocol ids */
        ulong PROTOID_offset;           /* offset of bound protocol ids */
@} N_bind_ack_t;
@tpindex N_bind_ack_t

/*
 * Unbind request
 */
typedef struct @{
        ulong PRIM_type;                /* always N_UNBIND_REQ */
@} N_unbind_req_t;
@tpindex N_unbind_req_t

/*
 * Options management request
 */
typedef struct @{
        ulong PRIM_type;                /* always N_OPTMGMT_REQ */
        ulong QOS_length;               /* length of QOS parameter values */
        ulong QOS_offset;               /* offset of QOS parameter values */
        ulong OPTMGMT_flags;            /* options management flags */
@} N_optmgmt_req_t;
@tpindex N_optmgmt_req_t

/*
 * Error acknowledgement for CONS services
 */
typedef struct @{
        ulong PRIM_type;                /* always N_ERROR_ACK */
        ulong ERROR_prim;               /* primitive in error */
        ulong NPI_error;                /* NPI error code */
        ulong UNIX_error;               /* UNIX error code */
@} N_error_ack_t;
@tpindex N_error_ack_t

/*
 * Successful completion acknowledgement
 */
typedef struct @{
        ulong PRIM_type;                /* always N_OK_ACK */
        ulong CORRECT_prim;             /* primitive being acknowledged */
@} N_ok_ack_t;
@tpindex N_ok_ack_t

/*
 * CONS PRIMITIVES
 */

/*
 * Network connection request
 */
typedef struct @{
        ulong PRIM_type;                /* always N_CONN_REQ */
        ulong DEST_length;              /* destination address length */
        ulong DEST_offset;              /* destination address offset */
        ulong CONN_flags;               /* bit masking for options flags */
        ulong QOS_length;               /* length of QOS parameter values */
        ulong QOS_offset;               /* offset of QOS parameter values */
@} N_conn_req_t;
@tpindex N_conn_req_t

/*
 * Connection indication
 */
typedef struct @{
        ulong PRIM_type;                /* always N_CONN_IND */
        ulong DEST_length;              /* destination address length */
        ulong DEST_offset;              /* destination address offset */
        ulong SRC_length;               /* source address length */
        ulong SRC_offset;               /* source address offset */
        ulong SEQ_number;               /* sequence number */
        ulong CONN_flags;               /* bit masking for options flags */
        ulong QOS_length;               /* length of QOS parameter values */
        ulong QOS_offset;               /* offset of QOS parameter values */
@} N_conn_ind_t;
@tpindex N_conn_ind_t

/*
 * Connection response
 */
typedef struct @{
        ulong PRIM_type;                /* always N_CONN_RES */
        ulong TOKEN_value;              /* NC response token value */
        ulong RES_length;               /* responding address length */
        ulong RES_offset;               /* responding address offset */
        ulong SEQ_number;               /* sequence number */
        ulong CONN_flags;               /* bit masking for options flags */
        ulong QOS_length;               /* length of QOS parameter values */
        ulong QOS_offset;               /* offset of QOS parameter values */
@} N_conn_res_t;
@tpindex N_conn_res_t

/*
 * Connection confirmation
 */
typedef struct @{
        ulong PRIM_type;                /* always N_CONN_CON */
        ulong RES_length;               /* responding address length */
        ulong RES_offset;               /* responding address offset */
        ulong CONN_flags;               /* bit masking for options flags */
        ulong QOS_length;               /* length of QOS parameter values */
        ulong QOS_offset;               /* offset of QOS parameter values */
@} N_conn_con_t;
@tpindex N_conn_con_t

/*
 * Connection mode data transfer request
 */
typedef struct @{
        ulong PRIM_type;                /* always N_DATA_REQ */
        ulong DATA_xfer_flags;          /* data transfer flags */
@} N_data_req_t;
@tpindex N_data_req_t

/*
 * NPI MORE_DATA_FLAG for segmenting NSDU into more than 1 NIDUs
 */
#define N_MORE_DATA_FLAG    0x00000001L /* Indicates that the next NIDU is part 
                                           of this NSDU */

/* 
 * NPI Receipt confirmation request set flag
 */
#define N_RC_FLAG           0x00000002L /* Indicates if receipt confirmation is 
                                           required */

/*
 * Incoming data indication for an NC
 */
typedef struct @{
        ulong PRIM_type;                /* always N_DATA_IND */
        ulong DATA_xfer_flags;          /* data transfer flags */
@} N_data_ind_t;
@tpindex N_data_ind_t

/*
 * Data acknowledgement request
 */
typedef struct @{
        ulong PRIM_type;                /* always N_DATACK_REQ */
@} N_datack_req_t;
@tpindex N_datack_req_t

/*
 * Data acknowledgement indication
 */
typedef struct @{
        ulong PRIM_type;                /* always N_DATACK_IND */
@} N_datack_ind_t;
@tpindex N_datack_ind_t

/*
 * Expedited data transfer request
 */
typedef struct @{
        ulong PRIM_type;                /* always N_EXDATA_REQ */
@} N_exdata_req_t;
@tpindex N_exdata_req_t

/*
 * Expedited data transfer indication
 */
typedef struct @{
        ulong PRIM_type;                /* always N_EXDATA_IND */
@} N_exdata_ind_t;
@tpindex N_exdata_ind_t

/*
 * NC reset request
 */
typedef struct @{
        ulong PRIM_type;                /* always N_RESET_REQ */
        ulong RESET_reason;             /* reason for reset */
@} N_reset_req_t;
@tpindex N_reset_req_t

/*
 * NC reset indication
 */
typedef struct @{
        ulong PRIM_type;                /* always N_RESET_IND */
        ulong RESET_orig;               /* reset originator */
        ulong RESET_reason;             /* reason for reset */
@} N_reset_ind_t;
@tpindex N_reset_ind_t

/*
 * NC reset response
 */
typedef struct @{
        ulong PRIM_type;                /* always N_RESET_RES */
@} N_reset_res_t;
@tpindex N_reset_res_t

/*
 * NC reset confirmed
 */
typedef struct @{
        ulong PRIM_type;                /* always N_RESET_CON */
@} N_reset_con_t;
@tpindex N_reset_con_t

/*
 * NC disconnection request
 */
typedef struct @{
        ulong PRIM_type;                /* always N_DISCON_REQ */
        ulong DISCON_reason;            /* reason */
        ulong RES_length;               /* responding address length */
        ulong RES_offset;               /* responding address offset */
        ulong SEQ_number;               /* sequence number */
@} N_discon_req_t;
@tpindex N_discon_req_t

/*
 * NC disconnection indication
 */
typedef struct @{
        ulong PRIM_type;                /* always N_DISCON_IND */
        ulong DISCON_orig;              /* originator */
        ulong DISCON_reason;            /* reason */
        ulong RES_length;               /* address length */
        ulong RES_offset;               /* address offset */
        ulong SEQ_number;               /* sequence number */
@} N_discon_ind_t;
@tpindex N_discon_ind_t

/*
 * CLNS PRIMITIVES
 */

/*
 * Unitdata transfer request
 */
typedef struct @{
        ulong PRIM_type;                /* always N_UNITDATA_REQ */
        ulong DEST_length;              /* destination address length */
        ulong DEST_offset;              /* destination address offset */
        ulong RESERVED_field[2];        /* reserved field for DLPI
                                           compatibility */
@} N_unitdata_req_t;
@tpindex N_unitdata_req_t

/*
 * Unitdata transfer indication
 */
typedef struct @{
        ulong PRIM_type;                /* always N_UNITDATA_IND */
        ulong SRC_length;               /* source address length */
        ulong SRC_offset;               /* source address offset */
        ulong DEST_length;              /* source address length */
        ulong DEST_offset;              /* source address offset */
        ulong ERROR_type;               /* reserved field for DLPI
                                           compatibility */
@} N_unitdata_ind_t;
@tpindex N_unitdata_ind_t

/*
 * Unitdata error indication for CLNS services
 */
typedef struct @{
        ulong PRIM_type;                /* always N_UDERROR_IND */
        ulong DEST_length;              /* destination address length */
        ulong DEST_offset;              /* destination address offset */
        ulong RESERVED_field;           /* reserved field for DLPI
                                           compatibility */
        ulong ERROR_type;               /* error type */
@} N_uderror_ind_t;
@tpindex N_uderror_ind_t

/*
 * The following represents a union of all the NPI primitives
 */
union N_primitives @{
        ulong type;
        N_info_req_t info_req;          /* information request */
        N_info_ack_t info_ack;          /* information acknowledgement */
        N_bind_req_t bind_req;          /* bind request */
        N_bind_ack_t bind_ack;          /* bind acknowledgement */
        N_unbind_req_t unbind_req;      /* unbind request */
        N_optmgmt_req_t optmgmt_req;    /* options management request */
        N_error_ack_t error_ack;        /* error acknowledgement */
        N_uderror_ind_t uderror_ind;    /* unitdata error indication */
        N_ok_ack_t ok_ack;              /* ok acknowledgement */
        N_conn_req_t conn_req;          /* connect request */
        N_conn_ind_t conn_ind;          /* connect indication */
        N_conn_res_t conn_res;          /* connect response */
        N_conn_con_t conn_con;          /* connect confirm */
        N_data_req_t data_req;          /* data request */
        N_data_ind_t data_ind;          /* data indication */
        N_datack_req_t datack_req;      /* data acknowledgement request */
        N_datack_ind_t datack_ind;      /* data acknowledgement indication */
        N_exdata_req_t exdata_req;      /* expedited data request */
        N_exdata_ind_t exdata_ind;      /* expedited data indication */
        N_reset_req_t reset_req;        /* reset request */
        N_reset_ind_t reset_ind;        /* reset indication */
        N_reset_res_t reset_res;        /* reset response */
        N_reset_con_t reset_con;        /* reset confirm */
        N_discon_req_t discon_req;      /* disconnect request */
        N_discon_ind_t discon_ind;      /* disconnect indication */
        N_unitdata_req_t unitdata_req;  /* unitdata request */
        N_unitdata_ind_t unitdata_ind;  /* unitdata indication */
@};
@tpindex N_primitives
@end smallexample

@node Glossary
@unnumbered Glossary

@table @emph
@item Signalling Data Link Service Data Unit
A grouping of SDL user data whose boundaries are preserved from one end of the
signalling data link connection to the other.
@item Data transfer
The phase in connection and connectionless modes that supports the transfer of
data between to signalling data link users.
@item SDL provider
The signalling data link layer protocol that provides the services of the
signalling data link interface.
@item SDL user
The user-level application or user-level or kernel-level protocol that accesses
the services of the signalling data link layer.
@item Local management
The phase in connection and connectionless modes in which a SDL user initializes
a stream and attaches a PPA address to the stream.  Primitives in this phase
generate local operations only.
@item PPA
The point at which a system attaches itself to a physical communications medium.
@item PPA identifier
An identifier of a particular physical medium over which communication
transpires.
@end table

@node Acronyms
@unnumbered Acronyms

@multitable {SDL SDU}{International Telecommunications Union}
@item SDLI @tab Signalling Data Link Interface
@item SDL @tab Signalling Data Link
@item SDL SDU @tab Signalling Data Link Service Data Unit
@item ITU-T @tab International Telecommunications Union - Telecom Sector
@item PPA @tab Physical Point of Attachment
@end multitable

@node Bibliography
@unnumbered Bibliography
@enumerate
@item ITU-T Recommendation X.210, (Geneva, 1993), ``Information Technology --- Open Systems Interconnection --- Basic reference model: Conventions for the definition of OSI services,'' ISO/IEC 10731:1994.
@item ITU-T Recommendation X.217, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Service definition for the Association Control Service Element,'' ISO/IEC 8649:1996.
@item ITU-T Recommendation X.227, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Connection-oriented protocol for the Association Control Service Element: Protocol Specification,'' ISO/IEC 8650-1.
@item ITU-T Recommendation X.237, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Connectionless protocol for the Association Control Service Element: Protocol Specification,'' ISO/IEC 10035-1 : 1995.
@item ITU-T Recommendation X.216, (Geneva, 1994), ``Information Technology --- Open Systems Interconnection --- Presentation service definition,'' ISO/IEC 8822:1994.
@item ITU-T Recommendation X.226, (Geneva, 1994), ``Information Technology --- Open Systems Interconnection --- Connection-oriented presentation protocol: Protocol specification,'' ISO/IEC 8823-1:1994.
@item ITU-T Recommendation X.236, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Connectionless presentation protocol: Protocol specification,'' ISO/IEC 9576-1:1995.
@item ITU-T Recommendation X.215, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Session service definition,'' ISO/IEC 8326:1996.
@item ITU-T Recommendation X.225, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Connection-oriented session protocol: Protocol specification,'' ISO/IEC 8327-1:1996.
@item ITU-T Recommendation X.235, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Connectionless session protocol: Protocol specification,'' ISO/IEC 9548-1:1995.
@item ITU-T Recommendation X.214, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Transport service definition,'' ISO/IEC 8072:1996.
@item ITU-T Recommendation X.224
@item ITU-T Recommendation Q.700
@item ITU-T Recommendation Q.701
@item ITU-T Recommendation Q.702
@item ITU-T Recommendation Q.703
@item ITU-T Recommendation Q.704
@item Geoffrey Gerrien, ``CDI - Application Program Interface Guide,'' Gcom, Inc., March 1999.
@item ITU-T Recommendation Q.771, (Geneva, 1993), ``Signalling System No. 7 --- Functional description of transaction capabilities,'' (White Book).
@end enumerate

@node Index
@unnumbered Index

@printindex cp

@c @section Primitive Index

@c @printindex pr

@c @section Primitive Structure and Type Index
@c @printindex tp

@c @section Primitive Structure Field Index

@c @printindex vr

@page
@shortcontents
@page
@contents
@bye
