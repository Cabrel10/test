'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) register_strdev.9.man,v 0.9.2.7 2006/04/05 09:43:35 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:43:35 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" register_strdev.9.man,v
.\" Revision 0.9.2.7  2006/04/05 09:43:35  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database strcompat.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so strcompat.macros
.\"
.\"
.TH REGISTER_STRDEV 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B register_strdev
\- register a \fISTREAMS\fR device
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.br
.B #include <sys/strconf.h>
.HP
.BI "int register_strdev(struct cdevsw *" cdev ", major_t " major );
.\"
.\"
.SH ARGUMENTS
.PP
.TP \w'major\(em'u
.I cdev
a pointer to a
.BR cdevsw (9)
structure indicating the characteristics of the driver.
The following members of the
.BR cdevsw (9)
structure, pointed to by
.IR cdev ,
are significant:
.RS
.TP
.I d_name
the name of the driver.  This name is used to register the character major
device number.
.TP
.I d_str
a pointer to the
.BR streamtab (9)
structure describing the
.I STREAMS
device.
.TP
.I d_flag
flags indicating options associated with the device.  See
.BR cdevsw (9)
for more information.
.TP
.I d_kmod
a pointer to the kernel module
.RB "(typically " THIS_MODULE )
to be incremented when the driver is opened
or
.I STREAMS
subsystem resource allocations are made,
and decremented when the driver is
closed or
.I STREAMS
subsystem resources are freed.
.RE
.TP
.I major
the (external) character major device number to register, or zero (0),
indicating that an available character major device number is to be selected
and assigned.
.\"
.\"
.SH DESCRIPTION
.PP
.BR register_strdev ()
registers the
.I STREAMS
device described by the
.BR cdevsw (9)
structure,
.IR cdev ,
against the character major device number specified by
.IR major .
.PP
.I major
can also be set to zero (0)
to indicate that the
.I STREAMS
executive should assign an available character major device number.
.\"
.\"
.SH USAGE
.PP
.BR register_strdev ()
can be called multiple times for the same device driver with different
selections of the
.I major
device number.  This has the effect that multiple (external) character major
device numbers will be assigned to the
.I STREAMS
device.
.\"
.\"
.SH RETURN
.PP
Upon success,
.BR register_strdev ()
registers the
.I STREAMS
driver described by
.I cdev
and returns a positive number returning the specified or assigned character
major device number.  Upon failure,
.BR register_strdev ()
does not effect registration and returns a negative error number.
.\"
.\"
.SH ERRORS
.PP
When
.BR register_strdev ()
fails to register the specified
.I STREAMS
driver, it returns an appropriate negative
error number as follows:
.TP \w'[EINVAL]\(em'u
.RB [ EINVAL ]
.I cdev
is
.BR NULL ,
or the
.I cdev->d_name
is invalid.
.TP
.RB [ EINVAL ]
.I major
is invalid
.RB ( ">= MAX_CHRDEV" ).
.TP
.RB [ EPERM ]
the requested character major device number,
.IR major ,
already has a
.BR cdevsw (9)
structure, other than
.IR cdev ,
registered against it.
.TP
.RB [ EBUSY ]
the module ID of the
.I STREAMS
module is already registered under a different name.
.TP
.RB [ EBUSY ]
the requested character major device number,
.IR major ,
is in use by a
.RI non- STREAMS
character special device.
.TP
.RB [ ENXIO ]
.I major
was zero (0) requesting dynamic allocation of a character major device number and no
character major device numbers are available for allocation.
.TP
.RB [ ENOMEM ]
the necessary device structures could not be allocated due to memory shortage.
.\"
.\"
.SH CONTEXT
.PP
.BR register_strdev ()
can be called from any blocking context.  Consideration for impact on
performance and latency should be given before calling
.BR register_strdev ()
from soft or hard interrupt context.
Typically,
.BR register_strdev ()
is called from the
.BR module_init (9)
procedure of a kernel module associated with the
.I STREAMS
device.
.\"
.\"
.SH MP-STREAMS
.PP
.BR register_strdev ()
is MP-safe.
.\"
.\"
.SH NOTICES
.PP
Loadable kernel modules that call
.BR register_strdev ()
when loading
must call
.BR unregister_strdev (9)
before unloading.
.BR unregister_strdev (9)
must be called with the same value of
.I cdev
with which
.BR register_strdev ()
was called.
.PP
Drivers registered with
.BR register_strdev ()
will appear in
.BR /proc/streams/devices .
.PP
Drivers registered with
.BR register_strdev ()
will also appear as a device directory in
.BR /dev/streams ,
when the
.BR specfs (5)
filesystem has been mounted on
.BR /dev/streams .

.\"
.\"
.SH EXAMPLES
.PP
Following is an example of registration and unregistration from the
.I STREAMS
Administrative Driver (see
.BR sad (4)):
.PP
.nf
\fC\s-2
static struct module_info sad_minfo = {
    mi_idnum:0,
    mi_idname:CONFIG_STREAMS_SAD_NAME,
    mi_minpsz:0,
    mi_maxpsz:INFPSZ,
    mi_hiwat:STRHIGH,
    mi_lowat:STRLOW,
};

static struct qinit sad_qinit = {
    qi_putp:sad_put,
    qi_open:sad_open,
    qi_close:sad_close,
    qi_minfo:&sad_minfo,
};

static struct streamtab sad_info = {
    st_rdinit:&sad_qinit,
    st_wrinit:&sad_qinit,
};

static struct cdevsw sad_cdev = {
    d_name:CONFIG_STREAMS_SAD_NAME,
    d_str:&sad_info,
    d_flag:0,
    d_kmod:THIS_MODULE,
};

static int __init sad_init(void)
{
    int err;
    cmn_err(CE_NOTE, SAD_BANNER);
    err = register_strdev(makedevice(major, 0), &sad_cdev);
    if (err < 0)
        return (err);
    if (err > 0)
        major = err;
    bzero(&sads, sizeof(sads));
    return (0);
};
static void __exit sad_exit(void)
{
    unregister_strdev(makedevice(major, 0), &sad_cdev);
};

module_init(sad_init);
module_exit(sad_exit);
\s+2\fP
.fi
.\"
.\"
.SH "SEE ALSO"
.PP
.BR unregister_strdev (9),
.BR register_strdev_major (9),
.BR unregister_strdev_major (9),
.BR register_strdev_minor (9),
.BR unregister_strdev_minor (9),
.BR register_inode (9),
.BR unregister_inode (9),
.BR register_inode_major (9),
.BR unregister_inode_major (9),
.BR register_inode_minor (9),
.BR unregister_inode_minor (9),
.BR lis_register_strdev (9),
.BR lis_unregister_strdev (9),
.\"
.\"
.SH BUGS
.PP
.BR register_strdev ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR register_strdev ()
is a
.B Linux Fast-STREAMS
.[
LfS
.]
implementation specific function.  Registration of
.I STREAMS
drivers and modules in inherently implementation specific and non-portable.
Different implementation provide different mechanisms.
See
.BR STREAMS (9)
for mechanisms compatible with other implementations
and additional compatibility considerations.
.\"
.\"
.SH CONFORMANCE
.PP
Registration and unregistration of \fISTREAMS\fR drivers is implementation
specific and not subject to standardization.
.BR register_strdev ()
is a
.B Linux Fast-STREAMS
.[
LfS
.]
implementation specific function.
.\"
.\"
.SH HISTORY
.PP
.BR register_strdev ()
first appeared in
.BR "Linux Fast-STREAMS" .
.[
LfS
.]
.\"
.\"
.[
$LIST$
.]
.TI
