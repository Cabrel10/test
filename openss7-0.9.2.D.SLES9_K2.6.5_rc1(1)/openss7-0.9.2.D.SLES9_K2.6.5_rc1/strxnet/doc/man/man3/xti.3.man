'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) xti.3.man,v 0.9.2.8 2006/04/05 09:44:44 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:44 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" xti.3.man,v
.\" Revision 0.9.2.8  2006/04/05 09:44:44  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database strxnet.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so strxnet.macros
.\"
.\"
.\"
.\"
.TH XNET 3 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ Library Calls"
.\"
.\"
.SH NAME
.BR xti ", " xnet
\- XNS 5.2 XTI/TLI Library
.BR "" ( libxnet )
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/xti.h>
.HP 8
.BI "int t_accept(int " fd ", int " connfd ", struct t_call *" call );
.PD 0
.HP 8
.BI "void *t_alloc(int " fd ", int " type ", int " fields );
.HP 8
.BI "int t_bind(int " fd ", struct t_bind *" req ", struct t_bind *" ret );
.HP 8
.BI "int t_close(int " fd );
.HP 8
.BI "int t_connect(int " fd ", struct t_call *" sndcall ", struct t_call *" rcvcall );
.HP 8
.BI "extern int t_errno;"
.HP 8
.BI "void t_error(char *" errmsg ) ;
.HP 8
.BI "int t_free(void *" ptr ", int " type );
.HP 8
.BI "int t_getinfo(int " fd ", struct t_info *" info );
.HP 8
.BI "int t_getstate(int " fd );
.HP 8
.BI "int t_listen(int " fd ", struct t_call *" call );
.HP 8
.BI "int t_look(int " fd );
.HP 8
.BI "int t_open(char *" path ", int " oflag ", struct t_info *" info );
.HP 8
.BI "int t_optmgmt(int " fd ", const struct t_optmgmt *" req ", struct t_optmgmt *" ret );
.HP 8
.BI "int t_rcvconnect(int " fd ", struct t_call *" call );
.HP 8
.BI "int t_rcvdis(int " fd ", struct t_discon *" dis );
.HP 8
.BI "int t_rcv(int " fd ", char *" buf ", unsigned int " nbytes ", int *" flags );
.HP 8
.BI "int t_rcvreldata(int " fd ", struct t_discon *" discon );
.HP 8
.BI "int t_rcvrel(int " fd );
.HP 8
.BI "int t_rcvudata(int " fd ", struct t_unitdata *" data ", int *" flags );
.HP 8
.BI "int t_rcvuderr(int " fd ", struct t_uderr *" err );
.HP 8
.BI "int t_rcvv(int " fd ", struct t_iovec *" iov ", unsigned int " iovcnt ", int *" flags );
.HP 8
.BI "int t_rcvvudata(int " fd ", struct t_unitdata *" data ", struct t_iovec *" iov ", unsigned int " iovcnt ", int *" flags );
.HP 8
.BI "int t_snddis(int " fd ", const struct t_call *" call );
.HP 8
.BI "int t_snd(int " fd ", char *" buf ", unsigned int " nbytes ", int " flags );
.HP 8
.BI "int t_sndreldata(int " fd ", struct t_discon *" discon );
.HP 8
.BI "int t_sndrel(int " fd );
.HP 8
.BI "int t_sndudata(int " fd ", struct t_unitdata *" data );
.HP 8
.BI "int t_sndv(int " fd ", struct t_iovec *" iov ", unsigned int " iovcnt ", int " flags );
.HP 8
.BI "int t_sndvudata(int " fd ", struct t_unitdata *" data ", struct t_iovec *" iov ", unsigned int " iovcnt ", int " flags );
.HP 8
.BI "int t_sync(int " fd );
.HP 8
.BI "int t_unbind(int " fd );
.PD
.\"
.\"
.SH OVERVIEW
.PP
.\"
.\"
.SH DESCRIPTION
.PP
.B libxnet
is an
.B OpenSS7
implementation of the XNS 5.2 XTI/TLI Library for
.B LiS
(Linux STREAMS).
.\"
.\"
.SH OPTIONS
.PP
.\"
.\"
.SS "XTI/TLI Generic Options"
.PP
Several options are independent of transport service provider.  These options
are specified at the option level
.BR XTI_GENERIC ,
and are defined as follows:
.\"
.TP
.B XTI_DEBUG
This option enables debugging.  The values of this option are implementation
defined.  Debugging is disabled if the option is specified with \*(lqno
value\*(rq; that is, with an option header only.  The system supplies
utilities to process the traces.  Note that an implementation may also provide
other means for debugging.
.RS
.PP
This option is formatted as an array of
.BR t_uscalar_t .
This option is an
.IR "absolute requirement" .
Legal values are implementation defined.
.PP
This option can be negotiated in any XTI/TLI transport endpoint state.
This option can be negotiated using the
.BR t_optmgmt "(3), " t_connect "(3) or " t_accept (3)
XTI/TLI library calls.
.RE
.\"
.TP
.B XTI_LINGER
This option is used to linger the execution of a
.BR t_close "(3) or " close (2)
if send data is still queue in the send buffer.  The option value specifies
the linger period.  If a
.BR close "(2) or " t_close (3)
is issued and the send buffer is not empty, the system attempts to send the
pending data within the linger period before closing the endpoint.  Data still
pending after the linger period has elapsed is discarded.
.RS
.PP
Depending on the implementation,
.BR t_close "(3) or " close (2)
either blocks for, at maximum, the linger period, or immediately returns,
whereupon the system holds the connection in existence for at most the linger
period.
.PP
This option is formatted as a
.B t_linger
structure, with the following members:
.sp
.nf
\fC\s-1\
struct t_linger {
    t_scalar_t l_onoff;    /* option on/off */
    t_scalar_t l_linger;   /* linger time */
};
\s+1\fP
.fi
.PP
The value of
.I l_onoff
is
.B T_YES
(on) or
.B T_NO
(off).
.I l_onoff
is an
.IR "absolute requirement" .
.PP
The value of
.I l_linger
determines the linger period in seconds.  The transport user can request the
default value by setting the to
.BR T_UNSPEC .
The default timeout value depends on the underlying transport provider (it is
often
.BR T_INFINITE ).
Legal values for this field are
.BR T_UNSPEC ", " T_INFINITE
and all non-negative numbers.
.I  l_linger
is not an
.IR "absolute requirement" .
The implementation may place upper and lower limits on the
.I l_linger
option value.  Requests that fall short of the lower limit are negotiated to
the lower limit.  Legal values are all positive numbers.
.PP
This option can be negotiated in any XTI/TLI transport endpoint state; however, the
negotiated value is not effective until
.BR t_close (3)
or
.BR close (2)
is called.
This option can be negotiated using the
.BR t_optmgmt "(3), " t_connect "(3) or " t_accept (3)
XTI/TLI library calls.
.PP
There are notes in
.B Linux 2.4
TCP code that say that if
.I l_onoff
is set to
.B T_YES
and
.I l_linger
is set to zero (0), that, per
.IR "RFC 793" ,
.[
rfc 793
.]
an abort will be sent.  This might be a way to resolve the problem sending
aborts.
.RE
.\"
.TP
.B XTI_RCVBUF
This option is used to adjust the internal buffer size allocated for the
receive buffer.  The buffer size may be increased for high-volume
connections, or decreased to limit the possible backlog of incoming data.
.RS
.PP
This option is formatted as a
.BR t_uscalar_t .
This request is not an
.IR "absolute requirement" .
The implementation may place upper and lower limits on the option value.
Requests that fall short of the lower limit are negotiated to the lower limit.
Legal values are all positive numbers.
.PP
This option can be negotiated in any XTI/TLI state; however, the negotiated value
will not be effective until the
.B T_DATAXFER
state is acheived.  This option can be negotiated using the
.BR t_optmgmt "(3), " t_connect "(3) or " t_accept (3)
XTI/TLI library calls.
.RE
.\"
.TP
.B XTI_RCVLOWAT
This option is used to set a low-water mark in the receive buffer.  The
option value gives the minimal number of bytes that must have accumulated
in the receive buffer before they become visible to the transport user.
If and when the amount of accumulated receive data exceeds the low-water
mark, a T_DATA event is created, an event mechansm (for example,
.BR poll "(2) or " select (2))
indicates the data, and the data can be read by
.BR t_rcv "(3) or " t_rcvudata (3).
.RS
.PP
This option is formatted as a
.BR t_uscalar_t .
This request is not an
.IR "absolute requirement" .
The implementation may place upper and lower limits on the option value.
Requests that fall short of the lower limit are negotiated to the lower limit.
Legal values are all positive numbers.
.PP
This option can be negotiated in any XTI/TLI state; however, the negotiated value
will not be effective until the
.B T_DATAXFER
state is acheived.  This option can be negotiated using the
.BR t_optmgmt "(3), " t_connect "(3) or " t_accept (3)
XTI/TLI library calls.
.RE
.\"
.TP
.B XTI_SNDBUF
This option is used to adjust the internal buffer size allocated for the
send buffer.
.RS
.PP
This option is formatted as a
.BR t_uscalar_t .
This request is not an
.IR "absolute requirement" .
The implementation may place upper and lower limits on the option value.
Requests that fall short of the lower limit are negotiated to the lower limit.
Legal values are all positive numbers.
.PP
This option can be negotiated in any XTI/TLI state; however, the negotiated value
will not be effective until the
.B T_DATAXFER
state is acheived.  This option can be negotiated using the
.BR t_optmgmt "(3), " t_connect "(3) or " t_accept (3)
XTI/TLI library calls.
.RE
.\"
.TP
.B XTI_SNDLOWAT
This option is used to set a low-water mark in the send buffer.  The
option value gives the minimal number of bytes that must have accumulated
in the send buffer before they are sent.
.RS
.PP
This option is formatted as a
.BR t_uscalar_t .
This request is not an
.IR "absolute requirement" .
The implementation may place upper and lower limits on the option value.
Requests that fall short of the lower limit are negotiated to the lower limit.
Legal values are all positive numbers.
.PP
This option can be negotiated in any XTI/TLI state; however, the negotiated value
will not be effective until the
.B T_DATAXFER
state is acheived.  This option can be negotiated using the
.BR t_optmgmt "(3), " t_connect "(3) or " t_accept (3)
XTI/TLI library calls.
.RE
.\"
.\"
.SH FUNCTIONS
.PP
.\"
.\"
.SS "Local Transport Endpoint Management"
.HP
.B Local Endpoint Management
functions are applicable to all transport service provider service types and
include functions to open and close a file descriptor associated, bind and
unbind a file descriptor from a local transport endpoint, manage options and
get information about the state, bound and connecting addresses, protocol
parameter limits of a local transport endpoint.
.RS
.sp
.BR t_open "(3) - open an endpoint"
.br
.BR t_close "(3) - close an endpoint"
.br
.BR t_bind "(3) - bind to an address"
.br
.BR t_unbind "(3) - unbind from an address"
.br
.BR t_optmgmt "(3) - manage options"
.br
.BR t_getinfo "(3) - return protocol information"
.br
.BR t_getprotaddr "(3) - get protocol addresses"
.br
.BR t_getstate "(3) - return the current state"
.RE
.HP
.B Local Event Management
functions are responsible for handling asynchronous events of the underlying
transport service provider and resynchronizing the XTI/TLI library with the
underlying transport service provider.
.RS
.sp
.BR t_sync "(3) - synchronize library with provider"
.br
.BR t_look "(3) - look at the current event"
.RE
.\"
.\"
.SS "Connection Oriented Endpoints"
A set of XTI/TLI Library calls are provided for performing protocol functions on
local transport endpoints for which the transport service provider is of a
connection oriented service type.  Connection oriented services have three
phases as follows:
.HP
.B Connection Establishement Phase
consists of either invoking outgoing connections or listening for and
accepting incoming connections.  Valid states for this phase are:
.BR T_IDLE ", " T_INCON ", and " T_OUTCON .
XTI/TLI Library calls used in the Connection Establishment Phare are as follows:
.RS
.sp
.BR t_listen "(3) - get a connection request"
.br
.BR t_accept "(3) - accept a connection request"
.br
.BR t_connect "(3) - establish a connection"
.br
.BR t_rcvconnect "(3) - receive connect request confirmation"
.br
.BR t_addleaf "(3) - add a point to a point to multipoint connection"
.br
.BR t_removeleaf "(3) - remove point from point to multipoint connection"
.br
.BR t_rcvleafchange "(3) - receive point added to point to multipoint connection"
.RE

.HP
.B Data Transfer Phase
consist of transfering data between connected transport endpoints.  Valid
states for this phase are:
.BR T_DATAXFER ", " T_OUTREL
(for incoming data) and
.BR T_INREL
(for outgoing data).
XTI/TLI Library calls used in the Data Transfer Phare are as follows:
.RS
.sp
.BR t_snd "(3) - send data"
.br
.BR t_sndv "(3) - gather and send data"
.br
.BR t_rcv "(3) - receive data"
.br
.BR t_rcvv "(3) - receive data and scatter"
.RE

.HP
.B Connection Release Phase
consists of either abortive or orderly release of the transport connection,
with or without user data.  Valid states for this phase are:
.BR T_DATAXFER ", " T_OUTREL ", and " T_INREL .
XTI/TLI Library calls used in the Connection Release Phare are as follows:
.RS
.sp
.BR t_rcvdis "(3) - receive abortive disconnect"
.br
.BR t_snddis "(3) - send abortive disconnect request"
.br
.BR t_rcvrel "(3) - acknowledge orderly release request"
.br
.BR t_sndrel "(3) - send orderly release request"
.br
.BR t_rcvreldata "(3) - acknowledge orderly release request with data"
.br
.BR t_sndreldata "(3) - send orderly release request with data"
.RE
.\"
.\"
.SS "Connectionless Endpoints"
A set of XTI/TLI Library calls are provided for performing protocol functions on
local transport endpoints for which the transport service provider is of a
connectionless service type.  Connectionless service has one phase as follows:
.HP
.B Data Transfer Phase
consists of transferring data between disconnected transport endpoints.  Valid
states for this phase are:
.BR T_IDLE .
XTI/TLI Library calls used in the Data Transfer Phase are as follows:
.RS
.sp
.BR t_rcvudata "(3) - receive unitdata"
.br
.BR t_rcvvudata "(3) - receive unitdata and scatter"
.br
.BR t_sndudata "(3) - send unitdata"
.br
.BR t_sndvudata "(3) - gather and send unitdata"
.RE
.\"
.\"
.SS "XTI/TLI Library functions"
A set of XTI/TLI Library calls are provided for error handling and utility.
These functions do not operate directly on a transport endpoint.
.HP
.B Error Handling
consists of the global external variable
.I t_errno
which holds all XTI/TLI Library call error numbers in a similar fashion to
.BR errno (3).
The following Error Handling functions are provided:
.RS
.sp
.BR t_errno "(3) - error number"
.br
.BR t_error "(3) - print an error message"
.br
.BR t_strerror "(3) - describe an XTI/TLI library error"
.RE

.HP
.B Utility Functions
provide for the allocation and deallocation of XTI/TLI library datastructures, and
equiry concerning XTI/TLI system confiruation parameters.
The following Utility Functions are provided:
.RS
.sp
.BR t_alloc "(3) - allocate a library structure"
.br
.BR t_free "(3) - free a library structure"
.br
.BR t_sysconf "(3) - configure XTI/TLI system parameters"
.RE
.\"
.\"
.SH "RETURN VALUES"
.PP
Upon success,
most XTI/TLI library functions return zero (0) or a positive integer reflecting a
returned paramter value.
Upon failure,
XTI/TLI library functions return -1 and set
.IR t_errno (3)
to an applicable error number.
.\"
.\"
.SH ERRORS
.PP
The errors that can be returned by XTI/TLI Library calls are detailed
in
.IR t_errno (3).
.\"
.\"
.SH "SEE ALSO"
.PP
.BR t_accept (3),
.BR t_addleaf (3),
.BR t_alloc (3),
.BR t_bind (3),
.BR t_close (3),
.BR t_connect (3),
.BR t_errno (3),
.BR t_error (3),
.BR t_free (3),
.BR t_getinfo (3),
.BR t_getprotaddr (3),
.BR t_getstate (3),
.BR t_listen (3),
.BR t_look (3),
.BR t_open (3),
.BR t_optmgmt (3),
.BR t_rcv (3),
.BR t_rcvconnect (3),
.BR t_rcvdis (3),
.BR t_rcvleafchange (3),
.BR t_rcvrel (3),
.BR t_rcvreldata (3),
.BR t_rcvudata (3),
.BR t_rcvuderr (3),
.BR t_rcvv (3),
.BR t_rcvvudata (3),
.BR t_removeleaf (3),
.BR t_snd (3),
.BR t_snddis (3),
.BR t_sndrel (3),
.BR t_sndreldata (3),
.BR t_sndudata (3),
.BR t_sndv (3),
.BR t_sndvudata (3),
.BR t_strerror (3),
.BR t_sync (3),
.BR t_sysconf (3),
.BR t_unbind (3),
.BR test-xnet (8),
.BR test-xnet_thr (8).
.\"
.\"
.SH BUGS
.PP
The XTI/TLI library
has been tested with the
.BR test-xnet (8)
and
.BR test-xnet_thr (8)
conformance test suites.
.PP
The XTI/TLI library
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
The XTI/TLI library functions are compatible with 
SVR4.2,
.[
svr42
.]
XNS 5.2,
.[
xns
.]
SUSv2.
.[
susv2
.]
.PP
Compatibility is tested using the
.BR test-xnet (8)
and
.BR test-xnet_thr (8)
test case executables and the
.I @PACKAGE_TITLE@
.B autotest
test suite.
.\"
.\"
.SH "CONFORMING TO"
.PP
The Open Group XNS Issue 5.2.
.[
xns
.]
.PP
Conformance is tested using the
.BR test-xnet (8)
and
.BR test-xnet_thr (8)
test case executables and the
.I @PACKAGE_TITLE@
.B autotest
test suite.
.\"
.\"
.SH HISTORY
.PP
The XTI/TLI interface first appeared in
.B SVR4.2\c
.
.[
svr42
.]
.\"
.\"
.SH VERSIONS
.PP
This manpage was written for the OpenSS7 XTI/TLI Library.
.\"
.\"
.[
$LIST$
.]
.T4
