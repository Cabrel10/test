'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) dev_t.9.man,v 0.9.2.7 2006/04/05 10:05:05 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 10:05:05 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" dev_t.9.man,v
.\" Revision 0.9.2.7  2006/04/05 10:05:05  brian
.\" - get references in right place
.\"
.\" Revision 0.9.2.6  2006/04/05 09:44:10  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH DEV_T 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B dev_t
\- \fISTREAMS\fP device type
.\"
.\"
.SH SYNOPSIS
.PP
.nf
\fC\s-1
.B "#include <sys/stream.h>

.B "#fndef __streams_dev_t
.B "typedef unsigned long __streams_dev_t;
.B "#define __streams_dev_t __streams_dev_t
.B "#endif

.B "#ifndef dev_t
.B "#define dev_t __streams_dev_t
.B "#endif
\s+1\fP
.fi
.\"
.\"
.SH MEMBERS
.PP
The
.B dev_t
is broken into two bit-fields:
.TP \w'14-bits\(em'u
.B 14-bits
for the major device number; and,
.PD 0
.TP
.B 18-bits
for the minor device number.
.PD
.\"
.\"
.SH INTERFACE
.PP
.IR DDI/DKI .
.\"
.\"
.SH OVERVIEW
.PP
.I "SVR 4.2 MP EFT"
.[
usldk
.]
provided
.B 14 bits
for the major device number and
.B 18 bits
for the minor device number.
Other operatings systems and versions are as follows:
.PP
.RS 0
.TS
box center tab(:);
lb|cb|cb
l|c|c.
OS/Version:Major:Minor
_
SVR 3:7:8
SVR 3.2:7:8
SVR 4:14:18
SVR 4.2:14:18
Linux 2.2:8:8
Linux 2.4:8:8
LiS 2.16:8:8
Linux 2.6:12:20
LiS 2.18:12:20
@PACKAGE@-@VERSION@:16:16
.TE
.RE
.PP
As can be seen from the table, above, the number of bits of major and minor device number varies
widely between operating systems and versions.
The sections that follow provide some of the history concerning device numbering in the various
systems mentioned.
.\"
.\"
.SS UNIX\(rg Device Numbering
.PP
The following pasage from the
.RI \(lq "The Magic Garden Explained" , \(rq
.[
svr4spg
.]
provides an interesting history to device numbering in the
.BR UNIX \(rg
system.  It is interesting from the perspective that
.B GNU/Linux
system device numbering has repeated the history of
.BR UNIX \(rg.
.PP
.RS 4n
.ll -4n
In versions of
.I UNIX\(rg System V
previous to
.IR "Release 4" ,
the major and minor device numbers were each 8-bit, and they were packed into a 16-bit word
(usually a C Language SHORT variable).  Under
.IR "UNIX\(rg System V Release 4" ,
the device number are held in a
.B dev_t
variable, which is often implemented as a 32-bit integer.  The major device number is held as 14
bits, and a further 18 bits are used for the minor device number.
.B dev_t
is often referred to as the \*(lqexpanded device type\*(rq, since it allows many more minor devices
than before.
.PP
Many drivers were written for earlier releases, and may eventually be ported to
.IR "UNIX\(rg System V Release 4" .
In earlier releases, some manufacturers got around the 256 minor device number limit by using
multiple major device numers for a device.  Devices were created with different major device numbers
(the external major device number) but they all mapped to the same device driver entry in the device
switch tables (the internal device number).  Even under this scheme, each major device could only
support 256 minor devices, but the driver could support amny more.  This has been recognized in
.IR "UNIX\(rg System V Relesae 4" ,
and functions are provided to do this mapping; for example, the function
.BR etoimajor ()
and so on, give a machine independent interface to the device number mapping.
.[
magic
.]
.ll +4n
.RE
.PP
(Actually, the major device number for
.I UNIX\(rg System V Release 3.2
were 7-bit instead of 8-bit.)
.\"
.SS Linux Device Numbering
.PP
Versions of the
.B Linux
kernel in the
.B 2.4
kernel series and prior to
.B 2.6
also provided an 8-bit major device number and an
8-bit minor device number grouped into a 16-bit combined device number.
.B Linux 2.6
kernels (and some patched
.B 2.4
kernels) now have larger device numbers.  These extended device
numbers are 12 bits for major device number and 20 bits for minor device number, with 32 bits for
the combined device number.
.\"
.SS LiS Device Numbering
.PP
.I LiS
.[
lis
.]
prior to the 2.18.0 release was incapable of providing an internal representation of the device
number and the number of minor device numbers for a device driver was restricted to 256, just as in
@cite{UNIX System V Release 3.2}.@footnote{Actually, 255 as the kernel reserved minor device number
255 for expansion.}  Many @url{http://www.openss7.org/, OpenSS7} device drivers written for
.I LiS
.[
lis
.]
would allocate additional major device numbers if required.  Good examples of devices that require
more than 255 minor device numbers are INET clone devices, SCTP streams, SS7 signalling link
streams, MG media channels, etc.  These streams are often
.BR I_PLINK ed
under a multiplexing driver and do not even consume a system file descriptor.
.\"
.SS @PACKAGE_TITLE@ Device Numbering
.PP
.B @PACKAGE_TITLE@
.[
lfs
.]
began with extended device numbering.  The
.I specfs
shadow special character device file system used by
.B @PACKAGE_TITLE@
uses the
.B inode
number to hold the
.B dev_t
device number instead of the
.IR inode->i_rdev ,
which on older kernels is only a 16-bit
.BR short .
.PP
In earlier versions of
.BR "@PACKAGE_TITLE@" ,
the internal device numbering is 16-bits for major device number and 16-bits for minor device
number.  This will soon be changed to 12-bits for major device number and 20-bits for minor device
number to accommodate the newer
.B Linux
scheme.
.PP
On
.B Linux 2.6
kernels that support the newer extended device numbers, external device numbers and internal device
numbers will be the same.  On
.B Linux 2.4
kernels with the older 16-bit device numbers, external device number and internal device numbers
will differ.  In some situations, an internal device number can exists with no corresponding
external device number (accessed only via a clone device or direct access to the mounted
.I specfs
shadow special character device file system).
.PP
.TS
tab(:);
lbcl.
etoimajor:(9):change external to internal major device number
getemajor:(9):tab get external major device number
geteminor:(9):get external minor device number
itoemajor:(9):change internal to external major device number
.TE
.PP
.B @PACKAGE_TITLE@
uses several device numbering schemes intended to be compatible with
.I SVR 4.2 MP DDI/DKI
.[
usldk
.]
and implementations based on
.I SVR 4.2
.[
svr42
.]
including
.IR AIX \(rg,
.[
aixspg
.]
.IR HP-UX \(rg,
.[
hpuxspg
.]
.IR LiS ,
.[
lis
.]
.IR OSF/1 \(rg,
.[
osfspg
.]
.IR Solaris \(rg,
.[
solspg
.]
.IR SUPER-UX \(rg,
.[
suxspg
.]
.IR UnixWare \(rg
.[
uw7spg
.]
and
.IR UXP/V \(rg.
.[
uxpspg
.]
.\"
.\"
.SH DESCRIPTION
.PP
.SS Device Labelling
.PP
There are several device labelling methods available in
.BR "@PACKAGE_TITLE@ Version @VERSION@" ,
as follows:
.IP 1. \w'1.\(em'u
External (Real) Device Numbering
.PD 0
.IP 2.
Internal (Extended) Device Numbering
.IP 3.
Cloning
.IP 4.
New Cloning
.IP 5.
Named STREAMS Device
.IP 6.
Mountable specfs Filesystem
.PD
.PP
Of these methods, the first four are numbering systems; the last two are mixed numbering and naming
systems.
The most powerful method of the six, is the last one:
.IR "Mountable specfs filesystem".
This last system provides the capabilities of a full named labelling system without regard to device
numbering.
.PP
The sections, below, describe these device labelling methods for
.BR "@PACKAGE_TITLE@ Version @VERSION@" .
.\"
.SS External (Real) Device Numbering
.PP
.I @PACKAGE_TITLE@ Version @VERSION@
provides real external device numbering using the functions
.BR getemajor (9),
.BR geteminor (9)
and
.BR makedevice (9).
When used on a
.I devp
argument passed to the
.IR qi_qopen (9)
procedures of a
.I STREAMS
driver or module,
.BR getemajor (9)
and
.BR geteminor (9)
will return the real external major or minor device number.  The real external
major or minor device number is the major or minor device number that is seen
by user applications.
.PP
A number of administrative utilities are provided that assist with the
assignment of device names and numbers and are useful in boot scripts:
.\".TS
.\"expand tab(:);
.\"lclssss.
.\"\fBautopush\fR(8):\-:T{
.\"verify modules and establish autopush lists
.\"T}
.\"\fBinsf\fR(8):\-:T{
.\"install special device files
.\"T}
.\"\fBscls\fR(8):\-:T{
.\"list STREAMS drivers
.\"T}
.\"\fBstrinfo\fR(8):\-:T{
.\"provide information on STREAMS drivers and modules
.\"T}
.\"\fBstrload\fR(8):\-:T{
.\"load or unload STREAMS drivers and modules
.\"T}
.\"\fBstrsetup\fR(8):\- :T{
.\"create STREAMS devices
.\"T}
.\".TE
.TP \w'strsetup(8)\(em'u
.BR autopush (8)
\-\ verify modules and establish autopush lists
.PD 0
.TP
.BR insf (8)
\-\ install special device files
.TP
.BR scls (8)
\-\ list
.I STREAMS
drivers
.TP
.BR strinfo (8)
\-\ provide information on
.I STREAMS
drivers and modules
.TP
.BR strload (8)
\-\ load or unload STREAMS drivers and modules
.TP
.BR strsetup (8)
\-\ create
.I STREAMS
devices
.PD
.PP
Another approach to establishment of dynamically allocated major device
numbers is to use the
.I LiS
.[
lis
.]
approach of creating minor device nodes using the
.BR mknod (9)
and
.BR unlink (9)
facilities provide by the
.I LiS
compatibility module.
But this approach does not work well with demand loading of kernel modules
because it relies on the
.B Linux
character device demand loading approach, or requires informing
.I STREAMS
of all devices and drivers when
.I STREAMS
is being compiled.
.PP
.I @PACKAGE_TITLE@ Version @VERSION@
supports the
.B Linux
character device module demand loading; however, the
.B Linux
mechanism requires prior knowledge of the character major device number.
Some of the administrative utilities above can load kernel modules and
established what major device number was assigned.  See the individual manual
pages for more information.
.\"
.SS Internal (Extended) Device Numbering
.PP
Internal extended minor device number is a scheme whereby the
.I STREAMS
device driver does not have to be concerned with architectural limitations
on the number or minor device numbers available to user applications
(0 to 255 in
.BR "Linux 2.4" ).
Instead, the driver treats the major device number as a base internal device
number against which a wide range of minor devices can be assigned (currently
0 to 65535).
For extenal applications, device numbering consists of multiple (real)
external major device numbers that correspond to a single base internal major
device number.  Internal extended device numbering is provided by the
.BR getmajor (9),
.BR getminor (9)
and
.BR makedevice (9)
facilities.
Conversions between external (real) major device numbers and internal (base)
major device numbers can be performed with the
.BR etoimajor (9)
and
.BR itoemajor (9)
utilities provided by the
.IR UnixWare \(rg
compatibility module.
.PP
Extended device numbering further complicates the matter of dynamic assignment
of major device numbers and makes it harder for boot and configuration scripts
to properly create device nodes.
.\"
.SS Cloning
.PP
The
.BR clone (4)
driver supports traditional clone devices.  Traditional clone devices work by
assigning the clone major device number and a unique minor device number to a
\(lqclone\(rq device.  When this device is opened, the minor device number of
the device is used as the new major device number and zero (0) is used as the
minor device number, and the
.IR qi_qopen (9)
is chained to the
.IR qi_qopen (9)
procedure of the new
.BR streamtab (9)
structure resulting from looking up this newly created device number.
.I sflag
is always set to
.B CLONEOPEN
when the traditional clone driver opens a device.
.PP
.BR getemajor (9),
.BR geteminor (9),
.BR getmajor (9)
and
.BR getminor (9)
still function as as normal on the resulting
.I devp
argument passed to the ultimate driver's
.IR qi_qopen (9)
procedure.  This is true both for base and extended major device numbers.
The following table illustrates the situation
(assuming that the major device number assigned to the
.BR clone (4)
device is 72):
.PP
.TS
expand tab(;);
c|c|c|c.
_
clone;external;internal;sflag
_
72:32;32:0;32:000;CLONEOPEN
72:35;35:0;32:256;CLONEOPEN
72:37;37:0;32:512;CLONEOPEN
_
.TE
.PP
If a driver wishes to assign an extended minor device number in response to a
.BR CLONEOPEN ,
it should use
.BR makedevice (9)
with the major number obtained with
.BR getmajor (9)
and an extended minor device number assigned by the driver.  In this way,
extended minor device numbers are transparent to the operation of the
.BR clone (4)
driver and
.BR CLONEOPEN .
.\"
.SS New Cloning
.PP
.I @PACKAGE_TITLE@ Version @VERSION@
supports the new cloning approach whereby a driver is permitted to alter the
device number returned in the
.I devp
argument to
.IR qi_qopen (9)
even though
.I sflag
is set to
.B DRVOPEN
instead of
.BR CLONEOPEN .
The driver, at its discretion, can treat any minor device number as a new
style clone device, although normally minor device number zero (0) is usually
used as the clone minor.
.PP
The driver may either use an external (real) major device number or the
internal (base) major device number.  That is, when calling
.BR makedevice (9)
to create the device to return to the
.I devp
argument to
.IR qi_qopen (9),
the driver can use an external (real) major device number (returned by
.BR getemajor (9))
combined with an assigned external (real) minor device number (from 0 to 255);
or, it can use an internal (base) major device number (returned by
.BR getmajor (9))
combined with an assigned extended minor device number (from 0 to 65535).
The latter approach is often easier to use.
.\"
.SS Named STREAMS Device
.PP
The
.BR nsdev (4)
driver provides for a Named
.I STREAMS
device.  This is a device numbering
approach unique to
.BR "@PACKAGE_TITLE@" .
The
.BR nsdev (4)
driver operates similar to the
.BR clone (4)
driver, however, the major number is derived from the prefix name of the device
and the minor number is taken directly from the minor number of the
.BR nsdev (4)
device.
.PP
The following table summarizes the approach (assuming that the major device
numbers assigned to the
.BR nsdev (4)
device are 74, 75, 76 and 77 and the major device numbers assigned to the
.BR inet (4)
driver are 32, 35 and 37):
.PP
.TS
expand tab(;);
cs|c|c|c.
_
nsdev;external;internal;sflag
.T&
lc|c|c|c.
_
inet;74:000;32:000;32:000;DRVOPEN
inet.udp;74:017;32:017;32:017;DRVOPEN
inet.99;74:099;32:099;32:099;DRVOPEN
inet.512;76:000;37:000;32:512;DRVOPEN
_
.TE
.PP
The
.BR nsdev (4)
device also has the characteristic that if a device name with a major device
number of the
.BR nsdev (4)
device is opened and there is no device loaded that corresponds to the prefix
name of the device from which to obtain a major device number, the
.BR nsdev (4)
will attempt to load the
.BI streams- prefix
kernel module using
.BR request_module ()
and try again: where,
.I prefix
is the prefix of the device name up to the first point character (corresponding to a
digit \(lq.\(rq).
So, in the example above, if the
.RI \(lq inet \(rq
driver was not loaded, but at attempt was made to open the
.BR /dev/inet.99
device,
.I STREAMS
would request the
.B streams-inet
kernel module be loaded.
This approach simplifies kernel module loading as well as device numbering and
makes it easier for boot scripts to initialize devices.
.\"
.SS Mountable specfs Filesystem
.PP
Another approach to creation and assignment of device numbers is the mountable
.BR specfs (5)
file system.  The
.BR specfs (5)
file system can be mounted to provide an in-kernel
device directory similar to the
.B Linux
devfs file system and the
.IR Solaris \(rg
devices file system.
The
.BR specfs (5)
file system should normally be mounted on the
.B /dev/streams
subdirectory by system initialization scripts using a command such as:
.BR "mount -t specfs none /dev/streams" .
See
.BR mount (8)
for more information.
Once mounted over the
.B /dev/streams
subdirectory, subdirectories of
.B /dev/streams
corresponding to each loaded driver will appear.  So, for example, when the
.BR inet (4)
driver is loaded, the
.RI \(lq inet \(rq
subdirectory will appear at
.BR /dev/streams/inet .
Within each device subdirectory
.BI /dev/streams/ devicename /\fR,
each instance of the device will appear as a character device named with the
instance number of the device and having the external (real) major and
external (real) minor device number.
.PP
The mounted
.BR specfs (5)
file system also has the characteristic that if a device
subdirectory
.BI /dev/streams/ devname /
does not exist, but an attempt is made to read such a directory,
.B @PACKAGE_TITLE@
will attempt to load kernel module
.BI streams- devname
into the kernel with
.BR request_module ().
If the load is successful, the kernel module will register and the
subdirectory will be created and read.
.PP
Also, if an attempt is made to open a numbered file within a device
subdirectory of
.BI /dev/streams/ devname / nnnn
where,
.I nnnn
is an octal, hexadecimal or decimal ASCII number,
.I STREAMS
will open the driver (call
.IR qi_qopen (9)
for driver
.IR devname )
with the instance number resulting from the conversion of the device name
.I nnnn
to an instance number.
.PP
These two characteristics permit symbolic links to be placed in the
.B /dev
directory that link to a device name and instance number in the
.B /dev/streams
directory.  An example is given in the table below:
.PP
.TS
expand tab(;);
l|c|c|c.
_
link;external;internal;sflag
_
/dev/tcp->streams/inet/36;30:36;30:36;DRVOPEN
/dev/udp->streams/inet/39;30:39;30:39;DRVOPEN
_
.TE
.PP
In fact, it does not matter what the character device major or minor device
number is of node in the
.BR specfs (5)
file system.  This is because the inode in the
file system is directly associated with the
.B streamtab (9)
structure and instance number without using the normal
.B Linux
character device mechanisms.
When a device instance exceeds the extended minor device numbering space
assigned to a device driver in the
.BR specfs (5)
file system, device number displayed by
.BR stat (2),
.BR lstat (2)
or
.BR fstat (2)
is chosen  by wrapping the instance number into the extended minor device
numbering space.
.PP
This approach makes it unnecessary to statically assign major device numbers,
or to dynamically assign major device numbers to devices in boot scripts, and
is by far the easiest approach.
All that is required by packages at installation is that they establish the
necessary symbolic links on device name and instance number without concern
for major device numbers.
.\"
.\"
.\".SH CONTEXT
.\".PP
.\"
.\"
.\".SH MP-STREAMS
.\".PP
.\"
.\"
.SH NOTICES
.PP
Note that the partitioning of device numbers into major and minor device bitfields, each of 16-bits,
is unique to
.B "@PACKAGE_TITLE@"
and is distinctly different from all other systems.  This is in part intentional:
.I STREAMS
drivers and modules must use portable techniques to accomodate it.
The distribution of bits in major and minor portions of a device number may change in subsequent
releases, and the module writer is advised to develop portable techniques.
.PP
One technique used in the
.B "@PACKAGE_TITLE@"
.I STREAMS
drivers and modules relies upon the ability of
.BR getminor (9)
to detect an overflow from the minor bit-field.  If this ability of
.BR getminor (9)
holds true for other implementations as well, then detecting overflow from the minor device number
bitfield is as simple as testing:
.BR \fC\s-1\)(minor\ !=\ getminor(makedevice(0,\ minor)))\s+1\fP .
This technique is used when assigning successive minor device numbers on
.BR CLONEOPEN ,
which is usually the only time that a
.IR qi_qopen (9)
open routine need worry about the range of the minor device number.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR getemajor (9),
.BR geteminor (9),
.BR makedevice (9),
.IR qi_qopen (9),
.BR autopush (8),
.BR insf (8),
.BR scls (8),
.BR strinfo (8),
.BR strload (8),
.BR strsetup (8),
.BR mknod (9),
.BR unlink (9),
.BR getmajor (9),
.BR getminor (9),
.BR etoimajor (9),
.BR itoemajor (9),
.BR clone (4),
.BR streamtab (9),
.BR nsdev (4),
.BR inet (4),
.BR specfs (5),
.BR mount (8),
.BR stat (2),
.BR lstat (2),
.BR fstat (2),
.IR STREAMS (9).
.\"
.\"
.SH COMPATIBILITY
.PP
The
.B dev_t
type is compatible with
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
and systems based on
.IR "SVR 4.2" ,
.[
svr42
.]
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.IR "SVR 3" " and " "SVR 3.2"
use 7/8 as the major/minor bit-field split;
.IR "SVR 4" " and " "SVR 4.2" ,
use 14/18;
.IR "LiS"
uses 8/8 or 12/18;
.B "@PACKAGE_SHORTTITLE@"
uses 16/16.
.IP ""
Portable
.I STREAMS
drivers and modules will be as agnostic as possible concerning the exact bit-field split of major
and minor device numbers.  The
.BR getminor (9)
technique described under
.RI \(lq NOTICES \(rq,
above, can be used when assigning clone devices to accomplish that end.
.IP \(em
Binary compatibiltiy is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 EFT MP" .
.[
svr42
.]
.\"
.\"
.SH HISTORY
.PP
The
.B dev_t
type was introduced in
.IR "SVR 4" .
.[
svr4
.]
.\"
.\"
.[
$LIST$
.]
.TI
