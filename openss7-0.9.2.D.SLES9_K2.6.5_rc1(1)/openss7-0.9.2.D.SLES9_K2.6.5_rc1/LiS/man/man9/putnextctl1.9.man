'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) putnextctl1.9.man,v 1.1.4.5 2006/04/05 09:42:44 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:42:44 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" putnextctl1.9.man,v
.\" Revision 1.1.4.5  2006/04/05 09:42:44  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database lis.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so lis.macros
.\"
.\"
.TH PUTNEXTCTL1 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B putnextctl1, lis_putnextctl1
\- puts a 1 byte control message on the downstream \fISTREAMS\fR message queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP 8
.BI "int putnextctl1(queue_t *" q ", int " type ", int " param );
.\"
.\"
.SH ARGUMENTS
.PP
.TP
.I q
the queue upstream of the queue to which to put the control message.
.TP
.I type
the type of the control message to put.
.TP
.I param
a one byte parameter to place in the message.
.\"
.\"
.SH DESCRIPTION
.PP
.BR putnextctl1 ()
creates a one-byte control message of type
.I type
with the one-byte data containing the data
.I param
and invokes the put procedure of the queue next to the queue pointed to by
.I q
to place the message on the subsequent queue.
If
.I type
is a data message and not control message type
.BR putnextctl1 ()
will fail.
.\"
.\"
.SH RETURN
.PP
Upon success,
.BR putnextctl1 ()
returns true (1).
.PP
Upon failure,
.BR putnextctl1 ()
returns false (0).
.\"
.\"
.SH ERRORS
.PP
.BR putnextctl1 ()
fails and returns false (0) if the specified
.I type
is not a control message type, or if the passed in queue pointer
.I q
is
.BR NULL ;
or, if allocation of the necessary message blocks fails.
.\"
.\"
.SH CONTEXT
.PP
.BR putnextctl1 ()
can be called from any context, including user context, module procedures,
callouts, callbacks, soft interrupts and interrupt service routines.
.\"
.\"
.SH MP-STREAMS
.PP
.BR putnextctl1 ()
is MP-safe.
.\"
.\"
.SH NOTICES
.PP
.BR putnextctl1 ()
is implemented in
.I LiS
.[
LiS
.]
with a call to
.BR putctl1 (9)
using the
.I q->q_next
pointer for the queue.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR putctl (9),
.BR putctl1 (9),
.BR putnextctl (9).
.\"
.\"
.SH BUGS
.PP
.I LiS
.[
LiS
.]
.BR putnextctl1 ()
will return success even if the operation fails because of the following
conditions:
.IR q " and " q->q_next
are not
.BR NULL ,
but
.I q->q_next
points to something other than a queue structure;
the queue pointed to by
.I q->q_next
has a
.I q_info
pointer of
.BR NULL ;
the queue pointed to by
.I q->q_next
has no put procedure; or the queue pointed to by
.I q->q_next
is closing, or the queue has had put and service routine processing turned off
(e.g. with
.BR qprocsoff (9)).
.I LiS
.[
LiS
.]
should return failure when the operation fails.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR putnextctl1 ()
is compatible with
.IR "SVR 4.2 DDI/DKI" ,
.[
usldk
.]
and implementations based on
.IR "SVR 4" ,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
Under
.IR LiS ,
.BR putnextctl1 ()
will return success even if the operation fails because of the following
conditions:
.IR q " and " q->q_next
are not
.BR NULL ,
but
.I q->q_next
points to something other than a queue structure;
the queue pointed to by
.I q->q_next
has a
.I q_info
pointer of
.BR NULL ;
the queue pointed to by
.I q->q_next
has no put procedure; or the queue pointed to by
.I q->q_next
is closing, or the queue has had put and service routine processing turned off
(e.g. with
.BR qprocsoff (9)).
.I LiS
should return failure when the operation fails.
.IP \(em
.I LiS
implements
.BR putnextctl1 ()
with a call to
.BR putctl1 (9)
using the
.I q->q_next
pointer for the queue.
This does not protect dereferencing of the
.I q->q_next
pointer and is not MP-safe.
.IP \(em
.BR putnextctl1 ()
may be called on a stream frozen with
.BR freezestr (9).
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
.IR Solaris \(rg,
.[
solspg
.]
.IR SUPER-UX \(rg
.[
suxspg
.]
and
.IR UnixWare \(rg
.[
uw7spg
.]
do not permit
.BR putnextctl1 ()
to be called on a stream frozen with
.BR freezestr (9).
Portable
.I STREAMS
drivers and modules should not call
.BR putnextctl1 ()
on a stream frozen with
.BR freezestr (9).
.PP
For a fully functional and compatible
.I STREAMS
implementation, use
.BR "Linux Fast-STREAMS" .
.[
LfS
.]
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 DDI/DKI" .
.[
usldk
.]
.\"
.\"
.SH HISTORY
.PP
.BR putnextctl1 ()
first appeared in
.IR "SVR 4 MP" .
.[
svr4
.]
.\"
.\"
.[
$LIST$
.]
.TI
