'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) M_SETOPTS.9.man,v 0.9.2.13 2006/04/05 09:44:03 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:03 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" M_SETOPTS.9.man,v
.\" Revision 0.9.2.13  2006/04/05 09:44:03  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH M_SETOPTS 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B M_SETOPTS
\- \fISTREAMS\fP set stream head options message
.\"
.\"
.SH FORMAT
.PP
The
.B M_SETOPTS
message block is a
.BR datab (9)
structure and associated data buffer that contains structured data.
.PP
An
.B M_SETOPTS
message is a normal priority message that consists of a single
.B M_SETOPTS
message block.
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
The
.B M_SETOPTS
message is sent to the
Stream head
by a driver or module wanting to alter some characteristics of the
Stream head.
It is generated by any downstream module, and is interpreted by the
Stream head.
The data buffer of the message has the following structure:
.PP
.nf
\fC\s-1\
struct stroptions {
    ulong so_flags;     /* options to set */
    short so_readopt;   /* read options */
    ushort so_wroff;    /* write offset */
    long so_minpsz;     /* minimum read packet size */
    long so_maxpsz;     /* maximum read packet size */
    ulong so_hiwat;     /* read queue high water mark */
    ulong so_lowat;     /* read queue low water mark */
    unsigned char so_band;      /* update water marks for 
                                   this band */
};
\s+1\fP
.fi
where
.I so_flags
specifies which options are to be altered, and can be any combination of the following:
.\"
.\"
.SS SO_ALL
.PP
Update all options according to the values specified in the remaining files of the
.BR stroptions (9)
structure.
.\"
.\"
.SS SO_READOPT
.PP
Sets the read options for the Stream head.  The read options consist of two bit fields that
determine the read mode and the read control mode for the Stream head.
.PP
The read mode determines how the
.BR read (2s)
system call handles messages and message boundaries.
It can contain one of the following mutually exclusive flags:
.\"
.TP
.B RNORM
This is the default.
In byte-stream mode, message boundaries are normally ignored.  When the
.B SO_DELIM
flag is used to set the
.B STRDELIM
option in the Stream head, message boundaries are no longer ignored.
If a message contains more data than is necessary to satisfy the
.BR read (2s)
request, the remainder is placed back onto the Stream head read queue (with the same messages flags
as were present in the original message block of the original message).
See
.RI \(lq SO_DELIM ,\(rq
below, for more information.
.\"
.TP
.B RMSGD
In message-discard mode, only one message at a time is read  If the message contains more data
than was requested by
.BR read (2s)
with
.IR nbytes ,
the remainder of the message is discarded.
.\"
.TP
.B RMSGN
In message-non-discard mode, only one message at a time is read.  If the message contains more data
than was requested by
.BR read (2s)
with
.IR nbytes ,
the remainder of the mssage is placed back onto the Stream head read queue.
.PP
The read control mode determines how the
.BR read (2s)
system call handles messages on the Stream head read queue that contain control parts.
It can contain one of the following mutually exclusive flags:
.\"
.TP
.B RPROTNORM
This is the default.
In control-normal mode,
whenever
.BR read (2s)
encounters a message on the Stream head read queue that contains a control part (i.e.
leading
.BR M_PROTO "(9) or " M_PCPROTO (9)
message block),
.BR read (2s)
either terminates and returns the number of bytes read so far, or fails, returns minus one
.RB ( -1 )
and sets
.IR errno (3)
to
.RB [ EBADMSG ].
.\"
.TP
.B RPROTDAT
In control-data mode,
whenever
.BR read (2s)
encounters a message on the Stream head read queue that contains a control part, the Stream head
converts the
.BR M_PROTO "(9) or " M_PCPROTO (9)
message blocks directly to
.BR M_DATA (9)
message blocks and processes them with the normal data part of the message.
.\"
.TP
.B RPROTDIS
In control-discard mode,
whenever
.BR read (2s)
encounters a message on the Stream head read queue that contains a control part, the Stream head
discards the
.BR M_PROTO "(9) or " M_PCPROTO (9)
message blocks,
processing any remaining
.BR M_DATA (9)
message blocks as thought the control part did not exist.
.PP
Read options can also be set and examined by a user program with the
.BR I_SRDOPT "(7) or " I_GRDOPT (7)
commands to
.BR ioctl (2s)
as detailed in
.BR streamio (7).
.\"
.\"
.SS SO_WROFF
.PP
Specifies a write offset (for the
.I b_rptr
member of the
.BR msgb (9)
structure message block) into the message block at which data will be written.
.BR write (2s)
applies this offset before writing data into the first
.BR M_DATA (9)
message block passed downstream as a result of the
.BR write (2s)
operation.
.BR putmsg (2)
and
.BR putpmsg (2s)
applies this offset before writing data into the first
.BR M_DATA (9)
message block that forms part of a message before passing the message downstream.
.PP
Although
.B @PACKAGE_TITLE@
applies the write offset to each message in the fashion described above, the downstream module
cannot always assume that
.BR M_DATA (9)
message blocks contain the appropriate write offset.  It is possible that the
.BR M_DATA (9)
was either generated by or modified by an intervening module and that it did not contain the write
offset because it was either not generated by the Stream head, or it was subsequently modified by
an intervening module.  The driver or module that requested a write offset should ensure that the
appropriate offset exists by comparing the
.I b_base
pointer to the
.I b_rptr
pointer to ensure that the appropriate offset exists in the necessary message blocks.
.\"
.\"
.SS SO_MINPSZ
.PP
Sets the minimum packet size associated with the Stream head read queue.  The default is zero
.RB ( 0 ).
This value in the Stream head read queue acts as an advisory value to the driver or module
immediately below the stream head on the minimum size of
.BR M_DATA (9)
messages.  Note that for
.IR STREAMS -based
pipes and FIFOs (with no modules pushed), the Stream head read queue
.I is
queue below the the Stream head write queue on the write side of the pipe or FIFO.  This means that,
although this setting has an advisory effect on the read side of a Stream, it can have a mandatory
effect on the write side of a pipe or FIFO (with no modules pushed).
.PP
Most drivers and modules simply ignore this advisory minimum.
.\"
.\"
.SS SO_MAXPSZ
.PP
Sets the maximum packet size associated with the Stream head read queue.  The default is
.BR INFPSZ .
This value in the Stream head read queue acts as an advisory value to the driver or module
immediately below the stream head on the maximum size of
.BR M_DATA (9)
messages.  Note that for
.IR STREAMS -based
pipes and FIFOs (with no modules pushed), the Stream head read queue
.I is
queue below the the Stream head write queue on the write side of the pipe or FIFO.  This means that,
although this setting has an advisory effect on the read side of a Stream, it can have a mandatory
effect on the write side of a pipe or FIFO (with no modules pushed).
.PP
Most drivers and modules simply ignore this advisory maximum.
.\"
.\"
.SS SO_HIWAT
.PP
Sets the high water mark,
.IR q_hiwat ,
for the Stream head read queue.  This watermark is important to read side flow control and
determines when the read side of the Stream is full.
.\"
.\"
.SS SO_LOWAT
.PP
Sets the low water mark,
.IR q_lowat ,
for the Stream head read queue.  This watermark is important to read side flow control and
determines when the read side of the Stream should be backenabled.
.\"
.\"
.SS SO_MREADON
.PP
Enables the Stream head to generate
.BR M_READ (9)
messages when processing a
.BR read (2s)
system call and there is no data to be read.  The message contains the number of bytes the reader is
expecting as a
.B long
value stored in four data bytes.  If both
.B SO_MREADON
and
.B SO_MREADOFF
are set in
.IR so_flags ,
.B SO_MREADOFF
has precedence.
.\"
.\"
.SS SO_MREADOFF
.PP
Disables the Stream head generation of an
.BR M_READ (9)
message when processing a
.BR read (2s)
system call and there is no data to be read.  This is the default.  If both
.BR SO_MREADON " and " SO_MREADOFF
are set in
.IR so_flags ,
.B SO_MREADOFF
has precedence.
.\"
.\"
.SS SO_NDELON
.PP
Set
.RI non- STREAMS
tty semantics for
.BR O_NDELAY " (or " O_NONBLOCK )
processing on
.BR read (2s)
and
.BR write (2s)
system calls.
This sets the
.B STRNDEL
flag in the
.I sd_flag
member of the Stream head
.BR stdata (9)
structure.
If both
.BR SO_NDELON " and " SO_NDELOFF
are set in
.IR so_flags ,
.B SO_NDELOFF
has precedence.
.PP
If
.BR O_NDELAY " (or " O_NONBLOCK )
is set, a
.BR read (2s)
will return zero
.RB ( 0 )
if no data is waiting to be read at the Stream head.
If
.BR O_NDELAY " (or " O_NONBLOCK )
is clear, a
.BR read (2s)
will block until data becomes available at the Stream head.
.PP
Regardless of the state of
.BR O_NDELAY " (or " O_NONBLOCK ),
a
.BR write (2s)
will block on flow control and will block if buffers are not available.
.\"
.\"
.SS SO_NDELOFF
.PP
Set
.I STREAMS
semantics for
.BR O_NDELAY " (or " O_NONBLOCK )
processing on
.BR read (2s)
and
.BR write (2s)
system calls.
This clears the
.B STRNDEL
flag in the
.I sd_flag
member of the Stream head
.BR stdata (9)
structure.
This is the default for newly created Stream heads.
If both
.BR SO_NDELON " and " SO_NDELOFF
are set in
.IR so_flags ,
.B SO_NDELOFF
has precedence.
.PP
If
.BR O_NDELAY " (or " O_NONBLOCK )
is set, a
.BR read (2s)
will return minus one
.RB ( -1 )
and set
.IR errno (3)
to
.RB [ EAGAIN ]
if no data is waiting to be read at the Stream head.
If
.BR O_NDELAY " (or " O_NONBLOCK )
is clear, a
.BR read (2s)
will block until data becomes available at the Stream head.
.PP
If
.BR O_NDELAY " (or " O_NONBLOCK )
is set, a
.BR write (2s)
will return minus one
.RB ( -1 )
and set
.IR errno (3)
to
.RB [ EAGAIN ]
if flow control is in effect when the call is received.
It will block if buffers are not available.
If
.BR O_NDELAY " (or " O_NONBLOCK )
is set and part of the buffer has been written and a flow control or buffers not available condition
is encountered,
.BR write (2s)
will terminate and return the number of bytes written.
If
.BR O_NDELAY " (or " O_NONBLOCK )
is clear, a
.BR write (2s)
will block on flow control and will block if buffers are not available.
.PP
In the
.IR STREAMS -based
pipe and FIFO mechanism, the behaviour of
.BR read (2s)
and
.BR write (2s)
is different for the
.BR O_NDELAY " (or " O_NONBLOCK )
flags.
See
.BR read (2s)
and
.BR write (2s)
for details.
.\"
.\"
.SS SO_ISTTY
.PP
Sets the fact that the Stream is a control terminal for a process.  That is, it is responsible for
providing standard input, output and error connection for the process.
This sets the
.B STRISTTY
flag in the
.I sd_flag
member of the Stream head
.BR stdata (9)
structure.
If both
.BR SO_ISNTTY " and " SO_ISNTTY
are set in
.IR so_flags ,
.B SO_ISNTTY
has precedence.
.\"
.\"
.SS SO_ISNTTY
Sets the fact that the Stream is a non-controlling terminal.  That is, it is not responsible for the
standard input, output or error of any process.
This clears the
.B STRISTTY
flag in the
.I sd_flag
member of the Stream head
.BR stdata (9)
structure.
If both
.BR SO_ISNTTY " and " SO_ISNTTY
are set in
.IR so_flags ,
.B SO_ISNTTY
has precedence.
.PP
Non-control terminals do not need to perform a large number of behaviours normally associated with
ttys such as access control, job control, signals, tracking the session and group leaders and
control processes, etc.  In fact, ttys that are not controlling terminals can be treated largely as
normal STREAMS.
.PP
.\"
.\"
.SS SO_TOSTOP
.PP
Sets the Stream head so that it will stop a process attempting to perform a background write to the
Stream.
This sets the
.BR STRTOSTOP
flag in the
.I sd_flag
member of the Stream head
.BR stdata (9)
structure.
If both
.BR SO_TOSTOP " and " SO_TONSTOP
are set in
.IR so_flags ,
.B SO_TONSTOP
takes precedence.
.\"
.\"
.SS SO_TONSTOP
.PP
Resets the Stream head so that it will not stop a process an attempting to perform a background write to the
Stream.
This clears the
.BR STRTOSTOP
flag in the
.I sd_flag
member of the Stream head
.BR stdata (9)
structure.
If both
.BR SO_TOSTOP " and " SO_TONSTOP
are set in
.IR so_flags ,
.B SO_TONSTOP
takes precedence.
.\"
.\"
.SS SO_BAND
.PP
Specifies that the
.IR so_minpsz ,
.IR so_maxpsz ,
.IR so_hiwat ,
.IR so_lowat ,
fields and the
.BR SO_MINPSZ ,
.BR SO_MAXPSZ ,
.BR SO_HIWAT ,
.BR SO_LOWAT ,
flags apply to the message
.RB band\(em qband (9)
structure\(emspecified in
.IR so_band .
.\"
.\"
.SS SO_DELIM
.PP
Set the Stream head for message delimitation.
This sets the
.B STRDELIM
flag in the
.I sd_flag
member of the
.BR stdata (9)
structure.
If both
.BR SO_DELIM " and " SO_NODELIM
are set in
.IR so_flags ,
.B SO_NODELIM
takes precedence.
.PP
Setting the
.B STRDELIM
flag alters the Stream head behaviour for handling of
.BR read (2s)
and
.BR write (2s)
in byte-stream read mode.
.PP
When
.B STRDELIM
is set,
.BR read (2s)
will terminate on a delimited message and will not return a zero-length delimited message to the
Stream head read queue on a short read.  Also, when the file is set for blocking operation in
byte-stream read mode, the
caller will block until either
.I nbytes
have been read, a message boundary is encountered, a zero-length message is encountered, or a signal
or error conditions occurs.  Zero-length messages that are delimited (indicating read cessation)
will not be returned to the Stream head write queue but non-delimited zero-length messages
(indicating end-of-file) will.  This is consistent with
.I SVR 4
.[
magic
.]
.BR read (2s)
behaviour.
.PP
When
.B STRDELIM
and
.B SNDMREAD
are both set on the Stream head, the generation of
.BR M_READ (9)
messages by the Stream head is altered.
.IP \(em \w'\(em\(em'u
The generation of
.BR M_READ (9)
messages is altered when the
.B STRDELIM
flag is also set.  If there is insufficient data available at the Stream head read queue and
.BR read (2s)
goes to block for the first time, regardless of whether some data has already been transferred,
.BR read (2s)
generates an
.BR M_READ (9)
message downstream with the number of bytes remaining outstanding to service the read request.
This is consistent with
.I SVR 4
behaviour for the generation of
.BR M_READ (9).
.IP \(em
The handling of
.BR M_READ (9)
messages by the downstream driver or module should be altered.  When there is sufficient data
available at the downstream module to service the request, the
.BR M_READ (9)
is transformed into an
.BR M_DATA (9)
message containing the requested data and returned upstream.
When there is insufficient data at the downstream driver or module to service the request, one of
three actions should be taken:
.RS
.IP 1) \w'0)\(em'u
If there is some amount of data less than the requested amount available, the driver or module may
transform the
.BR M_READ (9)
message into a
.BR M_DATA (9)
message containing the available data.  The
.B MSGDELIM
flag can be set on this message to make
.BR read (2s)
terminate the read with a short read, or can be left unset to cause
.BR read (2s)
to block awaiting additional data.
.IP 2)
If there is no data available at the driver or module, the driver or module may transform the
.BR M_READ (9)
message into a zero-length
.BR M_DATA (9)
message, setting the
.B MSGDELIM
flag on this message, and responding with it upstream.  This will signal
.BR read (2s)
at the Stream head to terminate the read with a short count.  Note, however, that if no data has
been read so far at the Stream head when the zero-length message arrives,
.BR read (2s)
will terminate and return zero
.RB ( 0 ).
.IP 3)
If there is no data available at the driver or module, or there is insufficient data that the module
or driver does not wish to forward at this time, the driver or module may discard the
.BR M_READ (9)
message and defer taking any action.
.BR read (2s)
will then block at the Stream head awaiting the arrival of data.
.RE
.PP
When
.B STRDELIM
is set,
.BR write (2s)
will add
.B MSGDELIM
flags to indicated delimited messages.  The
.B MSGDELIM
flag is set in the last
.BR M_DATA (9)
message of a full write.  Partial writes do not set the
.BR MSGDELIM
flag in any message.  This is also true for buffers longer than
.IR q_maxpsz ,
where
.I q_minpsz
is zero and
.BR write (2s)
breaks the write into multiple
.IR q_maxpsz -sized
messages.  In this case,
.B MSGDELIM
is only set on the last
.BR M_DATA (9)
message in the sequence and only when a full write of
.I nbytes
occurs.
.\"
.\"
.SS SO_NODELIM
.PP
Reset the Stream head from message delimitation.  This clears the
.B STRDELIM
flag in the
.I sd_flag
member of the
.BR stdata (9)
structure.
This is the default for newly created Stream heads.
If both
.BR SO_DELIM " and " SO_NODELIM
are set in
.IR so_flags ,
.B SO_NODELIM
takes precedence.
.PP
Clearing the
.B STRDELIM
flag alters the Stream head behaviour for handling of
.BR read (2s)
and
.BR write (2s)
in byte-stream read mode.
.PP
When
.B STRDELIM
is clear,
.BR read (2s)
will terminate when
.I nbytes
are read, some data has been read and there is
no more data to be read immediately at the Stream head read queue,
when a zero-length message is encountered.  Message boundaries are ignored.  Zero-length messages
(that can only indicate end-of-file)
are returned  to the Stream head read queue to be consumed by a subsequent call.
.BR read (2s)
only terminates on a signal or error condition when the signal or error condition is detected before
data any is read.
This is consistent with
.I POSIX
.[
susv3
.]
.BR read (2s)
behaviour.
.PP
When
.B SNDMREAD
is set and
.B STRDELIM
is clear, the generation of
.BR M_READ (9)
messages at the Stream head and the necessary interpretation of
.BR M_READ (9)
messages at the downstream driver or module are as described above under
.RI \(lq SO_MREADON .\(rq
.PP
When
.B STRDELIM
is clear,
.BR write (2s)
will generate no
.B MSGDELIM
flags in messages.
.\"
.\"
.SS SO_STRHOLD
.PP
Sets the Stream head for the message hold option.  
.I STREAMS
provides a hold option that improves the performance of
.I STREAMS
when the process issues many small writes.  The message hold option is enabled if the system
adminstrator has changed the system control,
.BR sysctl_str_strhold ,
to be non-zero and if the Stream head flag
.B STRHOLD
is set by a driver or module.  A downstream driver or module sets the Stream head
.B STRHOLD
bit by sending a
.BR M_SETOPTS (9)
message upstream with the
.B SO_STRHOLD
flag set in the
.I so_flags
member of the
.BR stroptions (9)
stucture contained in the message.  (The
.BR ldterm (4)
tty line discipline module does this.)  The process may also issue a
.BR I_SWROPT (7)
command to
.BR ioctl (2s)
with the
.B SNDHOLD
flag set in the argument to enable the hold option on a particular Stream, but this is a
.B @PACKAGE_TITLE@
extension.  Normally the hold option can only be activated and deactivated by a downstream module or
driver.
.PP
The message hold option exploits the fact that
.BR allocb (9)
allocates a buffer with a data size that is always equal to or greater than
.BR FASTBUF .
The buffer is allocated and the data is copied into it.
.BR write (2s)
then checks to see if another
.BR write (2s)
of the same size will fit into the same buffer.  If it will, the buffer is held temporarily on the
Stream head write queue, a timer is started (usually, 10 milliseconds, but settable with the
.B sysctl_str_rtime
system control), and the Stream head is linked into the
.I scanqhead
list in the
.I STREAMS
scheduler.
.PP
One of three things will then happen:
.IP 1) \w'0)\(em'u
A second
.BR write (2s)
occurs with a data part that is small enough to fit into the remaining portion of the saved buffer.
The data is put into the buffer and sent downstream.  Since two writes have been sent downstream in
one message, the optimization is successful.
.IP 2)
A second
.BR write (2s)
occurs with a data portion that is too big to fit into the remaining portion of the saved buffer.
The saved message is sent downstream followed by another message holding the data of the second
.BR write (2s).
.IP 3)
No second
.BR write (2s)
occurs so the timer expires.  The timeout processing performed by
.BR queuerun (9)
scans the
.I scanqhead
list in the
.I STREAMS
scheduler and sends downstream any messages held on the Stream head write queues whose timeouts have
expired.
.PP
In implementation it is not too difficult to multiplex a single timer against the
.I scanqhead
list, rather than setting a timer per Stream.
.PP
.IR Solaris \(rg
.[
solspg
.]
no longer implements this option.
.I LiS
.[
lis
.]
implements this option but chooses the expensive route of running a 10 millisecond timer per Stream
with the feature.  Since 10 milliseconds is a single tick on older
.B Linux
kernels, it is a particularly bad idea to run many single-tick timers.
.\"
.\"
.SS SO_ERROPT
.PP
.\"
.\"
.SS SO_LOOP
.PP
.\"
.\"
.SS SO_COPYOPT
.PP
.\"
.\"
.SS SO_MAXBLK
.PP
.\"
.PP
.B M_SETOPTS
messages cannot be generated directly by a user level process.
.B M_SETOPTS
messages arriving at a driver can be discarded (ignored and freed).
.B M_SETOPTS
messages are consumed by the
Stream head.
.B M_SETOPTS
can be genereated by drivers and modules.
.\"
.\"
.SH USAGE
.PP
The following are guidelines for processing of the
.B M_SETOPTS
message in drivers and modules:
.IP \(bu \w'\(bu\(em'u
Intermediate modules that do not recognize the
.B M_SETOPTS
message must pass it on as any normal priority message.  That is, it is subject to flow control
and order must be maintained with other normal priority messages on the queue.
.IP \(bu
Drivers that do not recognize the
.B M_SETOPTS
message will discard it.
.IP \(bu
Modules recognizing the
.B M_SETOPTS
message may record or alter its contents, but must pass the message upstream or downstream to the
Stream head.
Note that the message can arrive at a
Stream head
in the downstream direction for a
.IR STREAMS -based
.BR pipe (4).
.PP
The
.B M_SETOPTS
message is used whenever a driver or module wishes to change a
Stream head
setting synchronized with the data stream.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR M_PCSETOPTS (9),
.BR datab (9),
.BR msgb (9).
.\"
.\"
.SH COMPATIBILITY
.PP
The
.B M_SETOPTS
.I STREAMS
message is compatible with
.IR "SVR 4.2 MP STREAMS" ,
and implementations based on
.IR "SVR 4" ,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.B M_SETOPTS
has a different constant value on
older versions of
.IR OSF/1 \(rg,
.[
osfspg
.]
and older versions of
.IR LiS .
.[
lis
.]
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B @PACKAGE_TITLE@
.[
lfs
.]
instead of
.IR LiS .
.[
lis
.]
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP STREAMS" .
.[
svr42spg
.]
.\"
.\"
.SH HISTORY
.PP
The
.B M_SETOPTS
message first appeared in
.IR "SVR 3" .
.[
svr3spg
.]
.\"
.\"
.[
$LIST$
.]
.TI
