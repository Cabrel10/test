OpenSS7 Master Package -- things to do.  2006-06-16
TODO,v 0.9.2.5 2006/06/16 10:48:08 brian Exp
Copyright (c) 2001-2006  OpenSS7 Corporation.  <http://www.openss7.com/>
Copyright (c) 1997-2000  Brian Bidulock <bidulock@openss7.org>
See the end for copying conditions (for this file).

Things to do:

- Get master build package working better.  Currently the master build
  package does not build a master tarball or RPM distribution, which
  would be nice, only individual RPMs for subpackages.

- Cross-testing framework.  We have nice autotest test suites that are
  fine for native builds, but for cross-compile builds, it would also be
  nice to cross-test.  We can accomplish this nicely within the autoconf
  framework using DejaGNU.  DejaGNU configured under the LiS, but we
  need a more general autoconf .m4 fragement check for the existence of
  DejaGNU, and automake and DejaGNU expect wrappers for the existing
  test programs (and integration into the make check-DEJAGNU target).
  Then we could cross-build the package (e.g. for NexusWare) and then
  execute the test scripts on the result on a remote board using
  DEJAGNU.

- Distributed testing framework.  Because these are mostly
  communications protocols implemented using STREAMS, it is important to
  be able to do consistent distributed testing and validation of the
  protocol implementations.  We can perform much validation using
  Ferry-Clip approaches (linking or pushing STREAMS-based pipes beneath
  drivers or modules), however, acceptance and performance testing would
  benefit from a distributed framework.  Perhaps the most direct yet
  general approach to this is TETware from OpenGroup and is used for
  POSIX (and XNS 5.2, by the way) test suites from OpenGroup.  Although
  netperf incorporates its own client-server subsystem, TETware provides
  these mechanisms separately.  TETware also provides mechanisms for
  test case syncrhonization points between distributed systems that
  makes distributed conformance test cases quite possible.  Note that
  TETware does not really require any external tools but does require
  network access and installation on the target systems (unlike DejaGNU
  that can execute test cases over a serial port if necessary).

- I have all these /** comments that use either kerneldoc or doxygen
  format sprinkled throughout the code.  I would like to get doxygen
  running, or kerneldoc, or write a script of my own.  This
  documentation would be useful for developers and troubleshooters,
  particularly if the code was included with the documentation.  Doxygen
  does this nicely, but only in html, but does not generate manual pages
  or other things very nicely.  Well, I have to do something with that.
  A start would be just providing the autoconf .m4 and automake .am
  fragments necessary to generate doxygen or kerneldoc documentation.

- Automake files (Makefile.am) are too static.  The strbcm package needs
  the list of sources and objects to be rather dynamic.  It would be
  nice to convert all packges to the same approach.  We could perhaps
  use strconf-sh to generate Makefile.in fragments at configuration time
  and then include them in a far more general main Makefile.am file.

- I really want to put all these packages back together, it is too time
  consuming maintaining the various administrative files for each of
  seven or so packages.  Once some more testing has been done on Linux
  Fast-STREAMS, I will drop LiS altogether and wrap the following
  packages together:

	streams-0.7a.5
	strcompat-0.9.2.4
	strutil-0.9.2.4
	strxns-0.9.2.4
	strxnet-0.9.2.9
	strinet-0.9.2.4
	strsctp-0.9.2.6
	netperf-2.3.2

  The result will be just a streams-0.9.4 release.  The only two
  (STREAMS) packages left will be strbcm and strss7.

- I want to someday write an ldterm for Linux Fast-STREAMS and provide
  truly STREAMS-based pseudo terminals.

- Bug reporting.  We have these nice autotest test suites that generate
  a lot of information when a test case fails in testsuite.log.  What I
  would like to do is integrate that to our GNATS problem report system
  so that testsuite will generate the template for a new problem report
  upon test case failure.  Unfortunately autotest does not provide an m4
  diversion point at which to hook into the failure branch of the test
  script.  Several choices:

	- distribute a modified set of autotest macros. uggh.
	- submit a change to autoconf (2.59 is not going away soon).

  Perhaps a better alternative is to provide a make target for problem
  reports that will collect the testsuite.log and any other pertinent
  information and generate a problem report template as a mail text file
  that can then be editted by the user and mailed to the bugs address.
  I like that.  That will work better.

  Better still, it might be a good idea to modify the logging targets to
  automatically generate a problem report when they fail.  That would be
  better.

  *done*

- Provide an option for not installing documentation and development
  headers, etc.  Just the runtime.  This is mostly for embedded targets.
  Make it a --without-devel configure flag that defaults to including
  documentation and development environment.

  *done*


=========================================================================

Copyright (c) 2001-2006  OpenSS7 Corporation. <http://www.openss7.com/>
Copyright (c) 1997-2000  Brian Bidulock <bidulock@openss7.org>

All Rights Reserved.

 Permission is granted to make and distribute verbatim copies of this
 manual provided the copyright notice and this permission notice are
 preserved on all copies.

 Permission is granted to copy and distribute modified versions of this
 manual under the conditions for verbatim copying, provided that the
 entire resulting derived work is distributed under the terms of a
 permission notice identical to this one

 Since the Linux kernel and libraries are constantly changing, this
 manual page may be incorrect or out-of-date.  The author(s) assume no
 responsibility for errors or omissions, or for damages resulting from
 the use of the information contained herein.  The author(s) may not
 have taken the same level of care in the production of this manual,
 which is licensed free of charge, as they might when working
 professionally.

 Formatted or processed versions of this manual, if unaccompanied by
 the source, must acknowledge the copyright and authors of this work.

-------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
 on behalf of the U.S. Government ("Government"), the following
 provisions apply to you.  If the Software is supplied by the Department
 of Defense ("DoD"), it is classified as "Commercial Computer Software"
 under paragraph 252.227-7014 of the DoD Supplement to the Federal
 Acquisition Regulations ("DFARS") (or any successor regulations) and the
 Government is acquiring only the license rights granted herein (the
 license rights customarily provided to non-Government users).  If the
 Software is supplied to any unit or agency of the Government other than
 DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19
 of the Federal Acquisition Regulations ("FAR") (or any successor
 regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
 NASA Supplement to the FAR (or any successor regulations).

=========================================================================

 Commercial licensing and support of this software is available from
 OpenSS7 Corporation at a fee.  See http://www.openss7.com/

=========================================================================
vim: tw=72 nocindent
