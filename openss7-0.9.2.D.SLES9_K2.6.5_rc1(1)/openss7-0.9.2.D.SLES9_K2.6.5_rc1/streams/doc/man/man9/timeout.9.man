'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) timeout.9.man,v 0.9.2.23 2006/04/05 09:44:19 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:19 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" timeout.9.man,v
.\" Revision 0.9.2.23  2006/04/05 09:44:19  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH TIMEOUT 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B timeout
\- start a timer
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.br
.B #include <sys/ddi.h>
.HP
.BI "typedef void " timo_fcn_t "(caddr_t arg);
.HP
.BI "toid_t timeout(timo_fcn_t *" timo_fcn ", caddr_t " arg ", long " ticks );
.\"
.\"
.SH ARGUMENTS
.PP
.TP \w'\fItimo_fcn\fR\(em'u
.I timo_fcn
the function to call on expiry.
.PD 0
.TP
.I arg
the argument to pass to the callback function.
.TP
.I ticks
the number of ticks to wait before expiry.
.PD
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS.
.\"
.\"
.SH DESCRIPTION
.PP
.BR timeout ()
starts a timer with duration
.I ticks
number of system clock ticks, that, upon expiry, will invoke the supplied
timeout function callback
.I timo_fcn
(if the
.I timo_fcn
function pointer is
.RB non- NULL )
with the supplied argument
.IR arg .
The timeout callback function
.I timo_fcn
is a function returning
.B void
and taking a single
.B caddr_t
argument as follows:
.sp
.nf
typedef void timo_fcn_t(caddr_t arg);
.fi
.PP
The callback function
.I timo_fcn
will be executed at some time greater than or equal to the interval specified
in the
.I ticks
argument.
.\"
.\"
.SH RETURN
.PP
.BR timeout ()
returns a
.B toid_t
defined as follows:
.sp
.nf
typedef int toid_t;
typedef int timeout_id_t;
.fi
.PP
Upon success,
.BR timeout ()
returns a non-zero timeout id and the timeout is scheduled.
Upon failure,
.BR timeout ()
returns a zero (0) timeout id and no timeout is scheduled.
.\"
.\"
.SH ERRORS
.PP
When
.BR timeout ()
fails, it returns a zero (0) timeout id.
.BR timeout ()
fails when it cannot allocate the internal structures for the timeout.
If it is important that a timeout be scheduled with assurance, the return value
should always be checked.
.\"
.\"
.SH CONTEXT
.PP
.BR timeout ()
can be called from any context including
user context,
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_putp (9),
and
.IR qi_srvp (9)
procedures,
.BR bufcall (9),
.BR qbufcall (9),
.BR timeout (9)
and
.BR qtimeout (9)
callbacks,
and interrupt service routines.
.\"
.\"
.SH MP-STREAMS
.PP
.BR timeout ()
is MP-safe.
.PP
Considerations should be given when writing the callback function that a
.BR timeout ()
callback function can execute at the same time as any queue
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedure,
.BR qwriter (9)
callout,
.BR bufcall (9),
.BR qbufcall (9),
.BR timeout (9)
or
.BR qtimeout (9)
callback
or interrupt service routine.
In addition, for a sufficiently small
.I tick
values, the callback function may execute before the call to
.BR timeout (9)
returns.
.PP
Nevertheless, the
.BR timeout ()
callback function will be serviced by the same thread as the thread from which the
.BR timeout ()
was issued.  Therefore, the callback function will not execute until after
.BR timeout ()
returns, no matter whether
.I ticks
is zero or negative.
Because the servicing thread and the current thread are the same, the
.BR timeout ()
callback will not be invoked until after the function that called
.BR timeout ()
returns.
This means that it is safe to store the returned timeout id in global
variables access by the callback function.
This is the same situation for
.BR qtimeout (9),
.BR qbufcall (9),
.BR timeout (9),
.BR bufcall (9)
and
.BR esbbcall (9)
functions.
.PP
However, if the
.BR timeout ()
was generated from a
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedure, or was generated from within a 
.BR mi_bufcall (9),
.BR qbufcall (9),
.BR qtimeout (9),
callback, or other
queue referenced
.BR bufcall (),
.BR esbbcall (9),
.BR timeout (9),
callback, then the
.I STREAMS
executive is aware of the queue to which the callback function is to be
referenced and will generate a buffer call internally that is referenced
against the queue within whose synchronization context the call was invoked.
This makes the
.BR timeout ()
function safer than the normal
.I "SVR 4.2 MP"
equivalent.
.PP
See
.BR mp-streams (9)
for additional information.
.\"
.\"
.SH NOTICES
.PP
For architectural independence,
.I STREAMS
drivers and modules should not specify the
.I ticks
argument directly, but should use the
.BR drv_usectosz (9)
and
.BR drv_hztousec (9)
DKI functions, the Linux
.B HZ
define, or some other quantum independent conversion function to convert to and
from microseconds or some other absolute unit of time.
.PP
.B toid_t
and
.B timeout_id_t
should be treated as an opaque type that can be tested for equality to zero.
The value should not otherwise be manipulated.
.B Linux Fast-STREAMS
implements timeout id values internally as a pointer to a
.B strevent
structure containing a Linux timer.  On 64-bit architectures, this value
should never be stored as an
.BR int ,
nor converted to any integer type with less bits than a pointer.
.PP
All outstanding timeout callbacks allocated with
.BR timeout()
must be cancelled with a call to
.BR untimeout (9)
before invalidating any of the references passed as an argument to the callback function.  When the
argument is a
.BR queue (9)
pointer, all outstanding timeout calls must be cancelled with
.BR untimeout (9)
before the queue is deallocated (i.e. before returning from the
.IR qi_qclose (9))
procedure.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR untimeout (9),
.BR dtimeout (9),
.BR itimeout (9),
.BR qtimeout (9),
.BR quntimeout (9),
.BR drv_usectohz (9),
.BR drv_hztousec (9).
.\"
.\"
.SH BUGS
.PP
.BR timeout ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR timeout ()
is source-level compatible with SVR 4.2 MP DDI/DKI,
.IR Solaris \(rg
and LiS
.[
LiS
.]
with the following exceptions:
.\"
.\"
.IP \(em \w'\(em\(em'u
.IR AIX \(rg
.[
aixdoc
.]
uses
.B int
return value of the
.BR timeout ()
utility.
Also,
.B timo_fcn_t
is not defined and the prototype for the timeout call out function is
.BR "void (*func)(void *arg)" .
.IP \(em
.IR UnixWare \(rg
.[
uw7doc
.]
panics when a timeout structure cannot be allocated, instead of returning
zero.
.IP \(em
Both
.IR AIX \(rg
.[
aixdoc
.]
and
.IR OSF/1 \(rg
.[
osfdoc
.]
have different prototypes for
.BR timeout (9)
and
.BR untimeout (9)
when used for
.I STREAMS
as when used for other drivers.  The prototypes for
.BR timeout (9)
and
.BR untimeout (9)
for use by
.I STREAMS
are the old
.I SVR 3
.[
svr3spg
.]
definitions which use an
.B int
for the
.BR toid_t .
.IP \(em
The
.IR Solaris \(rg
.[
soldoc
.]
prototype for this function is as follows:
.sp
.nf
.BI "timeout_id_t timeout(void (*" func ")(void *), void *" arg ", clock_t " ticks );
.fi
.sp
Where
.B timeout_id_t
is defined as equivalent to
.BR toid_t " and " int ,
and
.B clock_t
is
.BR long ,
this is compatible with other definitions.
.IP \(em
LiS uses an
.B int
as a return value from
.BR lis_timeout ().
Because of this,
the
.I LiS Compatibility Module
.BR liscompat (9)
.BR lis_timeout ()
symbol will not function properly on architectures with 64 significant bit
pointers and 32-bit
.BR int s.
.\"
.\"
.IP \(em
.BR timeout ()
allocates a
.B strevent
structure that includes an embedded Linux kernel timer.
.BR timeout ()
assigns a packed out-dating pointer into the integer
.B toid_t
returned.  This pointer is a sequenced pointer to a
.B strevent
object that expires when the timeout sequence number is incremented.  This
permits unpacking and dereferencing of the pointer instead of searches for id
numbers in
.B strevent
lists for speed.
.\"
.\"
.IP ""
LiS provides a wrapper to Linux Kernel timer functions to implement
.BR timeout ().
LiS's implementation creates a Linux timer structure, assigns it a sequential
integer timer identifier, and places it in a timer list.  Whenever LiS starts
a timer it checks the list to see if the integer timer identifier is unique.
This is an exhaustive linear search.  This is inefficient.
.I STREAMS
drivers or modules that set timers often will experience poorer performance
than if the Linux kernel timer facility was used directly.
.\".IP \(em
.\".BR lis_timeout ()
.\"is provided for compatibility with LiS.  See
.\".BR liscompat (9).
.\".BR lis_timeout ()
.\"calls
.\".BR timeout ()
.\"directly.
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility considerations.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
.IR Solaris \(rg
documentation.
.\"
.\"
.SH HISTORY
.PP
.BR timeout ()
first appeared in
.IR "SVR 2" .
.[
svr2
.]
.\"
.\"
.[
$LIST$
.]
.TI
