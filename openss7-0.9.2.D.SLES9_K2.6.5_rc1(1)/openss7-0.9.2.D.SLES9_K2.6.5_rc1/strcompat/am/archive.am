## vim: ft=automake comments=b\:#,b\:##,b\:#\! formatoptions+=tcqlor
## =============================================================================
## 
# @(#) archive.am,v OpenSS7-0_9_2_D_rc2(0.9.2.26) 2006/03/06 11:35:14
##
## -----------------------------------------------------------------------------
##
## Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
## Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
##
## All Rights Reserved.
##
## This program is free software; you can redistribute it and/or modify it under
## the terms of the GNU General Public License as published by the Free Software
## Foundation; version 2 of the License.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
## details.
##
## You should have received a copy of the GNU General Public License along with
## this program; if not, write to the Free Software Foundation, Inc., 675 Mass
## Ave, Cambridge, MA 02139, USA.
##
## -----------------------------------------------------------------------------
##
## U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
## behalf of the U.S. Government ("Government"), the following provisions apply
## to you.  If the Software is supplied by the Department of Defense ("DoD"), it
## is classified as "Commercial Computer Software" under paragraph 252.227-7014
## of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
## successor regulations) and the Government is acquiring only the license rights
## granted herein (the license rights customarily provided to non-Government
## users).  If the Software is supplied to any unit or agency of the Government
## other than DoD, it is classified as "Restricted Computer Software" and the
## Government's rights in the Software are defined in paragraph 52.227-19 of the
## Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
## the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
## (or any successor regulations).
##
## -----------------------------------------------------------------------------
##
## Commercial licensing and support of this software is available from OpenSS7
## Corporation at a fee.  See http://www.openss7.com/
##
## -----------------------------------------------------------------------------
##
## Last Modified 2006/03/06 11:35:14 by brian
##
## -----------------------------------------------------------------------------
##
## archive.am,v
## Revision 0.9.2.26  2006/03/06 11:35:14  brian
## - updated headers
##
## =============================================================================

#!
#! Release Archive Targets:
#! ------------------------
#!
#! The following targets are used to generate and clean distribution archive and
#! signature files.  Whereas the `dist' target affects archives in the top build
#! directory, the release-archive targets affects archives in the package
#! distribution directory, `@PACKAGE_DISTDIR@'.
#!
#! You can change the directory to which packages are distributed by using the
#! --with-pkg-distdir=DIR option to 'configure'.  The default directory is the
#! top build directory `@abs_builddir@'.
#!
##
# This one rule is always included.  This is because even though debian/rules.in is set as
# executable, config.status does not make an executable debian/rules.  This is a sad problem with
# autoconf.  However, we use this dist-hook to check the situtation just before the distribution is
# archived.  We always need this rule because the archive could be used later to build debian
# packages.
##
deb-rules-check:
	@if test -e $(PACKAGE)-$(VERSION)/debian/rules -a ! -x $(PACKAGE)-$(VERSION)/debian/rules ; then \
		$(ECHO) "chmod +x $(PACKAGE)-$(VERSION)/debian/rules" ; \
		chmod +x $(PACKAGE)-$(VERSION)/debian/rules ; \
	fi

DIST_HOOK		+= deb-rules-check

if MAINTAINER_MODE

##
## For speed when building releases, we are not going to include the archive packaging rules when we
## are not in maintainer mode.  There are, however, a couple of rules at the beginning of this
## fragment that we do include, regardless of maintainer mode.
##

archive_files	= \
		$(PACKAGE_DISTDIR)/$(PACKAGE)-$(VERSION).tar.gz \
		$(PACKAGE_DISTDIR)/$(PACKAGE)-$(VERSION).tar.bz2 \
		$(PACKAGE_DISTDIR)/$(PACKAGE)-$(VERSION).tar.gz.asc \
		$(PACKAGE_DISTDIR)/$(PACKAGE)-$(VERSION).tar.bz2.asc

##
# creates the package directory
##
RELEASE_DIRECTORIES	+= $(PACKAGE_DISTDIR)

##
# Note that sometimes the package distribution directory is the current build directory.  This is
# true when we are doing local release tests on a package.  In that case, this rule will not run.
# Otherwise, we will not move files into the release directory if they already exist there unless
# force has been specified or a force release target has been invoked.
##
$(PACKAGE_DISTDIR)/$(PACKAGE)-$(VERSION).tar.gz \
$(PACKAGE_DISTDIR)/$(PACKAGE)-$(VERSION).tar.bz2::
	@f=`$(ECHO) "$@" | sed -e 's|^.*/||'` ; \
	test "$@" -ef "$$f" && exit 0 ; \
	test ":$(FORCE)" != :force -a \( -f "$@" -o -f "$$f" \) || { \
		$(ECHO) "$(MAKE) $(AM_MAKEFLAGES) -- $$f" ; \
		$(MAKE) $(AM_MAKEFLAGES) -- $$f ; } ; \
	test "$@" -ef "$$f" && exit 0 ; \
	test ":$(FORCE)" != :force -a \( -f "$@" -a "$@" -nt "$$f" \) || { \
		$(ECHO) "cp -f -- $$f $@" ; \
		cp -f -- $$f $@ ; }

##
# How to make an archive if we ask for one.  We do not make archives on demand if they already
# exist.
##
$(DIST_ARCHIVES):: $(CONFIG_CLEAN_FILES) Makefile $(DISTFILES)
	@test ":$(FORCE)" != :force -a -f "$@" || $(MAKE) $(AM_MAKEFLAGS) dist

#! release-archives:
#!     This target creates the distribution archive files if they have not
#!     already been created.  This not only runs the `dist' target, but also
#!     copies the files to the distribution directory, which in this case is
#!     @PACKAGE_DISTDIR@.
#!
#!     The files generated are named:
#!         @PACKAGE@-@VERSION@.tar.gz and @PACKAGE@-@VERSION@.tar.bz2
#!
#!     You can change this distribution directory with the --with-pkg-distdir
#!     option to 'configure'.  See './configure --help' for more details on
#!     options.
#!
##
# Triggers make dist and signing if necessary.
##
release-archives: \
    $(PACKAGE_DISTDIR)/$(PACKAGE)-$(VERSION).tar.gz \
    $(PACKAGE_DISTDIR)/$(PACKAGE)-$(VERSION).tar.bz2
##
# This is a suffix rule for signing anything.  First we check if the signature file exists and has
# a correct signature.  If it does, we merely touch the signature file.  Otherwise we use gpg to
# generate a detached signature.  Redirect output to avoid gpg problems with existing files.  We
# pipe in an environment variable for automated builds.
##
$(PACKAGE_DISTDIR)/$(PACKAGE)-$(VERSION).tar.gz.asc:: \
$(PACKAGE_DISTDIR)/$(PACKAGE)-$(VERSION).tar.gz
	@if test ! -f $@ || ! $(GPG) --verify -- $@ >/dev/null 2>&1 ; then \
		user="$(GNUPGUSER)" ; user="$${user:+ -u }$$user" ; \
		home="$(GNUPGHOME)" ; home="$${home:+ --homedir }$$home" ; \
		pass="$(GNUPGPASS)" ; pass="$${pass:+ --batch }" ; \
		pipe="$(GNUPGPASS)" ; pipe="$${pipe:+$(ECHO) "$$pipe" |}" ; \
		$(ECHO) "$(GPG) -ba --passphrase-fd 0$$user$$home$$pass -o- -- $< > $@ 2>/dev/null" ; \
		eval "$$pipe $(GPG) -ba --passphrase-fd 0$$user$$home$$pass -o- -- $< > $@ 2>/dev/null" ; \
	else touch "$@" ; fi

$(PACKAGE_DISTDIR)/$(PACKAGE)-$(VERSION).tar.bz2.asc:: \
$(PACKAGE_DISTDIR)/$(PACKAGE)-$(VERSION).tar.bz2
	@if test ! -f $@ || ! $(GPG) --verify -- $@ >/dev/null 2>&1 ; then \
		user="$(GNUPGUSER)" ; user="$${user:+ -u }$$user" ; \
		home="$(GNUPGHOME)" ; home="$${home:+ --homedir }$$home" ; \
		pass="$(GNUPGPASS)" ; pass="$${pass:+ --batch }" ; \
		pipe="$(GNUPGPASS)" ; pipe="$${pipe:+$(ECHO) "$$pipe" |}" ; \
		$(ECHO) "$(GPG) -ba --passphrase-fd 0$$user$$home$$pass -o- -- $< > $@ 2>/dev/null" ; \
		eval "$$pipe $(GPG) -ba --passphrase-fd 0$$user$$home$$pass -o- -- $< > $@ 2>/dev/null" ; \
	else touch "$@" ; fi


#! release-sign-archives:
#!     This target is like `release-archives', except that it also signs the
#!     archives using a GPG detached signature.  You will be prompted for a
#!     password unless you pass the GNUPGPASS variable to make.  For automated
#!     or unattended builds, pass the GNUPGPASS variable like so:
#!
#!         make GNUPGPASS=mypasswd release-sign-archives
#!
#!     Signature files will be named:
#!         @PACKAGE@-@VERSION@.tar.gz.asc and @PACKAGE@-@VERSION@.tar.bz2.asc
#!
#!     These files will be moved to the package distribution directory
#!     @PACKAGE_DISTDIR@ with the plaintext archives.
#!
release-sign-archives: \
    $(PACKAGE_DISTDIR)/$(PACKAGE)-$(VERSION).tar.gz.asc \
    $(PACKAGE_DISTDIR)/$(PACKAGE)-$(VERSION).tar.bz2.asc

RELEASE			+= all-release-archives
RELEASE_SIGN		+= all-release-sign-archives
RELEASE_DIRECTORIES	+= 

distclean-archives:
	$(am__remove_distdir)

DISTCLEAN_LOCAL		+= distclean-archives

DISTCLEANFILES		+= $(DIST_ARCHIVES)

#! release-clean-archives:
#!     This target will clean the release archives and signature files from the
#!     package distribution directory @PACKAGE_DISTDIR@.
#!
release-clean-archives: distclean-archives

RELEASE_CLEAN_LOCAL	+= release-clean-archives

RELEASECLEANFILES	+= $(DIST_ARCHIVES) \
			   $(archive_files)

ALL_RECURSIVE_TARGETS	+= all-dist all-release-archives all-release-sign-archives

## MAINTAINER_MODE
endif

EXTRA_DIST		+= .pkgrelease \
			   .pkgepoch

## vim: ft=automake comments=b\:#,b\:##,b\:#\! formatoptions+=tcqlor
