'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) putq.9.man,v 0.9.2.30 2006/04/05 09:44:15 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:15 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" putq.9.man,v
.\" Revision 0.9.2.30  2006/04/05 09:44:15  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH PUTQ 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B putq
\- put a message on a \fISTREAMS\fR message queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP
.BI "int putq(queue_t *" q ", mblk_t *" mp );
.\"
.\"
.SH ARGUMENTS
.TP
.I q
the queue on which the place the message.
.PD 0
.TP
.I mp
the message to place on the queue.
.PD
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
.BR putq ()
places the message pointed to by
.I mp
on the queue
.I q
without invoking the queue's
.IR qi_putp (9)
procedure.
.PP
After placing the message on queue
.IR q ,
.BR putq ()
adjusts the queue's flags and byte counts appropriately and schedules the
queue
.IR qi_srvp (9)
procedure when necessary.
.\"
.\"
.SS Message Queueing Priority
.PP
.I STREAMS
queues messages based on message queueing priority.  There are three priority classes for messages
that can be tested with
.BR pcmsg (9):
.PP
.TS
tab(:);
lllbsss.
1.:\fIHigh Priority\fP:\fC(pcmsg(db_type) != 0 && b_band == 0)\fP
2.:\fINormal Priority\fP:\fC(pcmsg(db_type) == 0 && b_band >= 0)\fP
3.:\fIOrdinary\fP:\fC(pcmsg(db_type) == 0 && b_band == 0)\fP
.TE
.PP
.BR putq ()
only examines the message class and priority band of the first message block of a message.  If a
high priority
message is passed to
.BR putq ()
with a non-zero
.I b_band
value,
.I b_band
is reset to zero
.RB ( 0 )
before placing the message on the queue.
If a
normal priority
message is passed to
.BR putq ()
with
.I b_band
value greater than the number of
.BR qband (9)
structures associated with the queue,
.BR putq ()
attempts to allocate a new
.BR qband (9)
structure for each band up to and including the band of the message.
(But, see
.RI \(lq COMPATIBILTY \(rq,
below.)
.PP
The message will always be placed in order in the queue.  If the message is a
high priority
message, it will be placed on the queue immediately following other
high priority
messages and ahead of
normal priority
and
ordinary
messages.  If the message is a
normal priority
message with a non-zero
.IR b_band ,
it is placed after other messages in the queue band.
If the message is a
ordinary
message (with a zero
.IR b_band ),
it is placed after all other messages.
.PP
Placing the first message for a queue band onto the queue can result in the allocation of a
.BR qband (9)
structure to provide flow control accounting for the queue band.  Failure to allocate a
.BR qband (9)
structure can cause
.BR putq ()
to fail.  Failure can be avoided by ensuring that a
.BR qband (9)
structure exists for the band,
.IR b_band ,
using
.BR strqget (9)
or
.BR strqset (9).
.PP
Whether a
.BR qband (9)
exists for a given
.I b_band
can be determined by examining the
.I q_nband
member of the
.BR queue (9)
structure.  When
.BR "q_nband\ >=\ b_band" ,
a structure exists; when
.BR "q_nband\ <\ b_band" ,
one needs to be allocated.
.\"
.\"
.SS "Flow Control"
.PP
If a
high priority
message is placed onto the queue, the queue will always be enabled, as with
.BR qenable (9);
that is, the queue's
.IR qi_srvp (9)
procedure will be scheduled if it exists (and is not already scheduled).
This is true for
.BR appq (9),
.BR insq (9),
.BR putq (),
and
.BR putbq (9).
Because this is true, a
high priority
message should never be placed back on a queue by the queue's
.IR qi_srvp (9)
procedure with
.BR putbq (9),
otherwise and indefinite loop could result.
.PP
.BR putq ()
is allowed to enable the queue
.RB ( QNOENB
is not set) if the message is a
normal priority
message, or the
.B QWANTR
flag is set indicating that the
.IR qi_srvp (9)
procedure is ready to read the queue.
.PP
If a
normal priority
message with a non-zero
.I b_band
is placed onto an empty queue band, the queue will be enabled, as with
.BR enableq (9);
that is, the queue's
.IR qi_srvp (9)
procedure will be scheduled if it exists (and is not already scheduled) and the
.B QNOENB
flag has not been set for the queue with
.BR noenable (9).
.PP
If a
ordinary
message with a zero
.I b_band
is placed onto an empty queue and the
.B QWANTR
flag is set for the queue, then the queue will be enabled, as with
.BR enableq (9);
that is, the queue's
.IR qi_srvp (9)
procedure will be scheduled if it exists (and is not already scheduled) and the
.B QNOENB
flag has not been set for the queue with
.BR noenable (9).
Another way of putting this is that
.BR putq ()
will enable the queue if the queue is not inhibited with
.BR noenable (9)
and one of the following conditions also holds true:
.IP \(bu \w'\(bu\(em'u
The driver or module has just been opened for the first time: that is, the queue is empty and has
always been empty.
.IP \(bu
.BR getq (9)
found no message queued on its last call and no message has been queued since.
.PP
When an ordinary message is enqueued by
.BR putq (),
it will cause the
.IR qi_srvp (9)
procedure to be scheduled only if the queue was previously empty, and a previous
.BR getq (9)
call returns
.B NULL
(that is, the
.B QWANTR
flag is set).  If there are messages on the queue,
.BR putq ()
presumes that the
.IR qi_srvp (9)
procedure is blocked by flow control and the procedure will be rescheduled by
.I STREAMS
when the block is removed.
.PP
As a general rule for
.BR appq (9),
.BR insq (9),
.BR putq (),
and
.BR putbq (9),
the queue is enabled whenever the message placed on the message queue becomes the
first message on the queue, unless the message is a
normal priority
message and the queue has been disabled with
.BR noenable (9),
or the message was placed with
.BR putbq (9).
.\".PP
.\".BR putq ()
.\"only looks at the priority band of the first message block.  If a
.\"high priority
.\"message is passed to
.\".BR putq ()
.\"with a non-zero
.\".I b_band
.\"value,
.\".I b_band
.\"is reset to zero
.\".RB ( 0 )
.\"before placing the messge on the queue.  If the message is passed to
.\".BR putq ()
.\"with a
.\".I b_band
.\"value that is greater than the number of
.\".BR qband (9)
.\"structures associated with the queue,
.\".BR putq ()
.\"tries to allocate a new
.\".BR qband (9)
.\"structure for each band up to and including the band of the message.
.\".PP
.\"The above rules apply to
.\".BR appq (9),
.\".BR insq (9),
.\".BR putq (),
.\".BR putbq (9).
.\".PP
.\".BR putq ()
.\"will not schedule a queue if
.\".BR noenable (9)
.\"has been previously called for this queue.
.\".BR noenable ()
.\"instructs
.\".BR putq ()
.\"to enqueue the message when called by this queue, but not to schedule the
.\".IR qi_srvp (9)
.\"procedure.
.\".BR noenable (9)
.\"doesnot prevent the queue from being scheduled by a flow control back-enable.  The inverse of
.\".BR noenable (9)
.\"is
.\".BR enableok (9).
.\"
.\"
.SH USAGE
.PP
.BR putq ()
is intended to be used from the
.IR qi_putp (9)
procedure in the same queue in which the message will be queued.
.PP
The based steps taken by a module
.IR qi_putp (9)
put procedure, for a module with a
.IR qi_srvp (9)
service procedure, are as follows:
.IP (1) \w'(0)\(em'u
Check if the passed message is a
high priority
.RI ( "db_type >="
.BR QPCTL )
message.  If it is, process the message and possibly pass it to the next queue with
.BR putnext (9).
.PD 0
.IP (2)
If the message is a
normal priority
.RI ( "db_type <"
.BR QPCTL )
message, test if the message can be passed along with
.BR bcanputnext (9),
for the band,
.IR b_band .
.IP (3)
If
.BR bcanputnext (9)
returns true, process the message and pass the message along with
.BR putnext (9).
.IP (4)
If
.BR bcanputnext (9)
returns false, place the message on the message queue with
.BR putq ().
.IP (5)
Return.
.PD
.PP
A module should not call
.BR putq ()
directly to pass messages to a neighboring module.
.BR putq ()
may be used as the
.IR qi_putp (9)
procedure value in either or both of a module's
.BR qinit (9)
structures.  This effectively bypasses any
.IR qi_putp (9)
procedure processing and uses only the module's
.IR qi_srvp (9)
procedure(s).
.PP
.BR putq ()
should not be called from outside the
.I STREAMS
framework, but only from within a queue
.IR qi_putp (9)
put procedure.  Drivers that need to put messages to their own queues from outside the
.I STREAMS
framework (asynchronously) should use
.BR put (9)
instead.
.PP
.BR putq ()
is generally used in a module
.IR qi_putp (9)
procedure and is used in conjunction with
.BR getq (9)
and
.BR putbq (9)
called from a module's
.IR qi_srvp (9)
procedure.
.PP
Normally, a module's
.IR qi_srvp (9)
procedure reads message from a queue using
.BR getq (9)
until there are no messages left on the queue
.RB ( getq (9)
returns
.BR NULL ),
or
.BR canput (9)
or
.BR bcanput (9)
fails when attempting to pass a message along the
Stream.
.PP
When
.BR canput (9)
or
.BR bcanput (9)
fails (returns
.BR false ),
the module
.IR qi_srvp (9)
procedure places the message that it was processing back on its queue using
.BR putbq (9).
At this point the
.IR qi_srvp (9)
procedure is blocked.  When
.BR canput (9)
or
.BR bcanput (9)
failed, it set the
.B QWANTW
or
.B QB_WANTW
flag on the queue or queue band that was full, indicating to
.BR getq (9)
and
.BR rmvq (9)
that backenabling is required when the queue falls to its low water mark.
.PP
When
.BR getq (9)
fails to retrieve a message from an empty queue, it sets the
.B QWANTR
flag on the queue to indicate to
.BR putq (),
[also
.BR appq (9)
and
.BR insq (9)],
that it is blocked awaiting messages.
.PP
When
.BR getq (9)
successfully retrieves a message from the queue, it clears the
.B QWANTR
flag on the queue to indicate to
.BR putq (),
[also
.BR appq (9)
and
.BR insq (9)],
that it is no longer blocked awaiting messages for those priority bands.
.PP
Because each priority band has separate high- and low-water marks and queue band counts, just
because there are messages in the queue does not mean that a
.IR qi_srvp (9)
procedure is blocked on flow control for all bands.
.PP
In general, the condition in which
.BR putq ()
can find the queue, and the causes of the conditions, and the action to be taken by
.BR putq ()
can be summarized as follows:
.IP \(bu \w'\(bu\(em'u
When a
high priority
message is enqueued, the queue is enabled.
.IP \(bu
When a
normal priority
(\fIb_band\fR>\fB0\fR)
or
ordinary
(\fIb_band\fR=\fB0\fR)
message is enqueued, and it becomes the first message in the queue, the queue is enabled.  Because
normal priority
or
ordinary
messages are queued in order of arrival, this means that the queue band was empty before the message
was enqueued, and that there were no higher priority messages already on the queue.
This also means that a
.BR getq (9)
performed on the queue immediately following the
.BR putq ()
will retrieve the message that was enqueued.  It is a good policy to enable the queue when the newly
enqueued message can be processed immediately by the
.IR qi_srvp (9)
procedure.
.IP \(bu
When a
normal priority
or
ordinary
message is enqueued, and the
.B QWANTR
flag was set by
.BR rmvq (9)
or
.BR getq (9),
the queue is enabled.  In this case,
.BR getq (9)
has indicated that the queue is not blocked on flow control but has blocked awaiting the
availability of any message.  The queue
.IR qi_srvp (9)
procedure can possibly run successfully on enqueued messages, and should be enabled.
.\".PP
.\".nr tl \n[.l]u-36m
.\".TS
.\"tab(:);
.\"lb1lb1lb1lbw(\n[tl]u)
.\"lblblblb
.\"lblblblb
.\"lilll.
.\"Queuing:QWANTR/:q_first:Description
.\"Priority:QNOENB/:qb_first:
.\":QENAB::
.\"_
.\"High:X/X/0:X:T{
.\"When a \fIhigh priority\fP message is queued, it always enables the queue and schedules the queue's
.\"\fBservice\fP procedure, if one exists.
.\"T}
.\"
.\"Band:X/0/0:X:T{
.\"When a \fInormal priority\fP message is queued to a queue band, it is possible that the queue's
.\"\fBservice\fP procedure might be able to process the expedited message immediately, and the queue is
.\"enabled if it has not been previously inhibited with \fBnoenable\fP(9); that is, the \fBQNOENB\fP
.\"flag is clear, the \fBQENAB\fP flag is clear, and the queue has a \fBservice\fP procedure
.\"(\fIqi_srvp\fP is non-\fBNULL\fP).  The ramification of this action is that if the module is not
.\"aware of priority bands, it will be enabled
.\"more often than in the SVR3 case.
.\"T}
.\"
.\"Normal:1/0/0:X:T{
.\"When a \fInormal\fR message is queued to an empty queue and \fBQWANTR\fP is set, the queue's
.\"\fBservice\fP procedure is ready to read messages from the queue and the queue's \fBservice\fR
.\"procedure is enabled, if it has not already been enabled, it has not been previously inhibited with
.\"\fBnoenable\fP(9); that is, the \fBQNOENB\fP is clear and the queue has a \fBservice\fP procedure
.\"(\fIqu_srvp\fP is non\fBNULL\fP).
.\"T}
.\"
.\":X/0/0:\fBNULL\fP:T{
.\"When a \fInormal\fP messae is queued to a queue that has no messages queued, and regarless of the
.\"setting of \fBQWANTR\fR, the queue's \fBservice\fP procedure might be able to process the message
.\"and the queue's \fBservice\fP procedure is enabled, if it has not already been enabled, and it has
.\"not been previously inhibited with \fBnoenable\fP(9); that is, the \fBQNOENB\fP flag is clear, the
.\"\fBQENAB\fP flag is clear, and the queue has a \fBservice\fP procedure (\fIqi_srvp\fP is
.\"non-\fBNULL\fP).
.\"T}
.\"_
.\".TE
.\"
.\"
.SH RETURN
.PP
Upon success,
.BR putq ()
returns true (1) and places the message pointed to by
.I mp
on the queue pointed to by
.IR q .
Upon failure,
.BR putq ()
returns false (0) and does not alter the passed in queue or message.
.\"
.\"
.SH ERRORS
.PP
When
.BR putq ()
fails, it returns false (0).
.BR putq ()
only fails when a
.BR qband (9)
structure could not be allocated for a banded message arriving at a first use
empty band.
.BR putq ()
always succeeds for
high priority
and
ordinary
band zero (0) messages.
.\"
.\"
.SH CONTEXT
.PP
.BR putq ()
can be called from any context, including process context, module procedures, callouts, callbacks,
soft interrupts (tasklets and bottom halves), and interrupt service routines.
.PP
.BR putq ()
can be called from a context asynchronous to
.IR STREAMS ,
such as an asynchronous callback, tasklet, bottom half, or interrupt service routine.
.\"
.\"
.SH MP-STREAMS
.PP
.BR putq ()
is MP-safe; however,
the caller is responsible for the validity of the passed in queue and message pointers, and
exclusive access to the passed in messages.
.\"
.SS Validity for \fIq\fP
.PP
The caller is responsible for the validity of the passed in queue pointer,
.IR q .
.I q
is valid from all procedures synchronous on
.IR q ,
including
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_putp (9),
and
.IR qi_srvp (9),
procedures and synchronous callback functions.
.PP
For process context, asynchronous callback functions, soft interrupts (tasklets and bottom halves),
and interrupt service routines, that is, when calling
.BR putq ()
from a
.RI non- STREAMS
context, any valid queue pointer,
.IR q ,
can be passed to
.BR putq ();
however, the caller must ensure that the queue pointer remains valid across the call.
In general,
.I q
is valid from the moment that
.BR qprocson (9)
returns until the moment that
.BR qprocsoff (9)
is called, so, if the
.RI non- STREAMS
code sections are passed a pointer from
.IR q 's
.IR qi_qopen (9)
procedure and invalidated by its
.IR qi_qclose ()
procedure, validity can be ensured.  (This is the case with
.BR timeout (9)
and
.BR bufcall (9)
asynchronous callbacks.  These callbacks are passed a queue pointer only after
.IR qi_qopen (9)
and must be cancelled before
.IR qi_qclose (9)
returns.)
.PP
Otherwise, from outside of
.I STREAMS
context, it is still possible to derive a queue pointer from a validated queue pointer, provided that
the
Stream 
is frozen with a call to
.BR freezestr (9).
Under
.BR "@PACKAGE_TITLE@",
.[
@PACKAGE_TITLE@
.]
it is permissible to call
.BR putq ()
on a
Stream
that is frozen with
.BR freezestr (9),
and
.BR freezestr (9)
can be called from any context.
.BR putq ()
takes a recursive freeze lock that can be acquired by the caller when the
Stream
is frozen.  If another thread has the
Stream
frozen with
.BR freezestr (9),
the calling processor will spin until the
Stream
is thawed by the other thread with
.BR unfreezestr (9).
.\"
.SS Validity and Exclusion for \fImp\fP
.PP
Validity of the
.I mp
pointer and exclusive access to the message pointed to by
.I mp
is normally assured in the usual ways:  If
.I mp
was just allocated using
.BR allocb (9)
or
.BR esballoc (9),
or,
if
.I mp
was just removed from a message queue with
.BR getq (9)
or
.BR rmvq (9),
then exclusion and validity is assured.
.\"
.\"
.SH IMPLEMENTATION
.PP
.\"
.\"
.SH NOTICES
.PP
It can be guaranteed that
.BR putq ()
will always succeed, even for banded messages, by calling
.BR strqget (9)
or
.BR strqset (9)
to set the high and low water marks and packet sizes for all bands used by the
driver or module.
It is also possible to examine the
.I q_nband
member of the
.BR queue (9)
structure to determine if a
.BR qband (9)
structure has been allocated for the given priority band message.  If
.I q_nband
is greater than or equal to the
.I b_band
priority of the message, a
.BR qband (9)
structure has already been allocated; otherwise,
.BR putq ()
will attempt to allocate all of the
.BR qband (9)
structures between
.I q_nband
and
.I b_band
(excluding
.IR q_nband
and including
.IR b_band ).
.PP
When
.BR putq ()
fails and returns zero (0), it is the callers responsibility to address the
disposition of the passed in message,
.IR mp .
One response would be to free the message using
.BR freemsg (9).
Because the caller is responsible for the message upon failure, the return value from
.BR putq ()
should alway be examined.
Portable
.I STREAMS
drivers and modules will always examine the return value from
.BR putq ()
and take responsibility for the passed in message if
.BR putq ()
returns failure.
.\"
.\"
.SH EXAMPLES
.PP
The following example is an abbreviated version of the
.IR qi_putp (9)
procedure for the
.BR loop (4)
driver, from the
.I src/drivers/loop.c
source file in the
.B @PACKAGE@-@VERSION@
distribution directory:
.PP
.nf
\fC\s-2\
 1  int
 2  loop_wput(queue_t *q, mblk_t *mp)
 3  {
 4      struct loop *p = q->q_ptr, *o;
 5      int err;
 6  
 7      switch (mp->b_datap->db_type) {
 8      case M_IOCTL:
 9          /* ... */
10          break;
11      case M_FLUSH:
12          /* ... */
13          break;
14      default:
15          spin_lock_bh(&loop_lock);
16          if (p->other) {
17              if (!q->q_first) {
18                  queue_t *rq;
19  
20                  rq = p->other->rq;
21                  spin_unlock_bh(&loop_lock);
22                  if (rq) {
23                      if (mp->b_datap->db_type >= QPCTL
24                          || bcanputnext(rq, mp->b_band)) {
25                          putnext(rq, mp);
26                          break;
27                      }
28                  }
29              } else
30                  spin_unlock_bh(&loop_lock);
.B "31              putq(q, mp);
32          } else {
33              spin_unlock_bh(&loop_lock);
34              freemsg(mp);
35              putnextctl2(OTHERQ(q), M_ERROR, ENXIO, ENXIO);
36          }
37          break;
38      }
39      return (0);
40  }
\s+2\fP
.fi
.PP
At
.BR "Line 31" ,
.BR putq ()
is used when there is no receiving queue or the Stream is flow controlled for the message, to place
the message on the message queue and await
.IR qi_srvp (9)
service procedure scheduling.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR qenable (9),
.BR enableq (9),
.BR noenable (9),
.BR qband (9),
.BR strqget (9),
.BR strqset (9),
.BR freezestr (9),
.BR insq (9),
.BR putbq (9),
.BR getq (9),
.BR rmvq (9).
.\"
.\"
.SH BUGS
.PP
.BR putq ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR putq ()
is compatible with
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
and implementations based on
.IR "SVR 4" ,
.[
svr4dk
.]
with the following portability considerations:
.IP \(em \w'\(em\(em'u
When a banded message (a
normal priority
message, with a non-zero
.IR b_band )
is placed on a queue with
.BR putq (),
.BR putbq (9),
.BR insq (9),
or
.BR appq (9),
and a
.BR qband (9)
structure does not exist for the band corresponding to
.IR b_band ,
.BR putq ()
tries to allocate
.BR qband (9)
structures for all non-existent bands up to and including the band of the message
and places the resulting
.BR qband (9)
structures into a reverse sorted
.I q_bandp
list on the
.BR queue (9).
.I q_nband
is adjusted accordingly and always reflects the highest allocated band.
.IP ""
This is consistent with the description in the
.IR "SVR 4 STREAMS Programmer's Guide" ,
which states:
\(lqIf a mesages is passed to
.BR putq ()
with a
.I b_band
value that is greater than the number of
.BR qband (9)
structures associated with the queue [member
.I q_nband
in the
.BR queue (9)
structure],
.BR putq ()
tries to allocate a new
.BR qband (9)
structure for each band up to and including the band of the message.\(rq
.[
svr4spg
.]
.IP ""
.IR Solaris \(rg
allocates
.BR qband (9)
structures up to an including
.IR b_band ,
and maintains the
.I q_nband
member of the
.BR queue (9)
structure.
It is safe to assume that other
.IR UNIX \(rg
implementations based on
.I SVR 4
follow
.I SVR 4
as does
.IR Solaris \(rg.
.IP ""
.I LiS
allocates
.BR qband (9)
structures on demand, links them in a sparse array,
and will also reuse
.BR qband (9)
structures that were previously allocated for bands that are currently empty.  This is not a good
approach because user established band high- and low-water marks will be reset to those of the
.BR queue (9)
structure when a subsequent message is place on the reused band.
Also, it is difficult to predict when
.BR appq (9),
.BR insq (9),
.BR putq (),
.BR putbq (9),
will fail as a result of failure to allocate a
.BR qband (9)
structure.
This
.I LiS
bug is not perpetuated in
.BR "@PACKAGE_TITLE@" .
.[
@PACKAGE_TITLE@
.]
.IP ""
Portable
.I STREAMS
drivers and modules can rely on intermediate band strutures being allocated
when a
normal priority
message is placed on a queue using
.BR putq (),
and may examine the
.I q_nband
member of the
.BR queue (9)
structure to determine whether a
.BR qband (9)
exists for a given band number.
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B "@PACKAGE_TITLE@"
.[
@PACKAGE_TITLE@
.]
instead of
.IR LiS .
.[
lis
.]
.IP \(em
.BR putq ()
orders the
.BR qband (9)
structures in the list pointed to by the
.I q_bandp
member of the
.BR queue (9)
structure from highest band number to lowest band number.  This ensures that
higher priority
.BR qband (9)
structures can be accessed faster than lower priority
.BR qband (9)
structures.
.IR Solaris \(rg
.[
soldoc
.]
lists
.BR qband (9)
structures from lowest to highest priority, without gaps (see consideration of allocation above).
.I LiS
.[
lis
.]
lists
.BR qband (9)
structures from most recently allocated/reused to least recently allocated/reused.
Neither the
.IR Solaris \(rg
nor the
.I LiS
approach is very efficient.
.IP ""
Portable
.I STREAMS
drivers and modules will not depend on the ordering of
.BR qband (9)
structures within the
.I q_bandp
list on the
.BR queue (9)
structure, and, will not access
.BR qband (9)
or
.BR queue (9)
members directly, but will use the portable
.BR strqget (9)
and
.BR strqset (9)
utilities instead.
.IP \(em
.BR putq ()
is not bug for bug compatible with 
.IR LiS .
.IP ""
Versions of
.I LiS
previous to
.I OpenSS7 Release LiS-2.16.18-17
automatically freed the message on failure.
Versions of
.I LiS
subsequent to
.I OpenSS7 Release LiS-2.16.18-16
do not free the message on failure in accordance with
.I SVR 4.2
and other implementation documentation.
The
.I LiS
implementation of
.BR putq ()
stil has bugs related to
.BR qprocsoff (9)
handling in that it fails while
.BR qprocsoff (9)
is in effect or if the stream is closing.
.IP ""
Portable
.I STREAMS
drivers and modules will not use releases of
.I LiS
prior to
.IR "OpenSS7 Release LiS-2.16.18-17" .
.IP \(em
.BR putq ()
may be called on a stream frozen with
.BR freezestr (9).
.IP ""
.IR Solaris \(rg,
.IR SUPER-UX \(rg
and
.IR UnixWare \(rg
do not permit
.BR putq ()
to be called on a stream frozen with
.BR freezestr (9).
.[
usldk
.]
.[
solspg
.]
.[
suxspg
.]
.[
uw7spg
.]
(But strangely, code inspection reveals that
.IR OpenSolaris \(rg
permits
.BR putq ()
and
.BR getq (9)
to be called on a stream frozen with
.BR freezestr (9).)
.IP ""
Portable
.I STREAMS
drivers and modules will not call
.BR putq ()
on a stream currently frozen by the caller with
.BR freezestr (9).
.RB ( "@PACKAGE_TITLE@"
includes an assertion to enforce this in the SMP environment.)
.\".IP \(em
.\".BR putq ()
.\"cannot be called from an interrupt service routine (hard irq).
.\".IP ""
.\".B @PACKAGE_TITLE@
.\".[
.\"@PACKAGE_TITLE@
.\".]
.\"does not permit
.\".BR putq ()
.\"to be called from an interrupt service routine (hard irq) context to remove the need for suppressing
.\"local interrupts, and greatly reducing the need to suppress local bottom halves, throughout the
.\".I STREAMS
.\"executive.  The only queue utilities that
.\".B @PACKAGE_TITLE@
.\"permits to be called from an interrupt service routine (hard irq) context are
.\".BR qwriter (9),
.\".BR streams_put (9),
.\".BR mp_become_writer (9)
.\"and
.\".BR put (9),
.\"and these functions defer until the next
.\".BR runqueues (9)
.\"pass.
.\".IP ""
.\"Portable
.\".I STREAMS
.\"drivers and modules will not call
.\".BR putq ()
.\"from any context outside a
.\".I STREAMS
.\"queue procedure or callback function.  At the Stream end (Stream head or driver), from a context
.\"other than a
.\".I STREAMS
.\"coroutine, only
.\".BR put (9)
.\"will be used by a portable
.\".I STREAMS
.\"driver or module.
.\".IP \(em
.\"Symbol
.\".BR lis_putq ()
.\"is provided for compatibility with
.\".IR LiS .
.\"See
.\".BR liscompat (9).
.\".BR lis_putq ()
.\"simply calls
.\".BR putq ()
.\"directly.
.IP \(em
All versions of
.I LiS
contain the bug that they keep track of message queue counts,
.IR q_count ,
.IR qb_count ,
in terms of the sum of the absolute sizes of the data buffers referenced by message blocks,
.RB ( "db_lim - db_base" ),
and not the sizes of the message blocks themselves,
.RB ( "b_wptr - b_rptr" ),
which does not conform to
.IR "SVR 4.2 STREAMS" .
.[
svr42spg
.]
See
.BR msgsize (9).
No other implementation has this bug.
.IP ""
Portable
.I STREAMS
applications programs, drivers and modules will use
.BR "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP DDI/DKI" .
.[
usldk
.]
.\"
.\"
.SH HISTORY
.PP
.BR putq ()
appears as part of
.IR "SVR 4.0 STREAMS" .
.[
svr4spg
.]
.PP
.BR putq ()
first appeared in
.IR "SVR 3" .
.[
svr3spg
.]
.PP
.BR putq ()
was described in Dennis Ritchie's original paper.
.[
streamio
.]
.\"
.\"
.[
$LIST$
.]
.TI
