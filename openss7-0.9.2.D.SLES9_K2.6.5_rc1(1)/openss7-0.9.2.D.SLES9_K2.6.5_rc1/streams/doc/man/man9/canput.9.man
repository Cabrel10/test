'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) canput.9.man,v 0.9.2.29 2006/04/05 09:44:09 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:09 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" canput.9.man,v
.\" Revision 0.9.2.29  2006/04/05 09:44:09  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH CANPUT 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B canput
\- test flow control on a \fISTREAMS\fP message queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP
.BI "int canput(queue_t *" q );
.\"
.\"
.SH ARGUMENTS
.TP
.I q
the queue from which to begin testing for flow control.
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
It is the responsibility of a
.I STREAMS
driver passing a normal priority, band zero (0),
message to
a
Stream end
queue, to check for flow control using
.BR canput ()
before passing the message with
.BR put (9).
.PP
.BR canput ()
checks whether the
Stream
is flow controlled starting at
.IR q .
.BR canput ()
looks for the first queue with a
.IR qi_srvp (9)
service procedure, or no next queue (i.e. the
.I q_next
pointer is
.BR NULL ).
.PP
If the first queue has the
.B QFULL
flag clear indicating that it is not full,
then
.BR canput ()
will return
.I true
.RB ( 1 ).
.PP
If the first queue has the
.B QFULL
flag set indicating that it is full,
then
.BR canput ()
will set the
.B QWANTW
flag and return
.I false
.RB ( 0 ).
.PP
.BR canput ()
sets the
.B QWANTW
flag so that
.BR rmvq (9),
.BR getq (9),
.BR flushq (9),
or
.BR flushband (9),
will back-enable the
.IR qi_srvp (9)
service procedure feeding the flow controlled
queue \" or queue band
once the flow controlled
queue \" or queue band
is no longer full (i.e. messages have been read from the queue to reduce the
queue \" or queue band
count beneath the low water mark for the
queue, \" or queue band,
or emptying the queue, clearing the
.BR QFULL \" or " QB_FULL
flag).
.\"
.\"
.SH USAGE
.PP
It is the responsibility of all
.I STREAMS
drivers with a
.IR qi_srvp (9)
service procedure
passing
a normal priority, data message
.RB ( M_PROTO "(9), " M_DATA (9))
to
a
Stream end
queue, to check for flow control using
.BR canput (9)
or
.BR bcanput (9),
for the
.I b_band
of the message,
before passing a message to the queue with
.BR put (9).
Drivers without a
.IR qi_srvp (9)
service procedure do not check flow control.
Each
Stream head,
Stream end
and multiplexing driver
is responsible for checking flow control before passing a message onto a
Stream.
Flow control is checked using one of
.BR canput (9)
or
.BR bcanput (9).
.I STREAMS
modules have different responsibilities, see
.RI \(lq USAGE \(rq
under
.BR canputnext (9)
or
.BR bcanputnext (9).
.PP
.BR canput ()
and
.BR bcanput (9)
will perform actions on a forward queue with no queue
.IR qi_srvp (9)
service procedure, but for which there is no forward queue
.RI ( q_next
is
.BR NULL ).
The reason for this is that a write queue at the Stream end (driver) might remove messages from the
message queue under conditions other than a service procedure.
For example, a driver write queue
.IR qi_putp (9)
put procedure could be designed to place all messages from the data stream onto the message queue.
When a transmit interrupt service routine runs, it can take message off of the queue using
.BR rmvq (9)
and use the messages so removed to fill the device's transmit buffer.  For flow control to work
correctly in this situation,
.BR canput (9)
and
.BR bcanput (9)
must still set the
.B QWANTW
or
.B QB_WANTW
flag when it encounters a driver write queue or queue band with the
.B QFULL
or
.B QB_FULL
flag set, so that
.BR getq (9),
.BR rmvq (9),
.BR flushq (9),
.BR flushband (9),
called from the interrupt service routine will still back-enable the Stream,
[see
.BR qbackenable (9)].
.\"
.\"
.SH RETURN
.PP
.BR canput ()
will return
.I false
.RB ( 0 )
when the specified
.I STREAMS
message queue is flow controlled
and returns
.I true
.RB ( 1 )
when the specified
.I STREAMS
message queue is not flow controlled.
.\"
.\"
.SH ERRORS
.PP
.BR canput ()
always succeeds for a valid
.IR q .
If
.I q
is invalid, the result is undefined.
.\"
.\"
.SH CONTEXT
.PP
.BR canput ()
can be called from any context, including user context, module procedures, callouts, callbacks, soft
interrupts (tasklets and bottom halves), and interrupt service routines.
.\"
.\"
.SH MP-STREAMS
.PP
.BR canput ()
is MP-safe when called from any context.  However, the caller is responsible for the validity of the
passed in queue pointer,
.IR q ,
across the call.
.PP
The validity of either queue in the pair, and either
.I q_next
pointer for a queue in the pair, for the queue pointer passed to a module procedure, callout
or synchronous callback functions, is guaranteed by
.BR "@PACKAGE_TITLE@" .
Any queue pointer in the pair passed as an argument to an asynchronous callback function
is also valid, providing the driver or module observes the rules for cancellation of asynchronous
callbacks on close.
.PP
When wishing to test flow control on
a driver's read queue
from an interrupt service routine, where there is no
.IR qi_srvp (9)
service procedure defined for the read queue, a more portable approach is to call
.BR put (9)
instead and test flow control from within the read queue's
.IR qi_putp (9)
put procedure.
.PP
It is possible, due to race conditions in a
multiprocessor (MP) system, that
.BR canput ()
can be called for a queue and return
.I true
.RB ( 1 )
and yet the
Stream
becomes flow controlled before a
call to
.BR putnext (9).
The caller to
.BR putnext (9)
is then in violation of flow-control rules; however, the extent of this violation is bounded.
.PP
It is also possible, that
.BR canput ()
can be called for a queue and return
.I false
.RB ( 0 ),
and a queue utility retrieving a message from the full queue causes flow control to subside and the
service procedure of the caller to become back-enabled before the call to
.BR putq (9)
(in the case
.BR canput ()
is called from a
.IR qi_putp (9)
put procedure),
or
.BR putbq (9)
(in the case
.BR canput ()
is called from a
.IR qi_srvp (9)
service procedure).
In the case that the service procedure runs before
.BR putq (9),
placing the message on the queue will invoke the service procedure again, when necessary.
In the case that the queue was enabled before
.BR putbq (9),
execution of the service procedure will occur after the current service procedure exits.
.PP
Although
.BI canput( q->q_next )
is functionally equivalent to
.BI canputnext( q ),
for the
.BR canput ()
form, the dereference of the
.I q->q_next
pointer is not protected on some implementations of
.I STREAMS
for MP architectures: on which
.I q_next
may change as a result of a
concurrent reconfiguration of the
Stream
(e.g. an
.BR I_PUSH " or " I_POP
.BR streamio (7)
operation).
For MP operation,
portable
.I STREAMS
drivers and modules will always call
.BR canputnext (9)
instead of
.BI canput( q->q_next ).
.PP
For maximum portability and compatibility,
.BI canput( q->q_next )
under
.B "@PACKAGE_TITLE@"
is always MP-safe from a module procedure or callout, or synchronous callback function that was
passed
.IR q ,
or the queue pair containing
.IR q ,
(and is even safe for an asynchronous callback function passing
.I q
or
.I q->q_next
that was invoked from a procedure, callout or synchronous callback on
.IR q ).
.\"
.\"
.SH NOTICES
.PP
It is the responsibility of a
.I STREAMS
driver putting a normal priority, band zero,
message to a message queue to check for flow control using
.BR canput ()
before placing a message on the queue with
.BR put (9)
or
.BR putq (9).
.PP
.BR canputnext (9)
and
.BR bcanputnext (9)
will always be used instead of
.BI canput( q->q_next )
or
.BI bcanput( q->q_next )
by portable
.I STREAMS
drivers and modules
on multiprocessor (MP) systems.
.PP
.BR canput ()
and
.BR canputnext (9)
are the equivalent of
.BR bcanput (9)
and
.BR bcanputnext (9)
with a zero
.IR band :
and are implemented as such.
.PP
Note that there is some conflict in the documentation as to what happens when
.BR canput ()
hits the queue at end of the Stream
.RI ( q->q_next
is
.BR NULL )
and the queue has no service procedure.  Some implementations, notably
.IR UnixWare \(rg,
.[
uw7doc
.]
say
.BR canput ()
always returns
.IR true
.RB ( 1 )
in this situation.
The
.IR "SVR 4 SPG"
.[
svr4spg
.]
stays that
.BR canput ()
searches for the a queue with a service procedure or which has no forward queue and then peforms the
actions.  This also consistent with
.IR Solaris \(rg
.[
solspg
.]
behaviour.
The
.IR "SVR 4 SPG" ,
.[
svr4spg
.]
however, also says that if a
.IR qi_putp (9)
put procedure places a message onto its own queue with
.BR putq (9),
that it requires a
.IR qi_srvp (9)
service procedure.
One would not then expect a queue without a service procedure to have anything but an empty message
queue, and in that case,
.BR canput ()
can be expected to always return
.I true
.RB ( 1 )
for it.
.PP
.B "@PACKAGE_TITLE@"
performs the actions on the queue at the end of the Stream when it is reached regardless of whether
it has a
.IR qi_srvp (9)
service procedure or not.  This is consistent with the description in the
.IR "SVR 4 SPG"
.[
svr4spg
.]
as well as
.IR Solaris \(rg
behaviour.
If such a queue's
.IR qi_putp (9)
put procedure never places message on the queue with
.BR putq (9),
there will be no difference in the values returned to
.BR canput ();
if the put procedure does place messages with
.BR putq (9),
without a service procedure,
.BR canput ()
will act as expected by the description in the
.IR "SVR 4 SPG" .
.[
svr4spg
.]
See also
.RI \(lq USAGE ,\(rq
above.
.\"
.\"
.SH IMPLEMENTATION
.PP
.BR canput ()
uses atomic bit operations and does not require locking of the queue
structure.  Therefore,
.BR canput ()
can be called for a
.I q
that is frozen with
.BR freezestr (9).
.\"
.\"
.SH EXAMPLES
.\"
.SS Example #1 \(em Put Procedure
.PP
.BR canput ()
is normally called before a call to
.BR putq (9)
as follows:
.sp
.nf
\fC\s-2\
 1  void
 2  example_putp(queue_t *q, mblk_t *mp)
 3  {
 4      priv_t p = (priv_t *) q->q_ptr;
 5      queue_t *uq = p->upper_queue;
 6  
 7      if (!q->q_count && (mp->b_datap->db_type >= QPCTL
 8                          || canput(uq))) {
 9          /* put to upper if we are empty and upper is
10             not flow controlled */
11          putq(uq, mp);
12      } else {
13          /* put to our own queue otherwise */
14          putq(q, mp);
15      }
16  }
\s+2\fR
.fi
.PP
Above, the example uses
.BR canput ()
from the lower queue
.IR qi_putp (9)
procedure (in a multiplexing driver) to test the upper queue for flow
control.  If the upper queue is flow controlled, the message is placed on the lower queue.
Otherwise, if the lower queue is empty and the upper queue is not flow controlled, the example
places the message directly on the upper queue.
.PP
Note that the upper queue must have a service procedure.
.\"
.SS Example #2 \(em Interrupt Service Routine
.PP
.BR canput ()
is typically called before a call to
.BR put (9)
in a driver interrupt service routine as follows:
.sp
.nf
\fC\s-2\
 1  int
 2  example_putp(queue_t *q, mblk_t *mp)
 3  {
 4      if (canput(q)) {
 5          putq(q, mp);
 6      } else {
 7          some_global_flag_dropping = 1;
 8          freemsg(mp);
 9      }
10      return (0);
11  }
12  
13  int
14  example_isr_handler(queue_t *q, caddr_t buf,
15                      size_t len)
16  {
17      mblk_t *mp;
18  
19      if ((mp = allocb(len, BRPI_HI))) {
20          bcopy(buf, mp->b_wptr, len);
21          mp->b_wptr += len;
22          put(q, mp);
23          return (1);
24      }
25      return (0);
26  }
\s+2\fR
.fi
.PP
The above example is left as an exercise to the reader.
.\"
.SS Example #3 \(em Alternative ISR
.PP
Another alternative for the ISR is to give the read side a service procedure and test before
.BR put (9)
as follows:
.PP
.nf
\fC\s-2\
 1  int
 2  example_srvp(queue_t *q)
 3  {
 4      mblk_t *mp;
 5  
 6      while ((mp = getq(q))) {
 7          if (mp->b_datap->db_type >= QPCTL
 8              || (!q->q_first && !(q->q_flag & QSVCBUSY)
 9                  && bcanputnext(q, b->b_band))) {
10              putnext(q, mp);
11              continue;
12          }
13          putbq(q, mp);
14          return (0);
15      }
16  }
17  
18  int
19  example_putp(queue_t *q, mblk_t *mp)
20  {
21      if (mp->b_datap->db_type >= QPCTL
22          || (!q->q_first && !(q->q_flag & QSVCBUSY)
23              && bcanputnext(q, b->b_band))) {
24          putnext(q, mp);
25          return (0);
26      }
27      putq(q, mp);
28      return (0);
29  }
30  
31  int
32  example_isr_handler(queue_t *q, caddr_t buf,
33                      size_t len)
34  {
35      mblk_t *mp;
36  
37      if (!canput(q))
38          return (0);
39      if ((mp = allocb(len, BPRI_HI))) {
40          bcopy(buf, mp->b_wptr, len);
41          mp->b_wptr += len;
42          put(q, mp);
43          return (1);
44      }
45      return (0);
46  }
\s+2\fP
.fi
.PP
The above example is also left as an excercise to the reader.
.\"
.SS Example #4 \(em Cannonical Module
.PP
Following is an example of the cannonical module non-band-aware, non-MP, put and service procedure
(for a proper, band-aware, MP-safe example, see
.BR bcanputnext (9)):
.PP
.nf
\fC\s-2\
 1  int
 2  example_putp(queue_t *q, mblk_t *mp)
 3  {
 4      if (mp->b_datap->db_type >= QPCTL) {
 5          putnext(q, mp);
 6      } else if (!q->q_first && canput(q->q_next)) {
 7          putnext(q, mp);
 8      } else {
 9          putq(q, mp);
10      }
11      return (0);
12  }
13  int
14  example_srvp(queue_t *q)
15  {
16      mblk_t *mp;
17  
18      while ((mp = getq(q))) {
19          if (canput(q->q_next)) {
20              putnext(q, mp);
21          } else {
22              putbq(q, mp);
23              break;
24          }
25      }
26      return (0);
27  }
\s+2\fP
.fi
.PP
.\"
.\"
.SH "SEE ALSO"
.PP
.BR putq (9),
.BR canputnext (9),
.BR bcanput (9),
.BR bcanputnext (9),
.BR freezestr (9),
.BR noenable (9),
.BR enableok (9),
.IR STREAMS (9).
.\"
.\"
.SH BUGS
.PP
.BR canput ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR canput ()
is compatible with
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
and implementations based on
.IR "SVR 4" ,
.[
svr4spg
.]
with the following portability considerations:
.IP \(em \w'\(em\(em'u
Because all
.I STREAMS
drivers and modules will be aware of queue priority bands when performing flow control,
use of
.BR canput ()
is not very useful and the band aware
.BR bcanput (9)
will be used instead.
.BR canput ()
is only provided for use by drivers and modules that either have no need to support queue bands
(e.g., on a driver read queue for a driver that never places non-zero priority messages on the
queue), or were written to the earlier
.I "SVR 3"
.[
svr3
.]
specification that did not include queue bands.
.IP ""
Portable
.I STREAMS
drivers and reusable modules will call
.BR bcanput (9)
instead of
.BR canput ()
in all cases where it cannot be guaranteed that the driver or module will not receive a non-zero
priority message to the queue.  (Some might even go to the extent of setting
.I b_band
to zero in all messages received by the
.IR qi_putp (9)
put procedure.)
.IP \(em
.BR canput ()
called with a
.B NULL
or invalid
.I q
pointer will have undefined results and may crash or destabilize the kernel.
Under
.IR LiS ,
if
.BR canput ()
suffers an internal error,
.I q
is
.BR NULL ,
or points to a structure other than a
.B queue_t 
structure,
it will return
.I false
.RB ( 0 ).
.IP ""
Portable
.I STREAMS
drivers and modules will not pass
.B NULL
or invalid arguments to
.I STREAMS
functions.
Portable
.I STREAMS
drivers and modules will use
.B "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
Although a call to
.BI bcanput( q ", " 0 )
is functionally equivalent to
.BI canput( q ),
.BR canput ()
is implemented separately from
.BR bcanput ()
for speed.
.I LiS
implements
.BI canput( q ),
.BI canputnext( q )
and
.BI bcanputnext( q ", " band )
with macros that call
.BI bcanput( q ", " band ).
This means that the
.I LiS
implementation of
.BR canput ()
suffers all of the same difficulties as its implementation of
.BR bcanput (9).
See
.RI \(lq COMPATIBILITY ,\(rq
under
.BR bcanput (9),
for details.
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
.BR canputnext ()
explicitly protects dereferencing of the
.I q->q_next
pointer with the
Stream head
read lock that prevents reconfiguration of the
Stream
during the call.
.I LiS
does not explicitly protect this dereference.
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
.BR canput ()
called with an invalid
.I q
pointer or a
.I q
pointer that has an invalid
.I q->q_next
pointer, will have undefined results and may crash or destabilize the kernel.
.I LiS
will return false (0) under the same conditions.
.IR STREAMS (4)
drivers and modules that always obtain
.I q
from a pointer passed by the
.I STREAMS
scheduler via
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_putp (9),
.IR qi_srvp (9),
(as is normal) will not encounter this problem.
.IP \(em
.IR HP-UX \(rg
.[
hpuxspg
.]
allows
.BR canput ()
(but not
.BR canputnext (9))
to be called from outside the
.I STREAMS
framework, but it cannot be passed a
.IR q->q_next
pointer, even from within the framework.
This is the reverse of
.IR Solaris \(rg,
below.
.IR HP-UX \(rg,
documented rules
.[
hpuxspg
.]
are more restrictive than
.BR "@PACKAGE_TITLE@" ,
so there are no portability issues.
.IP ""
.IR Solaris \(rg,
.[
solspg
.]
on the other hand, allows
.IR canputnext (9)
(but not
.BR canput ())
to be called from outside the
.I STREAMS
framework, but it cannot be passed a
.IR q->q_next
pointer, even from within the framework.
This is the reverse of
.IR HP-UX \(rg,
above.
.IR Solaris \(rg,
documented rules
.[
solspg
.]
are more restrictive than
.BR "@PACKAGE_TITLE@" ,
so there are no portability issues.
.IP \(em
.BR canput ()
may be called on a
Stream
frozen with
.BR freezestr (9).
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
.IR Solaris \(rg,
.[
solspg
.]
.IR SUPER-UX \(rg
.[
suxspg
.]
and
.IR UnixWare \(rg
.[
uw7spg
.]
do not permit
.BR canput ()
to be called on a
Stream
frozen with
.BR freezestr (9).
.IP ""
Portable
.I STREAMS
drivers and modules will not call
.BR canput ()
on a
Stream
frozen with
.BR freezestr (9).
.\".IP \(em
.\"Under
.\".IR LiS ,
.\"if
.\".BR canputnext ()
.\"suffers an internal error, it will return false (0).
.IP \(em
.BR canput ()
is an
.IR "SVR 4.2"
function, not a macro.
.I LiS
implements
.BI canput( q )\c
,
.BI canputnext( q )\c
,
.BI bcanput( q ", " band )\c
, and
.BI bcanputnext( q ", " band )\c
, with a macros that call
.BI bcanput( q ", "  band )\c
 or
.BI bcanput( q->q_next ", " 0 ).
This makes
.BR canputnext (9)
and
.BR bcanputnext (9)
unsafe under
.I LiS
across a multiplexing driver.
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B "@PACKAGE_TITLE@"
instead of
.IR LiS .
.\".IP \(em
.\"Symbol
.\".BR lis_canput ()
.\"is provided for compatibility with LiS.  See
.\".BR liscompat (9).
.\".BR lis_canput ()
.\"calls
.\".BR canput ()
.\"directly.
.\"Portable
.\".I STREAMS
.\"drivers and modules will not access these symbols.
.\"Portable
.\".I STREAMS
.\"drivers and modules will use
.\".B "@PACKAGE_TITLE@"
.\"instead of
.\".IR LiS .
.IP \(em
.IR SUPER-UX \(rg
documentation
.[
suxspg
.]
states that
.BR canput ()
will not search forward in the
Stream
and that
.I q
must have a
.IR qi_srvp (9)
service procedure.  This is inconsistent with the
.IR "SVR 4 SPG" .
.[
svr4spg
.]
Typically, however, only a driver
.RI ( "Stream end" )
will use
.BR canput (),
and then only to test its own queue.  If its own queue does not have a
.IR qi_srvp (9)
service procedure,
.BR canputnext (9)
is more appropriate.  Some efficiencies can be taken in using
.BR canput ()
from interrupt service routines if this stance is taken.
Strangely enough,
.IR SUPER-UX \(rg
does not document
.[
suxspg
.]
.BR bcanput (9)
in this fashion.
.IP ""
As these
.IR SUPER-UX \(rg
rules are more restrictive than those of
.BR "@PACKAGE_TITLE@" ,
there are no portability issues.
.BR canput ()
and
.BR bcanput (9)
under
.B "@PACKAGE_TITLE@"
can be passed a Stream end queue pointer from outside the framework
but can always be called from a the driver
.IR qi_putp (9)
put procedure, even if the queue does not have a
.IR qi_srvp (9)
service procedure.
.IP ""
Portable
.I STREAMS
drivers and modules for multiprocessor (MP) architectures will only call
.BR canput ()
for testing a driver
.RI ( "Stream end" )
read queue that contains a
.IR qi_srvp (9)
service procedure.
.IP \(em
All versions of
.I LiS
contain the bug that they keep track of message queue counts,
.IR q_count ,
.IR qb_count ,
in terms of the sum of the absolute sizes of the data buffers referenced by message blocks,
.RB ( "db_lim - db_base" ),
and not the sizes of the message blocks themselves,
.RB ( "b_wptr - b_rptr" ),
which does not conform to
.IR "SVR 4.2 STREAMS" .
.[
svr42spg
.]
See
.BR msgsize (9).
No other implementation has this bug.
.IP ""
Portable
.I STREAMS
applications programs, drivers and modules will use
.BR "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP DDI/DKI" .
.[
usldk
.]
.[
uslspg
.]
.\"
.\"
.SH HISTORY
.PP
.BR canput ()
appeared as part of
.IR "SVR 4.0 STREAMS" .
.[
svr4spg
.]
.PP
.BR canput ()
first appeared in
.IR "SVR 3" .
.[
svr3spg
.]
.\"
.\"
.[
$LIST$
.]
.TI
