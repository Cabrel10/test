'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) mi_copy_state.9.man,v 0.9.2.6 2006/04/05 09:43:33 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:43:33 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" mi_copy_state.9.man,v
.\" Revision 0.9.2.6  2006/04/05 09:43:33  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database strcompat.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so strcompat.macros
.\"
.\"
.TH MI_COPY_STATE 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B mi_copy_state
\- current state of the input-output control process
.\"
.\"
.SH SYNOPSIS
.PP
.B #define _MAC_SOURCE
.br
.B #include <sys/ddi.h>
.br
.B #include <sys/macddi.h>
.HP
.BI "int mi_copy_state(queue_t *" q ", mblk_t *" mp ", mblk_t **" mpp );
.\"
.\"
.SH ARGUMENTS
.PP
.TP
.I q
the current write-side queue whose put or service procedure within which
.BR mi_copy_state ()
is being called.
.TP
.I mp
a pointer to the message block that contains the
.BR M_IOCTL (9)
or
.BR M_IOCDATA (9)
message being processed.  This is the message that was passed to the write-side put or service
procedure within which
.BR mi_copy_state ()
is invoked.
.TP
.I mpp
a pointer to a
.B mblk_t *
into which the pointer to the just copied in data (if applicable) is placed.
.\"
.\"
.SH DESCRIPTION
.PP
.BR mi_copy_state ()
is one of a set of helper functions that support transparent input-output controls (see
.BR ioctl (2)
and
.BR streamio (9))
that includes
.BR mi_copyin (9),
.BR mi_copyout (9),
.BR mi_copyout_alloc (9),
.BR mi_copy_done (9),
.BR MI_COPY_CASE (9),
.BR mi_copy_set_rval (9)
and
.BR mi_copy_state (9).
.PP
.BR mi_copy_state ()
checks the result of the previous copy in or copy out operation.  If the previous operation was
successful,
.BR mi_copy_state ()
determines and returns the state of the current ioctl operation.  If the previous
operation was unsuccessful, or if an internal error occurs,
.BR mi_copy_state ()
places a suitable error code in an
.BR M_IOCNAK (9)
message and passed it upstream to terminate the input output control operation.  Whenever
.BR mi_copy_state ()
terminates the input output control operation in this fashion, it returns minus one
.RB ( -1 ).
.PP
When successful,
.BR mi_copy_state ()
also prepares the message for processing by other
.B mi_copy
helper functions by pulling up the data blocks attached the message with
.BR pullup (9).
If the pullup operation fails an
.BR M_IOCNAK (9)
message is passed upstream to terminate the input output control operation with error code
.B ENOMEM
and returns minus one
.RB ( -1 ).
.\"
.\"
.SH USAGE
.PP
.BR mi_copy_state ()
is sued in conjunction with other
.B mi_copy
helper functions, and is used to relieve the
.I STREAMS
module writer of the burden of tracking input output control operation state.
.PP
.BR mi_copy_state ()
determines the current state of the input output control operation, and is used as the argument of a
switch statement with
.BR MI_COPY_STATE (9)
used to generate case labels for the switch statement.
.\"
.\"
.SH RETURN
.PP
When
.BR mi_copy_state ()
succeeds, it returns the state of the input-output control session for the passed in message pointer,
.IR mp ;
when it fails,
it returns minus one
.RB ( -1 ).
.\"
.\"
.SH ERRORS
.PP
.BR mi_copy_state ()
failes when passed invalid pointers.  When
.BR mi_copy_state ()
fails, it panics the kernel.
.PP
When
.BR mi_copy_state ()
suffers and internal failure, it
issues a
.BR M_IOCNAK (9)
message upstream with a suitable error code to terminate the intput output control operation and
returns minus one
.RB ( -1 ).
The error codes returned by
to the
.BR ioctl (2)
operation in
.BR errno (3),
are as follows:
.TP \w'ENOBUFS\ \ 'u
.B EPROTO
.BR mi_copy_state ()
was passed an invalid argument, or the passed in message block was of an invalid format.
.TP
.B ENOSR
.BR mi_copy_state (),
or the stream head, could not allocate a
.I STREAMS
resource
to complete the operation.
.TP
.B ENOMEM
.BR mi_copy_state (),
or the stream head, could not allocate 
memory to
complete the operation.
This occues when
.BR mi_copy_state ()
failed to pull up the data blocks associated with the call.
.TP
.B ENOBUFS
.BR mi_copy_state (),
or the stream head, could not allocate 
a buffer
to complete the operation.
.PP
Also, any error returned by the stream head in a
.BR M_IOCDATA (9)
response
.RI ( cp->cp_rval )
can also be returned to the
.BR ioctl (2)
system call.
.\"
.\"
.SH EXAMPLE
.PP
See
.BR mi_copyin (9)
and
.BR mi_copyout (9)
for examples of the usage of
.BR mi_copy_state ().
.PP
.nf
\fC\s-1
mblk_t *db;
switch (mp->b_datap->db_type) {

case M_IOCDATA:
    switch (mi_copy_state(q, mp, &db)) {

    case -1:
	/* the last operation failed or mi_copy_state failed internally */
	return (0);

    case MI_COPY_STATE(MI_COPY_IN, 1):
	/* the operation was found successful by mi_copy_state above */
	/* process the first copy in operation */
	/* db already points to the mblk with the copied in data */
	mi_copyin_n(q, mp, copy_offset, copy_len)
	    return (0);

    case MI_COPY_STATE(MI_COPY_IN, 2):
	/* the operation was found successful by mi_copy_state above */
	/* process the second copy in operation */
	/* db already points to the mblk with the copied in data */
	if (db = mi_copyout_alloc(q, mp, uaddr, copy_len, 1)) {
	    /* place second data to be copied out into db */
	}
	if (db = mi_copyout_alloc(q, mp, uaddr, copy_len, 1)) {
	    /* place first data to be copied out into db */
	    mi_copyout(q, mp);
	}
	return (0);

    case MI_COPY_STATE(MI_COPY_OUT, 1):
	/* the operation was found successful by mi_copy_state above */
	/* process second copy out operation */
	mi_copyout(q, mp);
	return (0);

    case MI_COPY_STATE(MI_COPY_OUT, 2):
	/* the operation was found successful by mi_copy_state above */
	/* end the operation */
	mi_copy_done(q, mp, 0);
	return (0);
    }
}
\s+1\fP
.fi
.\"
.\"
.SH CONTEXT
.PP
.BR mi_copy_state ()
can be called from
.\"
.\"
.SH MP-STREAMS
.PP
.\"
.\"
.SH NOTICES
.PP
.BR mi_copy_state ()
is a
.IR MacOT \(rg-specific
function:
.B _MAC_SOURCE
must be defined before including DDI/DKI include files to expose this symbol.
.B Linux Fast-STREAMS
must also have been compiled with
.B CONFIG_STREAMS_COMPAT_MAC
or
.B CONFIG_STREAMS_COMPAT_MAC_MODULE
defined.
.\"
.\"
.SH IMPLEMENTATION
.PP
.\"
.\"
.SH "SEE ALSO"
.PP
.BR mi_copy_done (9),
.BR mi_copyin (9),
.BR mi_copyout (9),
.BR mi_copyout_alloc (9),
.BR mi_copy_set_rval (9),
.BR MI_COPY_CASE (9),
.BR maccompat (9),
.BR STREAMS (9).
.\"
.\"
.SH BUGS
.PP
.BR mi_copy_state ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR mi_copy_state ()
is compatible with
.IR MacOT \(rg
and
.IR OpenSolaris \(rg
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.IP \(em
.IP \(em
.BR mi_copy_state ()
is an
.IR MacOT \(rg-specific
function and should not be used by portable
.I STREAMS
drivers and modules.
The more common private variables
should be used in its stead.
.IP \(em
.BR mi_copy_state ()
is provided for source level compatibility with
.IR MacOT \(rg
for the purpose of porting
.IR MacOT \(rg
drivers to
.BR Linux .
Because internal structures and definitions for
.B Linux Fast-STREAMS
.[
lfs
.]
differ from that of
.IR MacOT \(rg,
binaries are incompatible.
.IP \(em
.BR mi_copy_state ()
only provides functionality comparable to
.IR MacOT \(rg
for use by
.I STREAMS
drivers and modules.
Any and all functionality provided by
.BR mi_copy_state ()
in support of
.RI non- STREAMS
devices are not supported.
.PP
See
.BR maccompat (9)
and
.BR STREAMS (9)
for additional compatibility considerations.
.\"
.\"
.SH CONFORMANCE
.PP
.IR MacOT \(rg
DDI documentation.
.[
macotr
.]
.[
macspg
.]
.\"
.\"
.SH HISTORY
.PP
.BR mi_copy_state ()
first appeared in
.IR MacOT \(rg.
.\"
.\"
.[
$LIST$
.]
.TI
