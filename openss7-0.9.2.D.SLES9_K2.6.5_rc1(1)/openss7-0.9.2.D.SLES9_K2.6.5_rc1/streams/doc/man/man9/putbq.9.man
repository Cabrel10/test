'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) putbq.9.man,v 0.9.2.32 2006/04/05 09:44:14 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:14 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" putbq.9.man,v
.\" Revision 0.9.2.32  2006/04/05 09:44:14  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH PUTBQ 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B putbq
\- put a message back on a \fISTREAMS\fP message queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP
.BI "int putbq(queue_t *" q ", mblk_t *" mp );
.\"
.\"
.SH ARGUMENTS
.TP
.I q
the queue onto which to put back the message.
.PD 0
.TP
.I mp
the message to put back on the queue.
.PD
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
.BR putbq ()
places the message pointed to by
.I mp
back onto the queue pointed to by
.IR q .
When the message is placed back on the queue, it is placed on the head of the
queue, rather than the tail of the queue as would result from a call to
.BR putq (9).
The message is placed in the proper order at the head of the priority, normal or specified band,
queue counts are adjusted and queue enabling is performed if the message is a high priority message
or if the queue has not been disabled with a call to
.BR noenable (9).
.PP
.BR putbq ()
is normally called from within queue
.IR qi_srvp (9)
procedures to place a message back
on the queue subsequent to a call to
.BR getq (9)
that removes a message which it turns out cannot be processed at the moment
due to flow restrictions from testing
.BR canput (9)
or
.BR bcanput (9).
When
.BR putbq ()
is executed following
.BR getq (9)
for the same queue, it is guaranteed to succeed.
.\"
.\"
.SS "Flow Control"
.PP
.BR putbq ()
enables the queue
.I q
under the following circumstances:
.IP \- \w'\-\(em'u
the message
.I mp
is a high priority message;
.PD 0
.IP \-
the
.B QWANTR
flag is set.
.PD
.PP
Because
.I mp
was typically removed from the queue with
.BR getq (9),
the
.BR QWANTR
flag will be clear (because a message was retrieved).
The only event that will cause these flags to become set is if the current or another thread removes
a message from the queue with
.BR getq (9)
or
.BR rmvq (9).
.PP
Because only one thread can be executing a queue's
.IR qi_srvp (9)
service procedure at a time, if messages are removed from the message queue only in the queue's
.IR qi_srvp (9)
service procedure, and
.BR putbq ()
is also only called from the procedure, which is normally the case,
.BR QWANTR
will never be set when
.BR putbq ()
is called.
.PP
So, usually,
.I q
is only enabled if a high priority message is placed back on the queue with
.BR putbq ().
Because normal flow control procedures from the
.IR qi_srvp (9)
procedure prohibit placing a high priority message back on the queue, properly placing a message
back on a queue with
.BR putbq ()
will not result in the queue being enabled.
.PP
This is in fitting with the purpose of the
.BR putbq ()
utility which is to suspsend operation of a queue
.IR qi_srvp (9)
service procedure until the queue is back-enabled by a forward flow controlled queue.
.\"
.\"
.SH USAGE
.PP
.BR putbq ()
is intended to be used from within a
.I STREAMS
driver or module
.IR qi_srvp (9)
procedure.
.PP
The basic steps taken by a module
.IR qi_srvp (9)
procedure are as follows:
.IP (1) \w'(0)\(em'u
Remove a message from the queue with
.BR getq (9).
.PD 0
.IP (2)
If
.BR getq (9)
returns
.BR NULL ,
return from the procedure.
.IP (3)
If
.BR getq (9)
retreives a message, check if the message is a high priority
.RB ( "db_type >= QPCTL" )
message.  If it is, process the message and possibly pass it to the next queue with
.BR putnext (9).
.IP (4)
If the message is a normal priority
.RB ( "db_type < QPCTL" )
message, test if the message can be passed along with
.BR bcanputnext (9),
for the band
.IR b_band .
.IP (5)
If
.BR bcanputnext (9)
returns
.IR true ,
process the message and pass the message along with
.BR putnext (9).
.IP (6)
If
.BR bcanputnext (9)
returns
.IR false ,
place the message back on the queue with
.BR putbq ()
and return.
.IP (7)
Repeat at step (1).
.PD
.PP
Queues that have messages placed back with
.BR putbq ()
from the module
.IR qi_srvp (9)
procedure will not normally be enabled again by
.BR putq (9),
or
.BR insq (9).
Therefore,
when a message is placed back on a queue with
.BR putbq (),
the
.IR qi_srvp (9)
procedure is considered blocked.  Some event is required to re-enable the queue when it is possible
to resume processing messages.
.PP
In the typical flow control case (see
.RI \(lq "Example #1" ,\(rq
below), a back-enable is scheduled by a forward queue when
.BR bcanputnext (9)
fails; however, this is not the only mechanism possible.
Another example (see
.RI \(lq "Example #2" ,\(rq
below), would be when a buffer cannot be allocated to perform processing (i.e.,
.BR allocb (9)
fails), an explicit call to
.BR qenable (9)
could be scheduled with
.BR bufcall (9),
and the message placed back on the queue with
.BR putbq ().
When the buffer can be allocated, the queue will be enabled and another attempt will be made to
allocated the buffer necessary for processing.
.\"
.\"
.SH RETURN
.PP
Upon success,
.BR putbq ()
returns
.I true
.RB ( 1 )
after placing the message
.I mp
back on the head of the queue.
Upon failure,
.BR putbq ()
returns
.I false
.RB ( 0 )
and the message pointed to by
.I mp
is unaltered.
The return value from
.BR putbq ()
should always be examined.
.\"
.\"
.SH ERRORS
.PP
Upon failure,
.BR putbq ()
returns
.I false
.RB ( 0 )
and the message pointed to by
.I mp
is unaltered.  It is the caller's responsibility to free
.I mp
if the caller so desires.
.\"
.\"
.SH CONTEXT
.PP
.BR putbq ()
can be called from any context, including process context, module procedures, callouts, callbacks,
soft interrupts (tasklets and bottom halves), and interrupt service routines.
.PP
.BR putbq ()
can be called from a context asynchronous to
.IR STREAMS ,
such as an asynchronous callback, tasklet, bottom half, or interrupt service routine.
.\"
.\"
.SH MP-STREAMS
.PP
.BR putbq ()
is MP-safe; however,
the caller is responsible for the validity of the passed in queue and message pointers, and
exclusive access to the passed in messages.
.\"
.SS Validity for \fIq\fP
.PP
The caller is responsible for the validity of the passed in
.IR q .
.I q
is valid from all procedures synchronous on
.IR q ,
including
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_putp (9),
and
.IR qi_srvp (9),
procedures and synchronous callback functions.
.PP
For process context, asynchronous callback functions, soft interrupts (tasklets and bottom halves),
and interrupt service routines, that is, when calling
.BR putbq ()
from a
.RI non- STREAMS
context, any valid queue pointer,
.IR q ,
can be passed to
.BR putbq ();
however, the caller must ensure that the queue pointer remains valid across the call.
In general,
.I q
is valid from the moment that
.BR qprocson (9)
returns until the moment that
.BR qprocsoff (9)
is called, so, if the
.RI non- STREAMS
code sections are passed a pointer from
.IR q 's
.IR qi_qopen ()
procedure and invalidated by its
.IR qi_qclose ()
procedure, validity can be ensured.  (This is the case with
.BR timeout (9)
and
.BR bufcall (9)
asynchronous callbacks.  These callbacks are passed a queue pointer only after
.I qi_qopen
and must be cancelled before
.I qi_qclose
returns.)
.PP
Otherwise, from outside of
.I STREAMS
context, it is possible to derive a queue pointer from a validated queue pointer, provided that
the
Stream 
is frozen with a call to
.BR freezestr (9).
Under
.BR "@PACKAGE_TITLE@",
it is permissible to call
.BR putbq ()
on a
Stream
that is frozen with
.BR freezestr (9),
and
.BR freezestr (9)
can be called from any context.
.BR putbq ()
takes a recursive freeze lock that can be acquired by the caller when the
Stream
is frozen.  If another thread has the
Stream
frozen with
.BR freezestr (9),
the calling processor will spin until the
Stream
is thawed by the other thread with
.BR unfreezestr (9).
.\"
.SS Validity and Exclusion for \fImp\fP
.PP
Validity of the
.I mp
pointer and exclusive access to the message pointed to by
.I mp
is normally assured in the usual ways:  If
.I mp
was just allocated using
.BR allocb (9)
or
.BR esballoc (9),
or,
if
.I mp
was just removed from a message queue with
.BR getq (9)
or
.BR rmvq (9),
then exclusion and validity is assured.
.\"
.\"
.SH NOTICES
.PP
.BR putbq ()
only fails if a queue band for
.BI mp-> b_band
does not yet exist and the necessary queue band structures could not be allocated.  It can be
ensured that
.BR putbq ()
will not fail for the same
.I q
for which the message was obtained with
.BR getq (9).
Otherwise, it can be ensured that the queue band exists by calling
.BR strqget (9)
or
.BR strqset (9)
for the band in question before calling
.BR putbq ().
Whether a band is allocated for a queue can also be tested by examining the
.I q_nband
member of the queue structure.  This member indicates the highest priority allocated band.  If the
band in question is less than or equal to
.I q_nband
then the band has already been allocated.
.PP
Care should be taken not to return with
.BR putbq ()
a high priority message taken off of a queue in a
.IR qi_srvp (9)
procedure with
.BR getq (9).
This is because placing the high priority message back on the queue will cause the
.IR qi_srvp (9)
procedure to re-execute at the earliest opportunity resulting in
possible indefinite looping.
.\"
.\"
.\".SH IMPLEMENTATION
.\".PP
.\"
.\"
.SH EXAMPLES
.PP
Following are two examples of the use of
.BR putbq ().
The first is an example of
.BR putbq ()
where enabling of the queue is scheduled by
.BR bcanputnext (9).
The second is an example of
.BR putbq ()
where enabling of the queue is scheduled by
.BR bufcall (9).
.\"
.SS Example #1
.PP
Following is a stereotypical example of a null module
.IR qi_srvp (9)
procedure that simply passes messages
along to the next queue without processing:
.sp
.nf
\fC\s-2\
 1  static int
 2  xxxsrv(queue_t *q)
 3  {
 4      mblk_t *mp;
 5  
 6      while ((mp = getq(q))) {
 7          if (mp->b_datap->db_type >= QPCTL)
 8              putnext(q, mp);
 9          else {
10              if (bcanputnext(q, mp->b_band))
11                  putnext(q, mp);
12              else {
13                  putbq(q, mp);
14                  break;
15              }
16          }
17      }
18      return (0);
19  }
\s+1\fP
.fi
.PP
Notice that at
.BR "Line 13" ,
the return value from
.BR putbq ()
is not examined.  This is because the message was removed from the queue using
.BR getq (9)
and it is guaranteed that a band structure exists for the band of the message, and therefore
.BR putbq ()
cannot fail.
.PP
Unless another thread intervenes with a call to
.BR getq (9)
or (more likely)
.BR rmvq (9),
placing the message back on the queue will not enable the queue.  Also, messages enqueued with
.BR putq (9)
from the
.IR qi_putp (9)
procedure will not normally enable the queue in this situation.  The queue will usually remain
blocked on flow control until it is back-enabled by the forward queue that failed
.BR bcanput (9).
.\"
.SS Example #2
.PP
Following is an example of how to handle a buffer allocation failure using
.BR bufcall (9)
and
.BR putbq ():
.sp
.nf
\fC\s-2\
 1  static int
 2  xxxsrv(queue_t *q)
 3  {
 4      mblk_t *mp;
 5  
 6      while ((mp = getq(q))) {
 7          if (mp->b_datap->db_type >= QPCTL)
 8              putnext(q, mp);
 9          else {
10              if (bcanputnext(q, mp->b_band)) {
11                  mblk_t *db;
12  
13                  if (!(db = allocb(64, BPRI_MED))) {
14                      priv_t *p = (priv_t *) q->q_ptr;
15  
16                      putbq(q, mp);
17                      p->bcid = bufcall(64, BPRI_MED,
18                                        (void (*)(long))
19                                        &qenable, (long) q);
20                      break;
21                  }
22                  /* process mp with db */
23                  linkb(mp, db);
24                  putnext(q, mp);
25              } else {
26                  putbq(q, mp);
27                  break;
28              }
29          }
30      }
31      return (0);
32  }
\s+2\fP
.fi
.PP
If the allocation using
.BR allocb (9)
fails at
.BR "Line 13" ,
then the message is placed back on the queue using
.BR putbq ()
at
.BR "Line 16" ,
and a buffer call is issued to enable the queue when a buffer becomes available using
.BR bufcall (9)
at
.BR "Line 17" .
.PP
When the buffer callback is called, the queue will be enabled with
.BR qenable (9),
and the
.IR qi_srvp (9)
procedure will execute again and attempt to allocate a buffer once more.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR putq (9),
.BR noenable (9),
.BR getq (9),
.BR canput (9),
.BR bcanput (9),
.BR getqstr (9),
.BR setqstr (9),
.BR qprocsoff (9),
.BR freezestr (9),
.BR unfreezestr (9).
.\"
.\"
.SH BUGS
.PP
.BR putbq ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR putbq ()
is compatible with
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
and implementations based on
.IR "SVR 4" ,
.[
svr4dk
.]
with the following portability considerations:
.IP \(em \w'\(em\(em'u
When a banded message (a priority message, with a non-zero
.IR b_band )
is placed on a queue with
.BR putq (9),
.BR putbq (9),
.BR insq (9),
or
.BR appq (9),
and a
.BR qband (9)
structure does not exist for the band corresponding to
.IR b_band ,
.BR putbq ()
tries to allocate
.BR qband (9)
structures for all non-existent bands up to and including the band of the message
and places the resulting
.BR qband (9)
structures into a reverse sorted
.I q_bandp
list on the
.BR queue (9).
.I q_nband
is adjusted accordingly and always reflects the highest allocated band.
.IP ""
This is consistent with the description in the
.IR "SVR 4 STREAMS Programmer's Guide" ,
which states:
\(lqIf a mesages is passed to
.BR putbq ()
with a
.I b_band
value that is greater than the number of
.BR qband (9)
structures associated with the queue [member
.I q_nband
in the
.BR queue (9)
structure],
.BR putbq ()
tries to allocate a new
.BR qband (9)
structure for each band up to and including the band of the message.\(rq
.[
svr4spg
.]
.IP ""
.IR Solaris \(rg
allocates
.BR qband (9)
structures up to an including
.IR b_band ,
and maintains the
.I q_nband
member of the
.BR queue (9)
structure.
It is safe to assume that other
.IR UNIX \(rg
implementations based on
.I SVR 4
follow
.I SVR 4
as does
.IR Solaris \(rg.
.IP ""
.I LiS
allocates
.BR qband (9)
structures on demand, links them in a sparse array,
and will also reuse
.BR qband (9)
structures that were previously allocated for bands that are currently empty.  This is not a good
approach because user established band high- and low-water marks will be reset to those of the
.BR queue (9)
structure when a subsequent message is place on the reused band.
Also, it is difficult to predict when
.BR appq (9),
.BR insq (9),
.BR putq (9),
.BR putbq (9),
will fail as a result of failure to allocate a
.BR qband (9)
structure.
This
.I LiS
bug is not perpetuated in
.BR "@PACKAGE_TITLE@" .
.IP ""
Portable
.I STREAMS
drivers and modules can rely on intermediate band strutures being allocated
when a
normal priority
message is placed on a queue using
.BR putbq (),
and may examine the
.I q_nband
member of the
.BR queue (9)
structure to determine whether a
.BR qband (9)
exists for a given band number.
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
.BR putq ()
orders the
.BR qband (9)
structures in the list pointed to by the
.I q_bandp
member of the
.BR queue (9)
structure from highest band number to lowest band number.  This ensures that
higher priority
.BR qband (9)
structures can be accessed faster than lower priority
.BR qband (9)
structures.
.IR Solaris \(rg
.[
soldoc
.]
lists
.BR qband (9)
structures from lowest to highest priority, without gaps (see consideration of allocation above).
.I LiS
lists
.BR qband (9)
structures from most recently allocated/reused to least recently allocated/reused.
Neither the
.IR Solaris \(rg
nor the
.I LiS
approach is very efficient.
.IP ""
Portable
.I STREAMS
drivers and modules will not depend on the ordering of
.BR qband (9)
structures within the
.I q_bandp
list on the
.BR queue (9)
structure, and, will not access
.BR qband (9)
or
.BR queue (9)
members directly, but will use the portable
.BR strqget (9)
and
.BR strqset (9)
utilities instead.
.IP \(em
.IR HP-UX \(rg
.[
hpuxspg
.]
lists
.BR putbq ()
as a function that can only be passed a queue in the queue pair currently
being synchronized within a module procedure.
.IR HP-UX \(rg
.[
hpuxspg
.]
also lists
.BR putbq ()
as a utility that cannot be called from user functions or
.RI non- STREAMS
code; that is, contexts asynchronous to the Stream containing
.IR q .
.IP ""
.IR HP-UX \(rg
compatible drivers and modules will not call
.BR putbq ()
from outside of a
.BR qinit (9)
routine for the queue pair of
.IR q .
.IP \(em
If
.BR putbq ()
is passed an invalid
.IR q " or " mp
argument, the result is undefined.
Under
.IR LiS ,
.BR putbq ()
fails if the passed in message pointer
.I mp
is
.BR NULL ;
or, the passed in queue pointer
.I q
is
.BR NULL ,
points to a structure other than a queue structure, or refers to a queue that is closing or for
which
.IR qi_putp (9)
and
.IR qi_srvp (9)
procedure processing has been turned off (e.g. with
.BR qprocsoff (9)).
.IP ""
Porable
.I STREAMS
drivers and modules will not pass
.B NULL
or invalid pointers to
.BR putbq ().
.IP \(em
.BR putbq ()
only fails if
.I mp->b_band
refers to a non-existent queue band and a queue band structure could not be allocated.
When
.BR putbq ()
returns failure,
.I mp
is unchanged.
This is consistent with
.IR "SVR 4.2 DDI/DKI" ,
.IR IRIX \(rg,
.IR Solaris \(rg
and
.IR UnixWare \(rg
documentation.
.[
irixdoc
.]
.[
soldoc
.]
.[
uw7doc
.]
.IP \(em
.BR putbq ()
is not bug for bug compatible with
.IR LiS .
Under older versions of
.IR LiS ,
regardless of whether
.BR putbq ()
returns success or failure, the message pointed to by
.I mp
is placed on the queue pointed to by
.I q
or freed, so that the caller to
.BR putbq ()
always loses ownership of the message pointed to by
.I mp
upon return from the call.
This was inconsistent with
.IR "SVR 4.2 DDI/DKI" ,
and was an
.I LiS
bug.
Current versions of
.I LiS
do not free the message.
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B Linux Fast-STREAMS
in place of
.IR LiS .
.IP \(em
.BR putbq ()
may be called on a stream frozen with
.BR freezestr (9),
but it is not recommended.
.BR putbq ()
uses a recursive freeze lock permitting it to be called while the
Stream
is frozen with
.BR freezestr (9)
by the caller.
.IP ""
.IR "SVR 4.2 MP DDI/DKI" ,
.IR Solaris \(rg,
.IR SUPER-UX \(rg
and
.IR UnixWare \(rg
do not permit
.BR putbq ()
to be called on a stream frozen with
.BR freezestr (9).
.[
usldk
.]
.[
solspg
.]
.[
suxspg
.]
.[
uw7spg
.]
(But strangely, code inspection reveals that
.IR OpenSolaris \(rg
permits
.BR putq ()
and
.BR getq (9)
to be called on a stream frozen with
.BR freezestr (9).)
.IP ""
Portable
.I STREAMS
drivers and modules will not call
.BR putbq ()
on a stream currently frozen by the caller with
.BR freezestr (9).
.RB ( "@PACKAGE_TITLE@"
includes an assertion to enforce this in the SMP environment.)
.\".IP \(em
.\".BR putbq ()
.\"cannot be called from an interrupt service routine (hard irq).
.\".IP ""
.\".B @PACKAGE_TITLE@
.\"does not permit
.\".BR putbq ()
.\"to be called from an interrupt service routine (hard irq) context to remove the need for suppressing
.\"local interrupts, and greatly reducing the need to suppress local bottom halves, throughout the
.\".I STREAMS
.\"executive.  The only queue utilities that
.\".B @PACKAGE_TITLE@
.\"permits to be called from an interrupt service routine (hard irq) context are
.\".BR qwriter (9),
.\".BR streams_put (9),
.\".BR mp_become_writer (9)
.\"and
.\".BR put (9),
.\"and these functions defer until the next
.\".BR runqueues (9)
.\"pass.
.\".IP ""
.\"Portable
.\".I STREAMS
.\"drivers and modules will not call
.\".BR putbq ()
.\"from any context outside a
.\".I STREAMS
.\"queue procedure or callback function.  At the Stream end (Stream head or driver), from a context
.\"other than a
.\".I STREAMS
.\"coroutine, only
.\".BR put (9)
.\"will be used by a portable
.\".I STREAMS
.\"driver or module.
.\".IP \(em
.\"Symbol
.\".BR lis_putbq ()
.\"is provided for compatibility with
.\".IR LiS .
.\"See
.\".BR liscompat (9).
.\".BR lis_putbq ()
.\"simply calls
.\".BR putbq ()
.\"directly.
.IP \(em
All versions of
.I LiS
contain the bug that they keep track of message queue counts,
.IR q_count ,
.IR qb_count ,
in terms of the sum of the absolute sizes of the data buffers referenced by message blocks,
.RB ( "db_lim - db_base" ),
and not the sizes of the message blocks themselves,
.RB ( "b_wptr - b_rptr" ),
which does not conform to
.IR "SVR 4.2 STREAMS" .
.[
svr42spg
.]
See
.BR msgsize (9).
No other implementation has this bug.
.IP ""
Portable
.I STREAMS
applications programs, drivers and modules will use
.BR "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP DDI/DKI" .
.[
usldk
.]
.\"
.\"
.SH HISTORY
.PP
.BR putbq ()
appears as part of
.IR "SVR 4.0 STREAMS" .
.[
svr4spg
.]
.PP
.BR putbq ()
first appeared in
.IR "SVR 3" .
.[
svr3spg
.]
.PP
.BR putbq ()
was described in Dennis Ritchie's original paper.
.[
streamio
.]
.\"
.\"
.[
$LIST$
.]
.TI
