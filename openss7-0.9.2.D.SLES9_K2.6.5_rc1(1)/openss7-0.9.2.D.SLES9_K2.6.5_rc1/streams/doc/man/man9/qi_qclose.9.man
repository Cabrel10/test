'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) qi_qclose.9.man,v 0.9.2.7 2006/04/05 09:44:15 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:15 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" qi_qclose.9.man,v
.\" Revision 0.9.2.7  2006/04/05 09:44:15  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH QI_QCLOSE 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B close, qi_qclose, qi_close_t
\- \fISTREAMS\fR driver or module close routine
.\"
.\"
.SH SYNOPSIS
.HP
.B #include <sys/stream.h>
.HP
.BI "typedef int (*qi_qclose_t) (queue_t *" q ", dev_t *" devp ", int " oflag ");
.\"
.\"
.SH ARGUMENTS
.PP
.TP \w'oflag\(em'u
.I q
pointer to the driver or module instance queue pair;
.PD 0
.TP
.I devp
pointer to the driver device number; and,
.TP
.I oflag
caller file flags.
.PD
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
.IR qi_qclose ()
is one of 5 principal synchronous entry points into a
.I STREAMS
driver or module that form part of the definition of the driver or module.  The principal entry
points are:
.IR qi_qopen (9),
.IR qi_qclose (),
.IR qi_qadmin (9),
.IR qi_putp (9),
and
.IR qi_srvp (9).
.PP
The
.IR qi_qclose ()
routine is specified in the read queue
.BR qinit (9)
structure that is associated with an existing queue pair forming an instance of the driver or module
from the definitions in the module- and driver-defining
.BR streamtab (9)
structure.
.PP
The
.IR qi_qclose ()
routine is called by
.I STREAMS
before a queue pair forming an instance of the driver or module is removed from the Stream and
deallocated.  This routine permits the driver or module to perform whatever driver or module private
cleanup or deallocation is necessary before the queue pair is deactivated and removed from the
Stream.  Error numbers returned by this function are generally discarded.
.RB ( GNU/Linux
cannot return an error number to
.BR close (2s)
after the release operation has begun.)
.BR
All drivers and modules require a
.IR qi_qclose ()
routine to be defined.  See
.BR qinit (9).
.PP
Following are the arguments to the driver or module
.IR qi_qclose ()
routine:
.TP \w'oflag\(em'u
.I q
is a pointer to the read queue of an active queue pair forming an instance of the driver or module.
.TP
.I devp
is a pointer to the
.BR dev_t (9)
formatted device number.
.I devp
points to the device number of the driver in the Stream.
.TP
.I oflag
contains the current file flags (of the last closer) and will contain a bitwise OR of one or more of
the following flags:
.RS
.TP \w'FNDELAY\(em'u
.B FREAD
the
.I STREAMS
special file was opened for read.
.PD 0
.TP
.B FWRITE
the
.I STREAMS
special file was opened for write.
.TP
.B FEXCL
the
.I STREAMS
special file was opened for exclusive access.
.TP
.B FNDELAY
the
.I STREAMS
special file was opened for non-blocking operation.
.PD
.RE
.\"
.PP
.I STREAMS
invokes a driver or module
.IR qi_qclose ()
routine when the last
.BR close (2s),
.BR I_UNLINK (7),
.BR I_PUNLINK (7),
or
.BR fdetach (3),
operation causes the Stream to be dismantled.
.I STREAMS
also invokes the
.IR qi_qclose ()
routine of a module when popped from a Stream's module stack with the
.BR I_POP (7)
.BR ioctl (2s)
system call.
.PP
The
.IR qi_qclose ()
routine is called in the following circumstances:
.IP (1) \w'(0)\(em'u
The
.IR qi_qclose ()
routine of a module is invoked by a user executing a
.BR I_POP (7)
.BR ioctl (2s)
operation.
.IP (2)
The
.IR qi_qclose ()
routine of a module is invoked when the Stream is being dismantled and the module is on the Stream's
module stack.
.IP (3)
The
.IR qi_qclose ()
routine of a driver is invoked when the Stream is being dismantled.
.PP
Note that Streams are dismantled when a
.BR close (2s),
.BR I_UNLINK (7),
.BR I_PUNLINK (7),
or
.BR fdetach (3),
operation results in the release of the last reference to the Stream.
.PP
When the
.IR qi_qclose ()
routine is invoked by
.I STREAMS
for a queue pair, the following conditions prevail:
.IP (1) \w'(0)\(em'u
If the
.IR qi_qclose ()
routine is invoked as the last close of (release of the last reference to) a driver, the
.B STRCLOSE
bit will be set in the Stream head
.BR stdata (9)
structure, preventing all subsequent opens of the Stream, and the Stream will be removed from the
file pointer prior to the call to
.IR qi_qclose ().
.IP (2)
If the
.IR qi_qclose ()
routine is for a module
.BR I_POP (7)
operation, the
.B STRWOPEN
bit will be held in the Stream head
.BR stdata (9)
structure, preventing all other plumbing operations for the same Stream.
.IP (3)
The
.I q_ptr
members of each queue in the queue pair still point to module private data, or are preserved as
whatever the driver or module
.IR qi_qopen (9)
routine set for these private pointers.
.IP (4)
The queue pair will still be fully inserted into the Stream and queue procedures,
.IR qi_putp (9)
and
.IR qi_srvp (9),
will still be active.
It takes a call to
.BR qprocsoff (9)
from the
.IR qi_qclose ()
routine to disable
.IR qi_putp (9)
and
.IR qi_srvp (9)
procedures and half-delete the queue pair from the Stream.  The queue pair will be half-deleted by
.BR qprocsoff (9)
in the sense that the
.I q_next
pointers in the queue pair will still point to the Stream head and the top of the module stack or
driver, however, the
.I q_next
pointers of the Stream head and top of the module stack or driver will bypass the half-deleted queue
pair.
.IP (5)
The
.IR qi_qclose ()
procedure is called with a blockable, no locks held, user context: the user context being the user
that caused the routine to be invoked.  That is, the same user whose credentials are pointed to by
.IR crp .
The file flags for the user file descriptor associated with the call are contained in the
.I oflag
argument.  It is possible, in a non-portable way, to obtain a reference to the file pointer and
inode associated with the system call that invoked the routine.  This is always available in the
.I sd_file
and
.I sd_inode
members of the Stream head
.BR stdata (9)
structure.  The Stream head
.BR stdata (9)
structure can be located using the
.BR qstream (9)
macro.
.IP (6)
If an
.BR mp-streams (9)
synchronization specification has been made for the driver or module that include an inner
synchronization barrier,
.I STREAMS
enters the inner barrier shared or exclusive (according to the specification) before the
.IR qi_qclose ()
routine is called, and leaves the inner barrier after the call returns.
.\"
.\"
.SH USAGE
.PP
The following sections provide some guidelines for the design of
.IR qi_qclose ()
routines for a driver or module:
.\"
.SS Modules and Drivers
.PP
Following are some design guidelines for both driver and module
.IR qi_qclose ()
routines:
.IP \(bu \w'\(bu\(em'u
Before detaching or deallocating resources required by a driver or module
.IR qi_putp (9),
.IR qi_srvp (9),
procedure or callback function, the
.IR qi_qclose ()
routine must call
.BR qprocsoff (9).
.IP \(bu
Before returning, the
.IR qi_qclose ()
routine must cancel all outstanding
.BR timeout (9)
and
.BR bufcall (9)
callbacks associated with the queue pair.
.IP \(bu
The driver or module is allowed to sleep in the
.IR qi_close ()
procedure, but must not sleep indefinitely.  When the routine sleeps awaiting arrival of a message
on a message queue, it should use
.BR qwait_sig (9)
or
.BR qwait (9).
.BR qwait_sig (9)
and
.BR qwait (9)
must be used before
.BR qprocsoff (9)
is called.
.IP \(bu
The
.IR qi_qclose ()
routine should deallocate any resources that were allocated as part of the
.IR qi_qopen (9)
routine, as well as any resources that where allocated while the driver or module was in operation.
.IP \(bu
.I q->q_ptr
and
.I WR(q)->q_ptr
should be
.B NULL
before returning from the routine.
.IP \(bu
All deallocations and cancellations must occur, regardless of the return value from the routine.
(The return value from the routine will be ignored by
.BR "@PACKAGE_TITLE@" .)
.\"
.SS Modules
Following are some design guidelines for module
.IR qi_qclose ()
routines:
.IP \(bu \w'\(bu\(em'u
Modules must follow the general guidelines listed above under
.RI \*(lq "Modules and Drivers" \*(rq.
.IP \(bu
The
.I devp
argument points to the device number of the driver instance in the Stream from which the module is
being removed.
Altering this device number will have no effect.
.IP \(bu
The
.I oflag
argument contains the file flags for the file descriptor that is being used as an argument to the
.BR ioctl (2s)
system call invoked to
.BR I_POP (7)
the module, or was an argument to the call to the
.BR close (2s),
.BR I_UNLINK (7),
.BR I_PUNLINK (7),
or
.BR fdetach (3),
operation that resulted in dismantling of the Stream containing the module.
.BR 
.\"
.SS Drivers
Following are some design guidelines for driver
.IR qi_qclose ()
routines:
.IP \(bu \w'\(bu\(em'u
Drivers must follow the general guidelines listed above under
.RI \*(lq "Modules and Drivers" \*(rq.
.IP \(bu
The
.I devp
argument points to the device number of the driver instance which is being removed.
Altering this device number will have no effect.
.IP \(bu
The
.I oflag
argument contains the file flags for the file descriptor that is being used as an argument to the
.BR close (2s),
.BR I_UNLINK (7),
.BR I_PUNLINK (7),
or
.BR fdetach (3),
operation that resulted in dismantling of the Stream containing the driver.
.\"
.\"
.SH RETURN
.PP
A driver or module
.IR qi_qclose ()
routines returns zero (0) for success, or a non-zero, positive (or negative), error number.
.\"
.\"
.SH ERRORS
.PP
When a driver or module
.IR qi_qclose ()
routine fails, it returns a non-zero, positive (or negative), error number.
.PP
This error number is ignored by
.BR "@PACKAGE_TITLE@" .
.\"
.\"
.SH CONTEXT
.PP
.IR qi_qclose ()
is only called by
.I STREAMS
in a blockable, no locks held, user context, with the
.BR STRWOPEN
or
.BR STRCLOSE
bit held in the Stream head private structure
.BR stdata (9),
(to prevent other simultaneous opens and closes of the same Stream).
.\"
.\"
.SH MP-STREAMS
.PP
.\"
.SS Synchronized Modules and Drivers
.PP
If
.BR mp-streams (9)
synchronization has been specified for the driver or module, the inner synchronization barrier, if
any, is entered shared or exclusive per the synchronization specification for the driver or module,
across the call to the driver or module
.IR qi_qclose ()
routine.  If synchronization has not been specified for the driver or module (that is, the module or
driver is specified as MP-safe), the
.IR qi_qclose ()
routine is invoked without synchronization.
.\"
.SS MP-Safe Modules and Drivers
.PP
The discussion that follows applies to the MP-safe driver or module under
.BR "@PACKAGE_TITLE@" :
.PP
.IR qi_qclose ()
is only called by
.I STREAMS
in a blockable, no locks held, user context, with the
.BR STRWOPEN
or
.BR STRCLOSE
bit held in the Stream head private structure
.BR stdata (9),
(to prevent other simultaneous opens and closes of the same Stream).
.PP
Driver an module
.IR qi_qclose ()
routines are always invoked single-threaded and exclusive within a Stream (and with respect to
itself, and the
.IR qi_qopen (9)
routine) in accordance with description for
.IR "SVR 4" ,
.[
svr4spg
.]
as described in
.RI \*(lq "The Magic Garden Explained" \*(rq.
.[
magic
.]
This is also consistent with exclusive open/close access under
.IR Solaris \(rg.
.[
solspg
.]
.PP
Only one
.I plumbing
.RB [ qopen (9),
.BR qclose (9),
.BR I_LINK (7),
.BR I_PLINK (7),
.BR I_UNLINK (7),
.BR I_PUNLINK (7),
.BR fattach (3),
.BR fdetach (3)]
operation at a time can be executing for a given Stream.  So, for example, data structures accessed
only by a
.I plumbing
operation, and which are private to a queue pair or Stream, do no need protective locks.
.PP
On the other hand, each
.IR qi_qclose ()
routine must be reentrant as it can run concurrent with any
.I plumbing
operation on a different Stream, for a different queue pair instance,
.IR q ,
of the same driver or module.
.PP
Unless
.BR mp-streams (9)
synchronization is used, a
.IR qi_qclose ()
routine can run concurrent with any
.IR qi_putp (9),
.IR qi_srvp (9),
or
synchronous or asynchronous callback functions for a separate instance of the driver or module.
Before
.BR qprocsoff (9)
has been called, 
.IR qi_putp (9),
.IR qi_srvp (9),
or
synchronous or asynchronous callback functions for the same instance of the driver or module may run
concurrent with the
.IR qi_qclose ()
routine.
Protective locks should be used on any data structures that a shared between the
.IR qi_qclose ()
routine and a different instance of a
.I plumbing
operation, or a different instance of a
.IR qi_putp (9),
.IR qi_srvp (9),
or callback procedure, or the same instance of a
.IR qi_putp (9),
.IR qi_srvp (9),
or callback procedure, before
.BR qprocsoff (9)
has been called.
.PP
See
.RI \(lq "EXAMPLES" ,\(rq
below for an example use of locking within the
.IR qi_qclose ()
routine.
.PP
See
.BR mp-streams (9),
for more information on driver and module synchronization.
.\"
.\"
.SH NOTICES
.PP
A driver or module
.IR qi_qclose ()
routine is an internal
.I STREAMS
entry point to the driver or module, that is not intended to be called directly by the module or
driver writer.  See
.BR close (2s)
and
.BR I_POP (2s)
for indirect methods of invoking this routine.
.\"
.\"
.SH STYLE
.PP
It is common practise to name
.IR qi_qclose ()
routines
\(lq\fIprefix\fBclose\fR(),\(rq
(where
.I prefix
is the configuration prefix chosen for the driver or module and typically derived from the name of
the driver or module, and which may contain a trailing underscore).
.\"
.\"
.SH EXAMPLES
.PP
.\"
.SS Example #1 \(en Module qi_qclose()
.PP
The following example of a module
.IR qi_qclose ()
routine comes directly from the
.BR pipemod (4)
module located in the
.I src/modules/pipemod.c
source file in the
.B @PACKAGE@-@VERSION@
distribution:
.PP
.nf
\fC\s-2\
 1  static int
 2  pipemod_close(queue_t *q, int oflag, cred_t *crp)
 3  {
 4      (void) oflag;
 5      (void) crp;
 6      if (!q->q_ptr)
 7          return (ENXIO);
 8      qprocsoff(q);
 9      q->q_ptr = WR(q)->q_ptr = NULL;
10      return (0);
11  }
\s+2\fP
.fi
.IP "\fBLine 6-7\fR:" \w'Line\ 00-00\(em'u
The module checks the existence of a
.I q_ptr
value or returns an error.  This is for compatibility with
.IR LiS ,
which call
.IR qi_qclose ()
procedures with the wrong conditions in some circumstances (particularly for pipes).
This check is not necessary for
.BR "@PACKAGE_TITLE@" .
.IP "\fBLine 8\fR:"
.BR qprocsoff (9)
is called to disable procedures before removing the module private pointers.
.IP "\fBLine 9-10\fR:"
The module private pointers are nulled and the routine returns.
.IP ""
Note that, since no variables global another Stream are referenced, no locks are taken.
.PP
See the
.I src/modules
directory in the
.B @PACKAGE@-@VERSION@
distribution for more working examples of module close routines.
.\"
.SS Example #2 \(en Driver qi_qclose()
.PP
The following example of a driver
.IR qi_qclose ()
routine comes directly from the
.BR sad (4)
driver located in the
.I src/drivers/sad.c
source file in the
.B @PACKAGE@-@VERSION@
distribution:
.PP
.nf
\fC\s-2\
 1  static int
 2  sad_close(queue_t *q, int oflag, cred_t *crp)
 3  {
 4      struct sad *sad = q->q_ptr;
 5  
 6      qprocsoff(q);
 7      q->q_ptr = WR(q)->q_ptr = NULL;
 8      sad->assigned = 0;
 9      sad->iocstate = 0;
10      return (0);
11  }
\s+2\fP
.fi
.IP "\fBLine 4\fR:" \w'Line\ 00-00\(em'u
The driver obtains a reference to the module private data from the
.I q_ptr
field.
.IP "\fBLine 6\fR:"
.BR qprocsoff (9)
is called to disable procedures before removing the driver private pointers.
.IP "\fBLine 7-10\fR:"
The driver private pointers are nulled and the driver state information reset,
and the routine returns.
.IP ""
Note that, since no variables global another Stream are referenced, no locks are taken.
.PP
See the
.I src/drivers
directory in the
.B @PACKAGE@-@VERSION@
distribution for more working examples of driver close routines.
.\"
.\"
.SH "SEE ALSO"
.PP
.IR qi_qopen (9),
.IR qi_qadmin (9),
.IR qi_putp (9),
.IR qi_srvp (9),
.BR qinit (9),
.BR streamtab (9),
.BR dev_t (9),
.BR errno (3),
.BR open (2s),
.BR close (2s),
.BR qopen (9),
.BR qclose (9),
.BR I_LINK (7),
.BR I_PLINK (7),
.BR I_UNLINK (7),
.BR I_PUNLINK (7),
.BR fattach (3),
.BR fdetach (3),
.BR I_POP (7),
.BR ioctl (2s),
.BR stdata (9),
.BR qprocsoff (9),
.BR qstream (9),
.BR timeout (9),
.BR bufcall (9),
.BR qwait (9),
.BR qwait_sig (9),
.BR pipemod (4),
.BR sad (4),
.BR mp-streams (9),
.BR STREAMS (9).
.\"
.\"
.SH BUGS
.PP
.B @PACKAGE_TITLE@
invocation of the
.IR qi_qclose ()
entry point has no known bugs.
.PP
(Note that it is possible that the inode reference to the Stream should not be removed before
calling the
.IR qi_qclose ()
routine for the driver.  A concurrent
.BR open (2s)
of the same device number could result in the creation of a new Stream and the invocation of
.IR qi_qopen (9)
with the same device number as is being closed.  This could confuse some
.IR qi_qopen (9)
routines.)
.\"
.\"
.SH COMPATIBILITY
.PP
The
.IR qi_qclose ()
routine is compatible with
.IR "SVR 4.2"
.[
usldk
.]
and implementations based on
.IR "SVR 4" ,
.[
svr4spg
.]
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.I "SVR 4.2"
.[
svr42spg
.]
did not define a type for the prototype of a queue
.IR qi_qclose (9)
routine.  This was an embellishment that first appeared in
.IR OSF/1 \(rg " 1.1" ,
.[
osfspg
.]
and propagated to
.IR AIX \(rg
.[
aixspg
.]
and
.IR HP-UX \(rg.
.[
hpuxspg
.]
.IP ""
Portable
.I STREAMS
drivers and modules will not directly reference the
.B qi_qclose_t
type.
.IP \(em
.BR GNU/Linux
cannot return any error number returned from the
.IR qi_qclose ()
routine to the user in
.BR errno (3)
upon return from the
.BR close (2s)
call.
This is a
.BR GNU/Linux
limtation.
.IP ""
Portable
.I STREAMS
drivers and modules will not expect any error number returned to in any way affect the
returned
.BR errno (3)
value nor the behaviour of the
.BR close (2s)
system call.
Portable
.I STREAMS
drivers and modules should always return zero
.RB ( 0 )
from the
.IR qi_qclose ()
routine.
.IP \(em
.B @PACKAGE_TITLE@
does not (yet) support the older
.IR "SVR 3" -style
prototype.  All
.IR qi_qclose ()
routines must be written to the
.IR "SVR 4" -style
prototype, regardless of the setting of the driver or module
\fIxxx\fBflag\fR,
contrary to the description in the
.IR "SVR 4 SPG" .
.[
svr4spg
.]
.IP ""
Portable
.I STREAMS
drivers and modules will use only the
.IR "SVR 4" -style
prototype, and will always define the
\fIxxx\fBflag\fR.
.IP \(em
Because a number of the primary data structures and types have different definitions on the
.B GNU/Linux
system, binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility considerations.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP EFT" .
.[
usldk
.]
.\"
.\"
.SH HISTORY
.PP
The
.B qi_qclose_t
type first appeared in
.IR OSF/1 \(rg " 1.1" .
.[
osfspg
.]
.PP
The queue
.IR qi_qclose ()
close routine first appeared in
.IR "SVR 3" .
.[
svr3
.]
.\"
.\"
.[
$LIST$
.]
.TI

