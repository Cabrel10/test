'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) M_PROTO.9.man,v 0.9.2.9 2006/04/05 09:44:03 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:03 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" M_PROTO.9.man,v
.\" Revision 0.9.2.9  2006/04/05 09:44:03  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH M_PROTO 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B M_PROTO
\- \fISTREAMS\fP protocol message
.\"
.\"
.SH FORMAT
.PP
The
.B M_PROTO
message block is a
.BR datab (9)
structure and associated data buffer that contains unstructured data.  (Any structure imposed on the
.B M_PROTO
data buffer is defined outside of
.IR STREAMS .)
.PP
An
.B M_PROTO
message is a normal priority message that consists of one or more
.B M_PROTO
message blocks followed by zero or more
.BR M_DATA (9)
message blocks.
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
The
.B M_PROTO
message is intended to contain control information and associated data.  The message format is
one or more
.B M_PROTO
message blocks followed by zero or more
.BR M_DATA (9)
message blocks.
(Note that a user level process can only generate
.B M_PROTO
messages containing a single
.B M_PROTO
message block followed by one or more
.BR M_DATA (9)
message blocks when using the
.BR putmsg (2)
or
.BR putpmsg (2s)
system calls.)
.PP
The semantics of the
.B M_PROTO
and
.BR M_DATA (9)
message blocks are determined by the
.I STREAMS
module that receives the message, and is normally defined as part of the service interface
description between modules.
.PP
For example, the
.IR "Transport Provider Interface" ,
.BR tpi (7),
describes the format of
.B M_PROTO
and
.BR M_DATA (9)
message blocks contained in
.B M_PROTO
messages that are passed to a driver or module implementing the
.BR tpi (7)
service interface.  The service interface exists between the user level process and the receiving
driver or module, or, between drivers and modules.
.PP
The
.B M_PROTO
message block will normally contain service interface control information and the
.BR M_DATA (9)
message blocks will normally contain service interface user data.
.PP
.B M_PROTO
messages are generally sent in both the downstream and upstream directions on a Stream.
.B M_PROTO
messages sent upstream and arriving at the Stream head are available to be read by user level
processes using the
.BR read (2s),
.BR getmsg (2),
or
.BR getpmsg (2s)
system calls.
.B M_PROTO
messages can be sent downstream from the Stream head by a user level process using the
.BR putmsg (2),
or
.BR putpmsg (2s)
system calls.
(The
.BR write (2s)
cannot be used to generate
.B M_PROTO
messages.)
.PP
When describing
.IR STREAMS -specific
system calls, the contents of the
.B M_PROTO
message block is referred to as the
.IR "control part" ,
and any
.BR M_DATA (9)
message blocks contained in the message are referred to collectively as the
.IR "data part" .
For the
.BR getmsg (2),
.BR getpmsg (2s),
.BR putmsg (2),
and
.BR putpmsg (2s)
system calls, the control and data parts are passed separately.
For the
.BR read (2s)
system call, the control and data parts are optionally passed together, or the the control part is
discarded.
.PP
Although its use is not recommended, the format of
.B M_PROTO
and
.BR M_PCPROTO (9)
(generically
.IR PROTO )
messages sent upstream to the Stream head allows multiple
.I PROTO
blocks at the beginning of the message.
.BR getmsg (2),
.BR getpmsg (2s),
and
.BR read (2s),
will compact multiple
.I PROTO
blocks into a single control part,
multiple
.BR M_DATA (9)
blocks, as single data part,
when passing them to the user process.
The
.BR putmsg (2)
and
.BR putpmsg (2s)
system calls will never generate a
.B M_PROTO
message with more than one
.B M_PROTO
message block, but may generate
.B M_PROTO
messages that contain more than one
.BR M_DATA (9)
message block.
.PP
.B M_PROTO
messages, by nature of the initial block message type, are normal (or priority) messages, and are,
therefore, subject to flow control restrictions within a Stream.
In contrast, the
.BR M_PCPROTO (9)
message is a high priority message serving the same purpose, that is not subject to flow control
restrictions.
.\"
.B M_PROTO
messages can be generated directly by user level processes using the
.BR putmsg (2)
and
.BR putpmsg (2s)
system calls.
.B M_PROTO
messages can be consumed by user level processes using the
.BR read (2s),
.BR getmsg (2),
and
.BR getpmsg (2s)
system calls.
.B M_PROTO
message can be generated by drivers and modules.
.\"
.\"
.SH USAGE
.PP
.B M_PROTO
and
.BR M_PCPROTO (9)
messages are the work horses of a service interface under
.IR STREAMS .
They are generated by both user level processes as well as drivers and modules.
These messages normally represent service primitives within a service interface definition at a
message passing boundary within a Stream.
The
.B M_PROTO
data buffer usually has a defined structure with an initial member that identifies the service
primitive, and additional members that provide the parameters associated with the service primitive.
The
.BR M_DATA (9)
data buffers that follow usually contain unstructured user data.
.PP
.\"
.\"
.SH EXAMPLES
.PP
For example, one service primitive definition from the
.IR "Transport Provider Interface" ,
.BR tpi (7),
the
.BR T_CONN_REQ (7)
connection request primitive, is illustrated below:
.PP
.RS 4n
.nf
\fC\s-2\
 1  /* 
 2   *  T_CONN_REQ, M_PROTO
 3   *
 4   *  This primitive requests that the transport
 5   *  provider make a connection to the specified
 6   *  destination.
 7   */
 8  struct T_conn_req {
 9      t_scalar_t PRIM_type;       /* always T_CONN_REQ */
10      t_scalar_t DEST_length;     /* dest addr length */
11      t_scalar_t DEST_offset;     /* dest addr offset */
12      t_scalar_t OPT_length;      /* options length */
13      t_scalar_t OPT_offset;      /* options offset */
14  };
\s+2\fP
.fi
.RE
.PP
The
.BR T_CONN_REQ (7)
service primitive consists of one
.B M_PROTO
message blocks followed by zero or more
.BR M_DATA (9)
blocks representing connection data.
The format of the
.B M_PROTO
data buffer is the
.B T_conn_req
structure shown above.  The first element of the structure, the
.I PRIM_type
is used to distinguish on
.B M_PROTO
message from another.  In this case, the
.I PRIM_type
is always set to
.B T_CONN_REQ 
to identify the connection request primitive.
.PP
The
.B T_conn_req
structure definition is used both by user level processes accessing the
.BR tpi (7)
service interface, as well as drivers or modules implementing the service interface.
.PP
The following code fragment is an example of a user level process formulating and passing a
connection request to a Stream.
.PP
.RS 4n
.nf
\fC\s-2\
 1  struct {
 2      struct T_conn_req prim;
 3      unsigned char adds[sizeof(destaddr)];
 4      unsigned char opts[sizeof(toptions)];
 5  }
 6  myprim;
 7  
 8  unsigned char data[DATASIZE];
 9  
10  struct strbuf ctlbuf =
11      { -1, sizeof(myprim), (char *) &myprim };
12  struct strbuf databuf =
13      { -1, sizeof(data), (char *) data };
14  
15  myprim.prim.PRIM_type = T_CONN_REQ;
16  
17  myprim.prim.DEST_length = sizeof(destaddr);
18  myprim.prim.DEST_offset = sizeof(myprim.prim);
19  memcpy(opts, &toptions, sizeof(toptions));
20  
21  myprim.prim.OPT_length = sizeof(toptions);
22  myprim.prim.OPT_offset =
23      sizeof(myprim.prim) + sizeof(adds);
24  memcpy(adds, &destaddr, sizeof(destaddr));
25  
26  if (putmsg(fd, &ctlbuf, &databuf, 0) == -1) {
27      perror("putmsg failed");
28      exit(1);
29  }
\s+2\fP
.fi
.RE
.PP
Following code fragment is an example of a module generating a connection request and passing it
downstream.  In this case, the primitive is expedited (priority band 1).
.PP
.RS 4n
.nf
\fC\s-2\
 1  mblk_t *mp, *dp;
 2  struct T_conn_req *p;
 3  size_t size =
 4      sizeof(p) + sizeof(destaddr) +
 5      sizeof(toptions);
 6  
 7  if ((mp = allocb(size, BPRI_MED))) {
 8      if ((dp = allocb(sizeof(data), BPRI_MED))) {
 9          mp->b_datap->db_type = M_PROTO;
10          mp->b_band = 1;     /* expedite */
11          p = (typeof(p)) mp->b_wptr;
12          p->PRIM_type = T_CONN_REQ;
13          p->DEST_length = sizeof(destaddr);
14          p->DEST_offset = sizeof(*p);
15          p->OPT_length = sizeof(toptions);
16          p->OPT_offset =
17              sizeof(*p) + sizeof(destaddr);
18          mp->b_wptr += sizeof(p);
19          bcopy(&destaddr, mp->b_wptr,
20                sizeof(destaddr));
21          mp->b_wptr += sizeof(destaddr);
22          bcopy(&toptions, mp->b_wptr,
23                sizeof(toptions));
24          mp->b_wptr += sizeof(toptions);
25          bcopy(&data, dp->b_wptr, sizeof(data));
26          dp->b_wptr += sizeof(data);
27          linkb(mp, dp);
28          putnext(q, mp);
29          return (0);
30      } else
31          freeb(mp);
32  }
33  return (-ENOBUFS);
\s+2\fP
.fi
.RE
.PP
In both code fragments, the same structure definition as part of a service interface definition is
used by both the user level process and the
.I STREAMS
driver or module.  This service interface definition is normally contained in a header file that is
used by both kernel modules and user processes (in this example
.BR <sys/tihdr.h> ).
.\"
.\"
.SH "SEE ALSO"
.PP
.BR read (2s),
.BR write (2s),
.BR getmsg (2),
.BR putmsg (2),
.BR getpmsg (2s),
.BR putpmsg (2s),
.BR datab (9),
.BR msgb (9).
.\"
.\"
.SH COMPATIBILITY
.PP
The
.B M_PROTO
.I STREAMS
message is compatible with
.IR "SVR 4.2 MP STREAMS" ,
and implementations based on
.IR "SVR 4.2" ,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
The
.B M_PROTO
message is standard across
.I STREAMS
implementations, and has no portability issues.
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP STREAMS" .
.[
svr42spg
.]
.\"
.\"
.SH HISTORY
.PP
The
.B M_PROTO
message first appeared in
.IR "SVR 3" .
.[
svr3spg
.]
.\"
.\"
.[
$LIST$
.]
.TI
