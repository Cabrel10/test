This is /home/brian/rel/streams/doc/manual/STREAMS.info, produced by makeinfo
version 4.8 from /home/brian/rel/streams/doc/manual/STREAMS.texi.

INFO-DIR-SECTION STREAMS
START-INFO-DIR-ENTRY
* STREAMS: (STREAMS).		STREAMS Manual
END-INFO-DIR-ENTRY

This file provides the Installation and Reference Manual for Linux Fast-STREAMS.

This is Edition 6.rc2, last updated 2006-07-11, of the `Linux Fast-STREAMS
Installation and Reference Manual', for Version 0.7a Release 6.rc2.

Copyright (C) 2001-2006  OpenSS7 Corporation (http://www.openss7.com/)
Copyright (C) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>

All Rights Reserved.

Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on all
copies.

Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copying, provided the entire resulting
derived work is distributed under the terms of a permission notice identical to
this one.

Permission is granted to copy and distribute translations of this manual into
another language, under the above conditions for modified versions.


File: STREAMS.info,  Node: Top,  Next: Acknowledgements,  Up: (dir)

 Linux Fast-STREAMS Installation and Reference Manual
*****************************************************

 About This Manual
******************

This is Edition 6.rc2, last updated 2006-07-11, of `The Linux Fast-STREAMS
Installation and Reference Manual', for Version 0.7a release 6.rc2 of the
Linux Fast-STREAMS package.

* Menu:

* Acknowledgements::		Sponsors and Contributors
* Introduction::		Introduction to the package
* Objective::			Objective of the package
* Reference::			Contents of the package
* Conformance::			Conformance of the package
* Releases::			Releases of the package
* Installation::		Installation of the package
* Troubleshooting::		Troubleshooting of the package
* Copying::			Copying information for this Software
* Documentation License::	Copying information for this Manual
* Indices::			Indices


File: STREAMS.info,  Node: Acknowledgements,  Next: Introduction,  Prev: Top,  Up: Top

 Acknowledgements
*****************

As with most open source projects, this project would not have been possible
without the valiant efforts and productive software fo the `Free Software
Foundation' and the `Linux Kernel Community'.

* Menu:

* Sponsors::			Sponsors
* Contributors::		Contributors


File: STREAMS.info,  Node: Sponsors,  Next: Contributors,  Up: Acknowledgements

 Sponsors
=========

Funding for completion of the Linux Fast-STREAMS package was provided in part
by:

   * OpenSS7 Corporation

Additional funding for The OpenSS7 Project (http://www.openss7.org/) was
provided by:

   * OpenSS7 Corporation

   * Lockheed Martin

   * Performance Technologies

   * Motorola

   * HOB International

   * Comverse

   * Sonus Networks

   * France Telecom

   * SS8 Networks

   * Nortel Networks

   * Verisign


File: STREAMS.info,  Node: Contributors,  Prev: Sponsors,  Up: Acknowledgements

 Contributors
=============

The primary contributor to the OpenSS7 Linux Fast-STREAMS package is Brian F.
G. Bidulock <bidulock@openss7.org>.  The following is a list of significant
contributors to The OpenSS7 Project (http://www.openss7.org/):

   * Per Berquist

   * John Boyd

   * Chuck Winters

   * Peter Courtney

   * Tom Chandler

   * Gurol Ackman

   * Kutluk Testicioglu

   * John Wenker

   * Others


File: STREAMS.info,  Node: Introduction,  Next: Objective,  Prev: Acknowledgements,  Up: Top

1 Introduction
**************

This manual documents the design, implementation, installation, operation and
future development schedule of the Linux Fast-STREAMS package.

* Menu:

* Notice::			Notice
* Overview::			Overview
* Organization::		Organization
* Conventions::			Conventions


File: STREAMS.info,  Node: Notice,  Next: Overview,  Up: Introduction

1.1 Notice
==========

This package is released and distributed under the `GNU General Public License'
(*note GNU General Public License::).  Please note, however, that there are
different licensing terms for the manual pages and some of the documentation
(derived from X/Open publications and other sources).  Consult the permission
notices contained in the documentation for more information.

This guide, is released under the `GNU Free Documentation License' (*note
Documentation License::) with all sections invariant.


File: STREAMS.info,  Node: Overview,  Next: Organization,  Prev: Notice,  Up: Introduction

1.2 Overview
============

This manual documents the design, implementation, installation, operation and
future development of the Linux Fast-STREAMS package.


File: STREAMS.info,  Node: Organization,  Next: Conventions,  Prev: Overview,  Up: Introduction

1.3 Organization of this Guide
==============================

This guide is organized (loosely) into several sections as follows:

* Menu:

  Introduction::		This introduction
* Objective::			Objective of the package
* Reference::			Contents of the package
* Conformance::			Conformance of the package
* Releases::			Releases of the package
* Installation::		Installation of the package
* Troubleshooting::		Troubleshooting of the package

*Note Introduction::.                    This introduction
*Note Objective::.                       Objective of the package
*Note Reference::.                       Contents of the package
*Note Conformance::.                     Conformance of the package
*Note Releases::.                        Releases of the package
*Note Installation::.                    Installation of the package
*Note Troubleshooting::.                 Troubleshooting of the package


File: STREAMS.info,  Node: Conventions,  Prev: Organization,  Up: Introduction

1.4 Conventions and Definitions
===============================

This manual uses `texinfo' typographic conventions.


File: STREAMS.info,  Node: Objective,  Next: Reference,  Prev: Introduction,  Up: Top

2 Objective
***********

`Linux Fast-STREAMS' is intended as a high-performance, production replacement
for `Linux STREAMS (LiS)'.  `Linux Fast-STREAMS' has the following features in
contrast to `Linux STREAMS':


Linux Fast-STREAMS                       LiS

Provided and optimized for Linux.        Maintains portability across Linux,
                                         User Space, QNX, DOS and other ports.

Promotes mainstream kernel adoption.     Places portability concerns before
                                         mainstream kernel adoption.

Lindented and follows normal kernel      Non-lindented, does not follow normal
formatting and coding practices.         kernel formatting and coding practices.

Provides compatibility modes for AIX,    Provides some compatibility interfaces
HPUX, OSF, Solaris, UnixWare, SVR 4.2    but also many Linux-derived interfaces
and LiS.  Supports all major SVR 4.2     specific to LiS.
variants.                                

Licensed under GPL with commercial       Dubiously licensed under LGPL (yet
licensing available.                     parts are GPL).

Supports full SVR 4.2 ES/MP              Supports only single, Linux derived
synchronization models.                  sychronization models.

Runs at SoftIRQ.  By running at          Separate kernel threads.
SoftIRQ, Linux Fast-STREAMS ensures      
that its place within the scheduling     
network-based events is appropriate for  
the Linux kernel.                        

Provides common SVR 4.2 system tunable   Provides only log-based debugging.
parameters and system controls as well   
as /proc filesystem for support and      
debugging.                               

Provides support for SVR 4.2 STREAMS     Provides limited set of LiS only
and other utilities.                     Linux-derived utilities.

Provides full named-streams device and   Provides only character-based node
device filesystem support.               support.


File: STREAMS.info,  Node: Reference,  Next: Conformance,  Prev: Objective,  Up: Top

3 Reference
***********

* Menu:

* Files::			Files included in the package
* Drivers::			Drivers included in the package
* Modules::			Modules included in the package
* Libraries::			Libraries included in the package
* Utilities::			Utilities included in the package
* Development::			Development against the package


File: STREAMS.info,  Node: Files,  Next: Drivers,  Up: Reference

3.1 Files
=========

`specfs.o'

`streams.o'

`streams-aixcompat.o'

`streams-hpuxcompat.o'

`streams-liscompat.o'

`streams-osfcompat.o'

`streams-suncompat.o'

`streams-svr4compat.o'

`streams-uw7compat.o'


File: STREAMS.info,  Node: Drivers,  Next: Modules,  Prev: Files,  Up: Reference

3.2 Drivers
===========

The configuration of `STREAMS' drivers and modules is performed when compiling
the Linux Fast-STREAMS subsystem.  The `STREAMS' subsystem, core drivers and
modules are part of every Linux Fast-STREAMS system.

The following sections list the core drivers and modules, `STREAMS' kernel
tunable parameters, and `STREAMS' configuration information.

`streams-clone.o ("clone")'
     Clone device driver.

`streams-echo.o ("echo")'
     Echo (loopback) device driver.

`streams-fifo.o ("fifo")'
     FIFO (Named Pipe) driver.

`streams-log.o ("strlog")'
     STREAMS log driver.

`streams-nsdev.o ("nsdev")'
     Named STREAMS device driver.

`streams-nuls.o ("nuls")'
     Null stream driver.

`streams-pipe.o ("pipe")'
     Pipe driver.

`streams-sad.o ("sad")'
     STREAMS Administrative Driver.


File: STREAMS.info,  Node: Modules,  Next: Libraries,  Prev: Drivers,  Up: Reference

3.3 Modules
===========

The configuration of `STREAMS' drivers and modules is performed when compiling
the Linux Fast-STREAMS subsystem.  The `STREAMS' subsystem, core drivers and
modules are part of every Linux Fast-STREAMS system.

The following sections list the core drivers and modules, `STREAMS' kernel
tunable parameters, and `STREAMS' configuration information.

`streams-connld.o ("connld")'
     Connld module.

`streams-pipemod.o ("pipemod")'
     Pipe module.

`streams-sc.o ("sc")'
     STREAMS configuration module.

`streams-sth.o ("sth")'
     Stream Head module.

Additional modules are provided by add-on packages.


File: STREAMS.info,  Node: Libraries,  Next: Utilities,  Prev: Modules,  Up: Reference

3.4 Libraries
=============


File: STREAMS.info,  Node: Utilities,  Next: Development,  Prev: Libraries,  Up: Reference

3.5 Utilities
=============


File: STREAMS.info,  Node: Development,  Prev: Utilities,  Up: Reference

3.6 Development
===============

For development using the `streams' package, *Note About This Manual: (SPG)Top.


File: STREAMS.info,  Node: Conformance,  Next: Releases,  Prev: Reference,  Up: Top

4 Conformance
*************

* Menu:

* STREAMS Compatibility::
* Porting::


File: STREAMS.info,  Node: STREAMS Compatibility,  Next: Porting,  Up: Conformance

4.1 STREAMS Compatibility
=========================

`Linux Fast-STREAMS' provides some degree of compatibility with other "STREAMS"
implementation as follows:

`-- SVR 4.2 ES/MP'
     `Linux Fast-STREAMS' provides some degree of operational compatibility with
     `SVR 4.2 ES/MP' to ease portability and common comprehension, *note SVR
     4.2 Compatibility: (SPG)SVR 4.2 Compatibility.

`-- AIX 5L Version 5.1'
     `Linux Fast-STREAMS' provides some degree of operational compatibility with
     `AIX 5L Version 5.1' to ease portability and common comprehension, *note
     AIX Compatibility: (SPG)AIX Compatibility.

`-- HP-UX 11.0i v2'
     `Linux Fast-STREAMS' provides some degree of operational compatibility with
     `HP-UX 11.0i v2' to ease portability and common comprehension, *note HP-UX
     Compatibility: (SPG)HP-UX Compatibility.

`-- OSF/1 1.2/Digital UNIX/True 64'
     `Linux Fast-STREAMS' provides some degree of operational compatibility with
     `OSF/1 1.2/Digital UNIX' to ease portability and common comprehension,
     *note OSF/1 Compatibility: (SPG)OSF/1 Compatibility.

`-- UnixWare 7.1.3 (OpenUnix 8)'
     `Linux Fast-STREAMS' provides some degree of operational compatibility with
     `UnixWare 7.1.3 (OpenUnix 8)' to ease portability and common comprehension,
     *note UnixWare Compatibility: (SPG)UnixWare Compatibility.

`-- Solaris 9/SunOS 5.9'
     `Linux Fast-STREAMS' provides some degree of operational compatibility with
     `Solaris 9/SunOS 5.9' to ease portability and common comprehension, *note
     Solaris Compatibility: (SPG)Solaris Compatibility.

`-- SUPER-UX'
     `Linux Fast-STREAMS' provides some degree of operational compatibility with
     `SUPER-UX' to ease portability and common comprehension, *note SUX
     Compatibility: (SPG)SUX Compatibility.

`-- UXP/V'
     `Linux Fast-STREAMS' provides some degree of operational compatibility with
     `UXP/V' to ease portability and common comprehension, *note UXP
     Compatibility: (SPG)UXP Compatibility.

`-- LiS-2.16.18'
     `Linux Fast-STREAMS' provides some degree of operational compatibility with
     `LiS 2.16' to ease portability and common comprehension, *note LiS
     Compatibility: (SPG)LiS Compatibility.

For additional details, *note About This Manual: (SPG)Top.


File: STREAMS.info,  Node: Porting,  Prev: STREAMS Compatibility,  Up: Conformance

4.2 Porting
===========

`-- SVR 4.2 ES/MP'
     `Linux Fast-STREAMS' provides compatibility functions for source level
     compatibility with `SVR 4.2 ES/MP' and to ease porting of modules and
     drivers to `Linux Fast-STREAMS'.  Portability considerations are mantained
     in a separate manual: *note Porting from SVR 4.2 MP: (porting)Porting from
     SVR 4.2 MP.

`-- AIX 5L Version 5.1'
     `Linux Fast-STREAMS' provides compatibility functions for source level
     compatibility with `AIX 5L Version 5.1' and to ease porting of modules and
     drivers to `Linux Fast-STREAMS'.  Portability considerations are mantained
     in a separate manual: *note Porting from AIX 5L Version 5.1:
     (porting)Porting from AIX 5L Version 5.1.

`-- HP-UX 11.0i v2'
     `Linux Fast-STREAMS' provides compatibility functions for source level
     compatibility with `HP-UX 11.0i v2' and to ease porting of modules and
     drivers to `Linux Fast-STREAMS'.  Portability considerations are mantained
     in a separate manual: *note Porting from HP-UX 11.0i v2: (porting)Porting
     from HP-UX 11.0i v2.

`-- OSF/1 1.2/Digital UNIX/True 64'
     `Linux Fast-STREAMS' provides compatibility functions for source level
     compatibility with `OSF/1 1.2/Digital UNIX/True 64' and to ease porting of
     modules and drivers to `Linux Fast-STREAMS'.  Portability considerations
     are mantained in a separate manual: *note Porting from OSF/1 1.2/Digital
     UNIX: (porting)Porting from OSF/1 1.2/Digital UNIX.

`-- UnixWare 7.1.3 (OpenUnix 8)'
     `Linux Fast-STREAMS' provides compatibility functions for source level
     compatibility with `UnixWare 7.1.3 (OpenUnix 8)' and to ease porting of
     modules and drivers to `Linux Fast-STREAMS'.  Portability considerations
     are mantained in a separate manual: *note Porting from UnixWare 7.1.3
     (OpenUnix 8): (porting)Porting from UnixWare 7.1.3 (OpenUnix 8).

`-- Solaris 9/SunOS 5.9'
     `Linux Fast-STREAMS' provides compatibility functions for source level
     compatibility with `Solaris 9/SunOS 5.9' and to ease porting of modules
     and drivers to `Linux Fast-STREAMS'.  Portability considerations are
     mantained in a separate manual: *note Porting from Solaris 9/SunOS 5.9:
     (porting)Porting from Solaris 9/SunOS 5.9.

`-- SUPER-UX'
     `Linux Fast-STREAMS' provides compatibility functions for source level
     compatibility with `SUPER-UX' and to ease porting of modules and drivers
     to `Linux Fast-STREAMS'.  Portability considerations are mantained in a
     separate manual: *note Porting from SUPER-UX: (porting)Porting from
     SUPER-UX.

`-- UXP/V'
     `Linux Fast-STREAMS' provides compatibility functions for source level
     compatibility with `UXP/V' and to ease porting of modules and drivers to
     `Linux Fast-STREAMS'.  Portability considerations are mantained in a
     separate manual: *note Porting from UXP/V: (porting)Porting from UXP/V.

`-- LiS-2.16.18'
     `Linux Fast-STREAMS' provides compatibility functions for source level
     compatibility with `LiS-2.16.18' and to ease porting of modules and
     drivers to `Linux Fast-STREAMS'.  Portability considerations are mantained
     in a separate manual: *note Porting from Linux STREAMS (LiS) 2.16.18:
     (porting)Porting from Linux STREAMS (LiS) 2.16.18.

For additional details, *note About This Manual: (proting)Top.


File: STREAMS.info,  Node: Releases,  Next: Installation,  Prev: Conformance,  Up: Top

5 Releases
**********

This is the OpenSS7 Release of the Linux Fast-STREAMS core, tools, drivers and
modules that implement the "Linux Fast-STREAMS" SVR 4.2 MP STREAMS utility for
Linux.  This package is intended as a replacement package for "Linux STREAMS
(LiS)".

The following sections provide information on Linux Fast-STREAMS releases as
well as compatibility information of OpenSS7 release to mainstream UNIX
releases of the core, modules and drivers, as well as Linux kernel
compatibility.

* Menu:

* Prerequisites::		Prerequisite packages
* Compatibility::		Compatibility Issues
* Release Notes::		Release Notes
* Maturity::			Package Maturity
* Bugs::			Package Defects
* Schedule::			Development and Bug Fix Schedule
* History::			Project History


File: STREAMS.info,  Node: Prerequisites,  Next: Compatibility,  Up: Releases

5.1 Prerequisites
=================

Prerequisites for the Linux Fast-STREAMS package are as follows:

   * A fairly LSB compliant GNU/Linux distribution.  (1)

   * Linux 2.4 or 2.6 kernel (2.4.10 - 2.4.27) or (2.6.3 - 2.6.17)

   * glibc2 or better.

   * GNU info (for info files).

   * GNU groff (for man pages).  (2)

If you need to rebuild the package from sources with modifications, you will
need a larger GNU toolchain as described in *Note Downloading from CVS::.

---------- Footnotes ----------

(1) *Note GNU/Linux Distributions::, for more information.

(2) If you are using a Debian release, please make sure to install the groff
extension package (`groff_ext'), as it contains the `refer' or `grefer'
commands necessary for including references in the manual pages.


File: STREAMS.info,  Node: Compatibility,  Next: Release Notes,  Prev: Prerequisites,  Up: Releases

5.2 Compatibility
=================

This section discusses compatibility with major prerequisites.

* Menu:

* GNU/Linux Distributions::	Compatibility to GNU/Linux Distributions
* Linux Kernel::		Compatibility to Linux Kernels
* Linux Architectures::		Compatibility to Linux Architectures
* Linux STREAMS::		Compatibility to LiS


File: STREAMS.info,  Node: GNU/Linux Distributions,  Next: Linux Kernel,  Up: Compatibility

5.2.1 GNU/Linux Distributions
-----------------------------

"Linux Fast-STREAMS" is compatible with the following "Linux" distributions:(1)

   * CentOS Enterprise Linux 3.4 (centos34)

   * CentOS Enterprise Linux 4.0 (centos4)

   * Debian 3.0r2 Woody (deb3.0) - TBD

   * Debian 3.1r0a Sarge (deb3.1)

   * Fedora Core 1 (FC1) - TBD

   * Fedora Core 2 (FC2) - TBD

   * Fedora Core 3 (FC3) - TBD

   * Fedora Core 4 (FC4)

   * Fedora Core 5 (FC5)

   * Gentoo 2006.1 (untested)

   * Lineox 4.026 (LEL4) - TBD

   * Lineox 4.053 (LEL4)

   * Mandrakelinux 10.0 (MDK100) - TBD

   * Mandrakelinux 10.1 (MDK101) - TBD

   * Mandrakelinux 9.2 (MDK92) - TBD

   * Mandriva Linux LE2005 (MDK102) - TBD

   * Mandriva Linux LE2006 (MDK103)

   * Mandriva One (untested)

   * Performance Technlogies "NexusWare24" - TBD

   * Performance Technologies NexusWare 8.0

   * RedHat Linux 7.2 (RH7)

   * RedHat Linux 7.3 (RH7)

   * RedHat Linux 8.0 (RH8) - TBD

   * RedHat Linux 9 (RH9) - TBD

   * RedHat Enterprise Linux 3.0 (EL3)

   * RedHat Enterprise Linux 4 (EL4)

   * SuSE 8.0 Professional (SuSE8.0) - TBD

   * SuSE 9.1 Personal (SuSE9.1) - TBD

   * SuSE 9.2 Professional (SuSE9.2) - TBD

   * SuSE OpenSuSE (SuSEOSS)

   * SuSE 10.0 (SuSE10.0)

   * SuSE 10.1 (SuSE10.1) (untested)

   * Ubuntu 5.10 (ubu5.10)

   * Ubuntu 6.06 LTS (ubu6.06)

   * WhiteBox Enterprise Linux 3.0 (WBEL3)

   * WhiteBox Enterprise Linux 4 (WBEL4)

When installing from the tarball (*note Installing the Tar Ball::), this
distribution is probably compatible with a  much broader array of distributions
than those listed above.  These are the distributions against which the current
maintainer creates and tests builds.

---------- Footnotes ----------

(1) Items marked as `TBD' are scheduled to have support deprecated.  That is,
in a future release, the distributions marked `TBD' will not longer be
validated before release.


File: STREAMS.info,  Node: Linux Kernel,  Next: Linux Architectures,  Prev: GNU/Linux Distributions,  Up: Compatibility

5.2.2 Kernel
------------

The `Linux Fast-STREAMS' package compiles as a "Linux" kernel module.  It is not
necessary to patch the "Linux" kernel to build or use the package.(1) Nor do
you have to recompile your kernel to build or use the package.  OpenSS7
packages use `autoconf' scripts to adapt the package source to your existing
kernel.  The package builds and runs nicely against production kernels from the
distributions listed above.  Rather than relying on kernel versions, the
`autoconf' scripts interrogate the kernel for specific features and variants to
better adapt to distribution production kernels that have had patches applied
over the official kernel.org (http://www.kernel.org/) sources.

The `Linux Fast-STREAMS' package is compatible with 2.4 kernel series after
2.4.10 and has been tested up to and including 2.4.27.  It has been tested from
2.6.3 up to and including 2.6.17.  Please note that your mileage may vary if
you use a kernel more recent than 2.6.17: it is difficult to anticipate changes
that kernel developers will make in the future.  Many kernels in the 2.6 series
now vary widely ny release version and if you encounter problems, try a kernel
within the supported series.

UP validation testing for kernels is performed on all supported architectures.
SMP validation testing is performed on UP machines, as well as on an Intel
3.0GHz Pentium IV 630 with HyperThreading enabled.  Because HyperThreading is
not as independent as multiple CPUs, SMP validation testing is limited.

---------- Footnotes ----------

(1) At a later date, it is possible to move this package into the kernel,
however, with continued resistance to STREAMS from within the "Linux" developer
community, this is currently unlikely.


File: STREAMS.info,  Node: Linux Architectures,  Next: Linux STREAMS,  Prev: Linux Kernel,  Up: Compatibility

5.2.3 Architectures
-------------------

The `Linux Fast-STREAMS' package compiles and installs on a wide range of
architectures.  Although it is believed that the package will work on all
architectures supported by the Linux kernel being used, validation testing has
only been performed with the following architectures:

   * ix86

   * x86_64

   * ppc (MPC 860)

   * ppc64

32-bit compatibility validation testing is performed on all 64-bit
architectures supporting 32-bit compatibility.  If you would like to validate
an OpenSS7 package on a specific machine architecture, you are welcome to
sponsor the project with a test machine.


File: STREAMS.info,  Node: Linux STREAMS,  Prev: Linux Architectures,  Up: Compatibility

5.2.4 Linux STREAMS
-------------------

"Linux Fast-STREAMS" provides a suitable replacement for the (now deprecated)
"Linux STREAMS (LiS) 2.18.0" package formerly maintained by Dave Goethe of GCOM
(http://www.gcom.com/).


File: STREAMS.info,  Node: Release Notes,  Next: Maturity,  Prev: Compatibility,  Up: Releases

5.3 Release Notes
=================

The sections that follow provide information on OpenSS7 releases of the
Linux Fast-STREAMS package.

* Menu:

* Release streams-0.7a.6.rc2::		Release 6.rc2
* Release streams-0.7a.5::		Release 5
* Release streams-0.7a.4::		Release 4
* Release streams-0.7a.3::		Release 3
* Release streams-0.7a-3::		Release 3
* Release streams-0.7a-2::		Release 2
* Release streams-0.7a-1::		Release 1


File: STREAMS.info,  Node: Release streams-0.7a.6.rc2,  Next: Release streams-0.7a.5,  Up: Release Notes

5.3.1 Release streams-0.7a.6.rc2
--------------------------------

Added `--enable-devel' `configure' option for embedded targets.  Added
`send-pr' script for automatic problem report generation.


File: STREAMS.info,  Node: Release streams-0.7a.5,  Next: Release streams-0.7a.4,  Prev: Release streams-0.7a.6.rc2,  Up: Release Notes

5.3.2 Release streams-0.7a.5
----------------------------

This release is primarily to support additional compilers (gcc 4.0.2),
architectures (x86_64, SMP, 32-bit compatibility), recent Linux distributions
(EL4, SuSE 10, LE2006, OpenSuSE) and kernels (2.6.15).

   * Changes to wait queues.  Split single wait queue into four independent
     wait queues.  Reworked wait queues for both old style (2.4) and new style
     (2.6) semantics.

   * Changes to satisfy gcc 4.0.2 compiler.

   * Corrected build flags for Gentoo and 2.6.15 kernels as reported on mailing
     list.  Build and run tested on FC4 i686 and x86_64 kernels based on 2.6.15.

   * Corrections for and testing of 64-bit clean compile and test runs on
     x86_64 architecture.  Some bug corrections resulting from gcc 4.0.2
     compiler warnings.

   * Initial corrections for and testing of SMP operation on Intel 630
     Hyper-Threaded SMP on x86_64.  This package should now run well on N-way
     Xeons even with Hyper-Threading enabled.

   * Corrections and validation of 32-bit compatibilty over 64-bit on x86_64.
     Should apply well to other 64-bit architectures as well.

This is a public beta test release of the package.


File: STREAMS.info,  Node: Release streams-0.7a.4,  Next: Release streams-0.7a.3,  Prev: Release streams-0.7a.5,  Up: Release Notes

5.3.3 Release streams-0.7a.4
----------------------------

This is primarily a bug fixes release and corrections resulting from testing.


File: STREAMS.info,  Node: Release streams-0.7a.3,  Next: Release streams-0.7a-3,  Prev: Release streams-0.7a.4,  Up: Release Notes

5.3.4 Release streams-0.7a.3
----------------------------

With this release version numbers were changed to reflect an upstream version
only to be consistent with other OpenSS7 package releases.  All `RPM' release
numbers will be `-1$(PACKAGE_RPMEXTRA)' and all `Debian' release numbers will
be `_0'.  If you wish to apply patches and relelease the package, please bump
up the release number and apply a suitable release suffix for your
organization.  We leave `Debian' release number `_1' reserved for your use, so
you can still bundle the source in the `.dsc' file.

Major changes for this release include build against Linux 2.6 kernels and
popular distributions based on the 2.6 kernel as well as wider distribution
support.

This was an internal beta test release and was not released publicly.


File: STREAMS.info,  Node: Release streams-0.7a-3,  Next: Release streams-0.7a-2,  Prev: Release streams-0.7a.3,  Up: Release Notes

5.3.5 Release streams-0.7a-3
----------------------------

Updates to common build process.  Documentation updates.

This was an internal alpha test release and was not released publicly.


File: STREAMS.info,  Node: Release streams-0.7a-2,  Next: Release streams-0.7a-1,  Prev: Release streams-0.7a-3,  Up: Release Notes

5.3.6 Release streams-0.7a-2
----------------------------

Removed all XTI/TLI and Linux networking code, headers and documentation from
streams distribution and set epoch at 0.  Linux networking code has been
migrated to the strxnet, strinet and strsctp packages.  The purpose for doing
this was to allow the Linux networking to build against `Linux Fast-STREAMS' as
well as `Linux STREAMS' and is a preparation for phasing out LiS and phasing in
LfS.

This was an internal alpha test release and was not released publicly.


File: STREAMS.info,  Node: Release streams-0.7a-1,  Prev: Release streams-0.7a-2,  Up: Release Notes

5.3.7 Release streams-0.7a-1
----------------------------

This is the initial release of the Linux Fast-STREAMS package for Linux.  This
is intended as a high-performance, production replacement for `Linux STREAMS
(LiS)'.  Linux Fast-STREAMS has the following features:

   - optimized for Linux kernels.

   - prepared for mainstream Linux kernel adoption.

   - lindented and follows kernel coding practices.

   - compatibility modes for AIX, HPUX, OSF, Solaris, UnixWare, SVR 4.2 and LiS.

   - supports all major SVR4.2 variants.

   - licensed under GPL with commercial licensing available.

   - supports full SVR 4.2 MP synchronization models.

   - runs at SoftIRQ.

   - provides common SVR 4.2 system tunable parameters and sysctls.

   - provides /proc filesystem access for debugging and performance tuning.

   - provides a full set of common STREAMS modules and drivers.

   - provides full name-streams device and shadow special filesystem support.

This was an internal alpha test release and was not released publicly.


File: STREAMS.info,  Node: Maturity,  Next: Bugs,  Prev: Release Notes,  Up: Releases

5.4 Maturity
============

The `OpenSS7 Project' adheres to the following release philosophy:

* Menu:

* Pre-Alpha Releases::		Pre-Alpha release description
* Alpha Releases::		Alpha release description
* Beta Releases::		Beta release description
* Gamma Releases::		Gamma release description
* Production Releases::		Production release description

   * pre-alpha release

   * alpha release

   * beta release

   * gamma release

   * production release


File: STREAMS.info,  Node: Pre-Alpha Releases,  Next: Alpha Releases,  Up: Maturity

5.4.1 Pre-Alpha Releases
------------------------

"Pre-alpha" releases are releases that have received no testing whatsoever.
Code in the release is not even known to configure or compile.  The purpose of
a pre-alpha release is to make code and documenation available for insepection
only, and to solicit comments on the design approach or other characteristics
of the software package.

"Pre-alpha" release packages ship containing warnings recommending that the
user not even execute the contained code.


File: STREAMS.info,  Node: Alpha Releases,  Next: Beta Releases,  Prev: Pre-Alpha Releases,  Up: Maturity

5.4.2 Alpha Releases
--------------------

"Alpha" release are releases that have received little to no testing, or that
have been tested and contains known bugs or defects that make the package
unsuitable even for testing.  The purpose for an "alpha" release are the same
as for the pre-alpha release, with the additional purpose that it is an earily
release of partially functional code that has problems that an external
developer might be willing to fix themselves and contribute back to the project.

"Alpha" release packages ship containing warnings that executing the code can
crash machines and might possibly do damage to systems upon which it is
executed.


File: STREAMS.info,  Node: Beta Releases,  Next: Gamma Releases,  Prev: Alpha Releases,  Up: Maturity

5.4.3 Beta Releases
-------------------

"Beta" releases are releases that have received some testing, but the testing
to date is not exhaustive.  "Beta" release packages do not ship with known
defects.  All known defects are respolved before distribution; however, as
exhaustive testing has not been performed, unknown defects may exist.  The
purpose for a "beta" release is to provide a baseline for other organizations
to participate in the rigorous testing of the package.

"Beta" release packages ship containing warnings that the package has not been
exhaustively tested and that the package may cause systems to crash.
Suitability of software in this category for production use is not advised by
the project; however, as always, is at the discretion of the user of the
software.


File: STREAMS.info,  Node: Gamma Releases,  Next: Production Releases,  Prev: Beta Releases,  Up: Maturity

5.4.4 Gamma Releases
--------------------

"Gamma" release are releases that have received exhaustive testing within the
project, but external testing has been minimal.  "Gamma" release packages do
not ship with known defects.  As exhaustive internal testing has been
performed, unknown defects should be few.  Please remember that there is NO
WARRANTY on public release packages.

"Gamma" release packages typically resolve problems in previous "beta"
releases, and might not have had full regression testing performed.
Suitability of software in this category for production use is at the
discretion of the user of the software.   "The OpenSS7 Project" recommends that
the complete validation test suites provided with the package be performed and
pass on target systems before considering production use.


File: STREAMS.info,  Node: Production Releases,  Prev: Gamma Releases,  Up: Maturity

5.4.5 Production Releases
-------------------------

"Production" releases are releases that have received exhaustive testing within
the project and validated on specific distributions and architectures.
"Production" release packages do not ship with known defects.  Please remember
that there is NO WARRANTY on public release packages.

"Production" packages ship containig a list of validated distributions and
architecutres.  Full regression testing of any maintenance changes is
performed.  Suitability of software in this category for production use on the
specified target distributions and architectures is at the discretion of the
user.  It should not be necessary to preform validation tests on the set of
supported target systems before considering production use.


File: STREAMS.info,  Node: Bugs,  Next: Schedule,  Prev: Maturity,  Up: Releases

5.5 Bugs
========

* Menu:

* Defect Notices::		Notices of the possibility of defects
* Known Defects::		Known bugs in the package


File: STREAMS.info,  Node: Defect Notices,  Next: Known Defects,  Up: Bugs

5.5.1 Defect Notices
--------------------

"Linux Fast-STREAMS" could contain unknown defects.  This is a "beta" release.
Some defects could be harmful.  Validation testing has been performed by the
`OpenSS7 Project' on this software for only a restricted set of systems.  The
software might fail to configure or compile on other systems.  The `OpenSS7
Project' recommends that you do not use this software for purposes other than
validation testing and evaluation, and then only with care. Use at your own
risk.  Remember that there is NO WARRANTY.(1)

This software is beta software.  As such, it might crash your kernel.
Installation of the software might mangle your header files or Linux
distribution in such a way as to make it unusable.  Crashes could lock your
system and rebooting the system might not repair the problem.  You can possibly
loose all the data on your system.  Because this software might crash your
kernel, the resulting unstable system could possibly destroy computer hardware
or peripherals making them ususable.  You might void the warranty on any system
on which you run this software.  YOU HAVE BEEN WARNED.

---------- Footnotes ----------

(1) See section NO WARRANTY under *Note GNU General Public License::.


File: STREAMS.info,  Node: Known Defects,  Prev: Defect Notices,  Up: Bugs

5.5.2 Known Defects
-------------------

With the exception of packages not originaly created by the `OpenSS7 Project',
the `OpenSS7 Project' software does not ship with known bugs in any release
stage except "pre-alpha".  "Linux Fast-STREAMS" had no known bugs at the time
of release.


File: STREAMS.info,  Node: Schedule,  Next: History,  Prev: Bugs,  Up: Releases

5.6 Schedule
============


File: STREAMS.info,  Node: History,  Prev: Schedule,  Up: Releases

5.7 History
===========


File: STREAMS.info,  Node: Installation,  Next: Troubleshooting,  Prev: Releases,  Up: Top

6 Installation
**************

* Menu:

* Downloading::			Downloading the package
* Configuration::		Configuration of the package
* Building::			Building the package
* Installing::			Installing the package
* Removing::			Removing the package
* Loading::			Loading the package
* Maintenance::			Maintaining the package


File: STREAMS.info,  Node: Downloading,  Next: Configuration,  Up: Installation

6.1 Downloading
===============

The Linux Fast-STREAMS package releases can be downloaded from the downloads
page of The OpenSS7 Project (http://www.openss7.org/download.html).  The
package is available as a binary RPM (for popular architectures) a source RPM,
Debian binary DEB and source DSC, or as a tar ball.  If you are using a
browsable viewer, you can obtain the OpenSS7 release of `streams' from the
links in the sections that follow.

By far the easiest form for installing and using `streams-0.7a.6.rc2' is to
download and install binary RPM.  If a binary RPM is not available for your
distribution,  but your distribution supports RPM, the next best method for
installing and using `streams-0.7a.6.rc2' is to download and rebuild the source
RPM.  If your architecture does not support RPM at all, or you have special
needs (such as cross-compiling for embedded targets), the final resort method is
to download, configure, build and install from the source tarball.

* Menu:

* Downloading the Binary RPM::		the easiest approach
* Downloading the Debian DEB::		the easiest approach for Debian
* Downloading the Source RPM::		the next best approach
* Downloading the Debian DSC::		the next best approach for Debian
* Downloading the Tar Ball::		last resort
* Downloading from CVS::		mid-release download


File: STREAMS.info,  Node: Downloading the Binary RPM,  Next: Downloading the Debian DEB,  Up: Downloading

6.1.1 Downloading the Binary RPM
--------------------------------

To install from binary RPM, you will need several of the RPM for a complete
installation.  Binary RPM fall into several categories.  To download and
install a complete package requires the appropriate RPM from each of the
several categories below.

To install from Binary RPM, you will need all of the following kernel
indepdendent packages for your architecture, and one of the kernel-depdendent
packages from the next section.

 Independent RPM
................

Independent RPM are not dependent on the Linux kernel version.  For example, the
source package `streams-source-0.7a.6.rc2-1.FC5.noarch.rpm', is not dependent on
kernel.

All of the following kernel independent RPM are required for your architecture.
Binary RPMs listed here are for example only: additional binary RPMs are
available from the downloads site.  If your architecture is not available, you
can build binary RPM from the source RPM (see *note Building from the Source
RPM::).

 Architecture Independent
.........................

streams-dev-0.7a.6.rc2-1.FC5.noarch.rpm (http://www.openss7.org/rpms/RPMS/noarch/streams-dev-0.7a.6.rc2-1.FC5.noarch.rpm)
     The `streams-dev' package contains the device definitions necessary to run
     applications programs developed for Linux Fast-STREAMS.(1)

streams-doc-0.7a.6.rc2-1.FC5.noarch.rpm (http://www.openss7.org/rpms/RPMS/noarch/streams-doc-0.7a.6.rc2-1.FC5.noarch.rpm)
     The `streams-doc' package contains this manual in plaintext, postscript,
     PDF and HTML forms, along with the meta-information from the `streams'
     package.  It also contains all of the manual pages necessary for
     developing Linux Fast-STREAMS applications and Linux Fast-STREAMS STREAMS
     modules or drivers.

streams-init-0.7a.6.rc2-1.FC5.noarch.rpm (http://www.openss7.org/rpms/RPMS/noarch/streams-init-0.7a.6.rc2-1.FC5.noarch.rpm)
     The `streams-init' package contains the init scripts and provides the
     postinst scripts necessary to create kernel module preloads and modules
     definitions for all kernel module `core' subpackages.

streams-source-0.7a.6.rc2-1.FC5.noarch.rpm (http://www.openss7.org/rpms/RPMS/noarch/streams-source-0.7a.6.rc2-1.FC5.noarch.rpm)
     The `streams-source' package contains the source code necessary for
     building the Linux Fast-STREAMS release.  It includes the `autoconf'
     configuration utilities necessary to create and distribute tarballs, rpms
     and deb/dscs.

 Architecture Dependent
.......................

streams-devel-0.7a.6.rc2-1.FC5.i686.rpm (http://www.openss7.org/rpms/RPMS/i686/streams-devel-0.7a.6.rc2-1.FC5.i686.rpm)
     The `streams-devel' package contains library archives for static
     compilation, header files to develop Linux Fast-STREAMS modules and
     drivers.  This also includes the header files and static libraries
     required to compile Linux Fast-STREAMS applications programs.

streams-lib-0.7a.6.rc2-1.FC5.i686.rpm (http://www.openss7.org/rpms/RPMS/i686/streams-lib-0.7a.6.rc2-1.FC5.i686.rpm)
     The `streams-lib' package contains the run-time shared libraries necessary
     to run application programs and utilities developed for the `streams'
     package.

streams-util-0.7a.6.rc2-1.FC5.i686.rpm (http://www.openss7.org/rpms/RPMS/i686/streams-util-0.7a.6.rc2-1.FC5.i686.rpm)
     The `streams-util' package provides administrative and configuration test
     utilities and commands associated with the Linux Fast-STREAMS package.

 Kernel-Dependent RPM
.....................

Kernel-Dependent RPM are dependent on specific Linux Kernel Binary RPM releases.
Packages are provided for popular released `RedHat' kernels.  Packages
dependent upon `RedHat' or other kernel RPM will have the `_kversion' kernel
package version in the package name.

One of the following Kernel-Dependent packages is required for your architecture
and kernel version.  If your architecture or kernel version is not on the list,
you can build binary RPM from the source RPM (see *note Building from the
Source RPM::).(2)

streams-core-2.6.17-1.2139_FC5-0.7a.6.rc2-1.FC5.i686.rpm (http://www.openss7.org/rpms/RPMS/i686/streams-core-2.6.17-1.2139_FC5-0.7a.6.rc2-1.FC5.i686.rpm)
     The `streams-core' package contains the loadable kernel modules that
     depend only on the kernel.  This package is heavily tied to the kernel for
     which it was compiled.  This particular package applies to kernel version
     `2.6.17-1.2139_FC5'.(3)

streams-info-2.6.17-1.2139_FC5-0.7a.6.rc2-1.FC5.i686.rpm (http://www.openss7.org/rpms/RPMS/i686/streams-info-2.6.17-1.2139_FC5-0.7a.6.rc2-1.FC5.i686.rpm)
     The `streams-info' package(4) contains the module symbol version
     information for the `core' subpackage, above.  It is possible to load this
     subpackage and compile modules that use the exported symbols without
     loading the actual kernel modules (from the `core' subpackage above).
     This package is heavily tied to the kernel for which it was compiled.
     This particular package applies to kernel version `2.6.17-1.2139_FC5'.(5)


 Configuration and Installation
...............................

To configure, build and install the binary RPM, *Note Configuring the Binary
RPM::.

---------- Footnotes ----------

(1) Not all distributions support the `%dev' RPM macro: a case in point is the
SuSE 8.0 distribution which uses an older version of `rpm'.  Distributions that
do not support the `%dev' macro will build devices as a `%post' operation.
Note also that not all release packages contain devices.  Only packages that
provide STREAMS character device drivers need devices, and then only when the
`specfs' or `devfsd' is not being used.

(2) Note that on `Mandrakelinux', unlike other RPM kernel distributions, kernel
packages for the ix86 architectures are always placed in i586 architecture
packages regardless of the true processor architecture of the kernel package.
`configure' detects this and builds the appropriate packages.

(3) Note that the `_kversion' of `2.6.17-1.2139_FC5' is only an example.  Note
also that only release packages that contain kernel modules will contain a
`core' subpackage.

(4) Note that only release packages that contain kernel modules and that export
versioned symbols will contain a `info' subpackage.  Also, this subpackage is
only applicable to 2.4 series kernels and is not necessary and not built for
2.6 series kernels.

(5) Note that the `_kversion' of `2.6.17-1.2139_FC5' is only an example.


File: STREAMS.info,  Node: Downloading the Debian DEB,  Next: Downloading the Source RPM,  Prev: Downloading the Binary RPM,  Up: Downloading

6.1.2 Downloading the Debian DEB
--------------------------------

To install from binary DEB, you will need several of the DEB for a complete
installation.  Binary DEB fall into several categories.  To download and
install a complete package requires the appropriate DEB from each of the
several categories below.

To install from Binary DEB, you will need all of the following kernel
indepdendent packages for your architecture, and one of the kernel-depdendent
packages from the next section.

 Independent DEB
................

Independent DEB are not dependent on the Linux kernel version.  For example,
the source package `streams-source_0.7a.6.rc2-0_i386.deb', is not dependent on
kernel.

All of the following kernel independent DEB are required for your architecture.
Binary DEBs listed here are for example only: additional binary DEBs are
available from the downloads site.  If your architecture is not available, you
can build binary DEB from the Debian DSC (see *note Building from the Debian
DSC::).

 Architecture Independent
.........................

streams-dev_0.7a.6.rc2-0_all.deb (http://www.openss7.org/debian/streams-dev_0.7a.6.rc2-0_all.deb)
     The `streams-dev' package contains the device definitions necessary to run
     applications programs developed for Linux Fast-STREAMS.  (1)

streams-doc_0.7a.6.rc2-0_all.deb (http://www.openss7.org/debian/streams-doc_0.7a.6.rc2-0_all.deb)
     The `streams-doc' package contains this manual in plaintext, postscript,
     PDF and HTML forms, along with the meta-information from the `streams'
     package.  It also contains all of the manual pages necessary for
     developing Linux Fast-STREAMS applications and Linux Fast-STREAMS STREAMS
     modules or drivers.

streams-init_0.7a.6.rc2-0_all.deb (http://www.openss7.org/debian/streams-init_0.7a.6.rc2-0_all.deb)
     The `streams-init' package contains the init scripts and provides the
     postinst scripts necessary to create kernel module preloads and modules
     definitions for all kernel module `core' subpackages.

streams-source_0.7a.6.rc2-0_all.deb (http://www.openss7.org/debian/streams-source_0.7a.6.rc2-0_all.deb)
     The `streams-source' package contains the source code necessary for
     building the Linux Fast-STREAMS release.  It includes the `autoconf'
     configuration utilities necessary to create and distribute tarballs, rpms
     and deb/dscs.  !ignore (2) !end ignore

 Architecture Dependent
.......................

streams-devel_0.7a.6.rc2-0_i386.deb (http://www.openss7.org/debian/streams-devel_0.7a.6.rc2-0_i386.deb)
     The `streams-devel' package contains library archives for static
     compilation, header files to develop Linux Fast-STREAMS modules and
     drivers.  This also includes the header files and static libraries
     required to compile Linux Fast-STREAMS applications programs.

streams-lib_0.7a.6.rc2-0_i386.deb (http://www.openss7.org/debian/streams-lib_0.7a.6.rc2-0_i386.deb)
     The `streams-lib' package contains the run-time shared libraries necessary
     to run application programs and utilities developed for the `streams'
     package.


 Kernel-Dependent DEB
.....................

Kernel-Dependent DEB are dependent on specific Linux Kernel Binary DEB releases.
Packages are provided for popular released `RedHat' kernels.  Packages
dependent upon `RedHat' or other kernel DEB will have the `_kversion' kernel
package version in the package name.

One of the following Kernel-Dependent packages is required for your architecture
and kernel version.  If your architecture or kernel version is not on the list,
you can build binary DEB from the source DEB (see *note Building from the
Debian DSC::).(3)

streams-core-2.6.17-1.2139_FC5_0.7a.6.rc2-0_i386.deb (http://www.openss7.org/debian/streams-core-2.6.17-1.2139_FC5_0.7a.6.rc2-0_i386.deb)
     The `streams-core' package contains the loadable kernel modules that
     depend only on the kernel.  This package is heavily tied to the kernel for
     which it was compiled.  This particular package applies to kernel version
     `2.6.17-1.2139_FC5'.(4)

streams-info-2.6.17-1.2139_FC5_0.7a.6.rc2-0_i386.deb (http://www.openss7.org/debian/streams-info-2.6.17-1.2139_FC5_0.7a.6.rc2-0_i386.deb)
     The `streams-info' package(5) contains the module symbol version
     information for the `core' subpackage, above.  It is possible to load this
     subpackage and compile modules that use the exported symbols without
     loading the actual kernel modules (from the `core' subpackage above).
     This package is heavily tied to the kernel for which it was compiled.
     This particular package applies to kernel version `2.6.17-1.2139_FC5'.(6)


 Configuration and Installation
...............................

To configure, build and install the Debian DEB, *Note Configuring the Debian
DEB::.

---------- Footnotes ----------

(1) Note that not all release packages contain devices.  Only packages that
provide STREAMS character device drivers need devices, and then only when the
`specfs' or `devfsd' is not being used.

(2) Note that not all releases have source DEB packages.  Release packages that
do not contain kernel modules do not generate a source DEB package.

(3) Note that on `Mandrakelinux', unlike other DEB kernel distributions, kernel
packages for the ix86 architectures are always placed in i586 architecture
packages regardless of the true processor architecture of the kernel package.
`configure' detects this and builds the appropriate packages.

(4) Note that the `_kversion' of `2.6.17-1.2139_FC5' is only an example.  Note
also that only release packages that contain kernel modules will contain a
`core' subpackage.

(5) Note that only release packages that contain kernel modules and that export
versioned symbols will contain a `info' subpackage.  Also, this subpackage is
only applicable to 2.4 series kernels and is not necessary and not built for
2.6 series kernels.

(6) Note that the `_kversion' of `2.6.17-1.2139_FC5' is only an example.


File: STREAMS.info,  Node: Downloading the Source RPM,  Next: Downloading the Debian DSC,  Prev: Downloading the Debian DEB,  Up: Downloading

6.1.3 Downloading the Source RPM
--------------------------------

If you cannot obtain a binary RPM for your architecture, or would like to roll
you own binary RPM, download the following source RPM.

streams-0.7a.6.rc2-1.src.rpm (http://www.openss7.org/rpms/SRPMS/streams-0.7a.6.rc2-1.src.rpm)
     This is the source RPM for the package.  From this source RPM it is
     possible to build binary RPM for any supported architecture and for any
     2.4 or 2.6 kernel.

 Configuration
..............

To configure the source RPM, *Note Configuring the Source RPM::.


File: STREAMS.info,  Node: Downloading the Debian DSC,  Next: Downloading the Tar Ball,  Prev: Downloading the Source RPM,  Up: Downloading

6.1.4 Downloading the Debian DSC
--------------------------------

If you cannot obtain a binary DEB for your architecture, or would like to roll
your own DEB, download the following Debian DSC.

streams_0.7a.6.rc2-0.dsc (http://www.openss7.org/debian/streams_0.7a.6.rc2-0.dsc)
streams_0.7a.6.rc2-0.tar.gz (http://www.openss7.org/debian/streams_0.7a.6.rc2-0.tar.gz)
     This is the Debian DSC for the package.  From this Debian DSC it is
     possible to build binary DEB for any supported architecture and for any
     2.4 or 2.6 kernel.

 Configuration
..............

To configure the source RPM, *Note Configuring the Debian DSC::.


File: STREAMS.info,  Node: Downloading the Tar Ball,  Next: Downloading from CVS,  Prev: Downloading the Debian DSC,  Up: Downloading

6.1.5 Downloading the Tar Ball
------------------------------

For non-RPM architectures, such as `NexusWare' embedded target, download the
tarball as follows:

streams-0.7a.6.rc2.tar.gz (http://www.openss7.org/streams-0.7a.6.rc2.tar.gz)
streams-0.7a.6.rc2.tar.bz2 (http://www.openss7.org/streams-0.7a.6.rc2.tar.bz2)
     These are the `tar' balls for the release.  These `tar' balls contain the
     `autoconf' distribution which includes all the source necessary for
     building and installing the package.  These tarballs will even build
     Source RPM and Binary RPM on RPM architectures and Debian DSC and DEB on
     DPKG architectures.

The tar ball may be downloaded easily with `wget' as follows:

     % wget http://www.openss7.org/streams-0.7a.6.rc2.tar.bz2

or

     % wget http://www.openss7.org/streams-0.7a.6.rc2.tar.gz

 Unpacking the Archive
......................

After downloading one of the tar balls, unpack the archive using one of the
following commands:

     % wget http://www.openss7.org/streams-0.7a.6.rc2.tar.gz
     % tar -xzvf streams-0.7a.6.rc2.tar.gz

or

     % wget http://www.openss7.org/streams-0.7a.6.rc2.tar.bz2
     % tar -xjvf streams-0.7a.6.rc2.tar.bz2

Either will create a subdirectory name `streams-0.7a.6.rc2' containing all of
the files and subdirectories for the `streams' package.

 Configuration
..............

To configure and install the tar ball, *Note Configuring the Tar Ball::.


File: STREAMS.info,  Node: Downloading from CVS,  Prev: Downloading the Tar Ball,  Up: Downloading

6.1.6 Downloading from CVS
--------------------------

If you are a subscriber or sponsor of The OpenSS7 Project
(http://www.openss7.org/) with CVS archive access privileges then you can
download release or mid-release versions of the `streams' package from the
project CVS archive.

The Linux Fast-STREAMS package is located in the `streams' subdirectory of
`/var/cvs'.  For release tag information, see *Note Releases::.

To access the archive from the project CVS pserver, use the following commands
to check out a version from the archive:

     % export CVSROOT='-d:pserver:USERNAME@cvs.openss7.com:2401/var/cvs'
     % cvs login
     Password: *********
     % cvs co -r streams_0.7a.6.rc2 streams
     % cvs logout

It is, of course, possible to check out by date or by other criteria.  For more
information, see *Note cvs(1): (*manpages*)cvs(1).

 Preparing the CVS Working Directory
....................................

Although public releases of the `streams' package do not require
reconfiguration, creating a configurable directory from the CVS archive
requires tools not normally distributed with the other releases.

The build host requires the following GNU tools:

   * `autoconf 2.59'

   * `automake 1.9.6'

   * `libtool 1.5.22'

   * `gettext 0.14.5'

It should be stressed that, in particular, the `autoconf' and `automake' must
be at version releases `2.59' and `1.9'.  _The versions normally distributed in
mainstream GNU/Linux distributions are, in fact, much older than these
versions._(1)  GNU version of these packages configured and installed to default
directories will install in `/usr/local/' allowing them to coexist with
distribution installed versions.

For building documentation, the build host also requires the following
documentation tools:

   * `gs 8.15'

   * `tetex 3.0'

   * `texinfo 4.8'

   * `transfig 3.2.5'

   * `imagemagick 6.2.4'

   * `groff 1.17.2'

Most desktop GNU/Linux distributions will have these tools; however, some
server-style installations (e.g. `Ubuntu'-server) will not and they must be
installed separately.

For uncooked manual pages, the entire `groff' package is required on `Debian'
and `Ubuntu' systems (the base package does not include grefer which is used
extensively by uncooked manual pages).  The following will get what you need:

     Debian: % apt-get install groff_ext
     Ubuntu: % apt-get install groff

In addition, the build host requires a complete tool chain for compiling for the
target host, including kernel tools such as `genksyms' and others.

If you wish to package rpms on an `rpm' system, or debs on a `dpkg' system, you
will need the appropriate tool chain.  Systems based on `rpm' typically have
the necessary toolchain available, however, `dpkg' systems do not.  The
following on a `Debian' or `Ubuntu' system will get what you need:

     % apt-get install debhelper
     % apt-get install fakeroot

To generate a configuration script and the necessary scriptlets required by the
GNU `autoconf' system, execute the following commands on the working directory:

     % autoreconf -fiv streams

where, `streams' is the name of the directory to where the working copy was
checked out under the previous step.  This command generates the `configure'
script and other missing pieces that are normally distributed with the release
Tar Balls, SRPMs and DSCs.

Make sure that `autoreconf --version' returns `2.59'.  Otherwise, you may need
to perform something like the following:

     % PATH="/usr/local/bin:$PATH"
     % autoreconf -fiv streams

After reconfiguring the directory, the package can then be configured and built
using the same instructions as are used for the Tar Ball, see *Note Configuring
the Tar Ball::, and *Note Building from the Tar Ball::.

Do note, however, that `make' will rebuild the documentation that is normally
released with the package.  Additional tools may be necessary for building the
documentation.

When configuring the package in a working directory and while working a
change-compile-test cycle that involves configuration macros or documentation, I
find it of great advantage to invoke the GNU `configure' options
`--enable-maintainer-mode' and `--enable-dependency-tracking'.  The first of
these two options will add maintainer-specific targets to any generated
`Makefile', and the later will invoke automatic dependency tracking within the
`Makefile' so rebuilds after changes to macro, source or documentation files
will be automatically rebuilt.

---------- Footnotes ----------

(1) A notable exception is Debian.


File: STREAMS.info,  Node: Configuration,  Next: Building,  Prev: Downloading,  Up: Installation

6.2 Configuration
=================

* Menu:

* Configuring the Binary RPM::		the easiest approach
* Configuring the Debian DEB::		the easiest approach for Debian
* Configuring the Source RPM::		the next best approach
* Configuring the Debian DSC::		the next best approach for Debian
* Configuring the Tar Ball::		last resort


File: STREAMS.info,  Node: Configuring the Binary RPM,  Next: Configuring the Debian DEB,  Up: Configuration

6.2.1 Configuring the Binary RPM
--------------------------------

In general the binary RPM do not require any configuration, however, during
installation it is possible to relocate some of the installation directories.
This allows some degree of customization.  Relocations that are available on the
binary RPM are as follows:

`streams-core-2.6.17-1.2139_FC5-0.7a.6.rc2-1.FC5.i686.rpm'

    `/lib/modules/2.6.17-1.2139_FC5'
          This relocatable directory contains the kernel modules that provide
          the streams core, drivers and modules.(1)

`streams-info-2.6.17-1.2139_FC5-0.7a.6.rc2-1.FC5.i686.rpm'

    `/usr/include/streams/2.6.17-1.2139_FC5'
          This relocatable directory contains the kernel module exported symbol
          information that allows other kernel modules to be compiled against
          the correct version of the streams package.(2)

`streams-dev-0.7a.6.rc2-1.FC5.i686.rpm'
     (not relocatable)

`streams-devel-0.7a.6.rc2-1.FC5.i686.rpm'

    `/usr/lib'
          This relocatable directory contains streams libraries.

    `/usr/include/streams'
          This relocatable directory contains streams header files.

`streams-doc-0.7a.6.rc2-1.FC5.i686.rpm'

    `/usr/share/doc'
          This relocatable directory contains all package specific documentation
          (including this manual).  The subdirectory in this directory is the
          `streams-0.7a.6.rc2' directory.

    `/usr/share/info'
          This relocatable directory contains info files (including the info
          version of this manual).

    `/usr/share/man'
          This relocatable directory contains manual pages.

`streams-lib-0.7a.6.rc2-1.FC5.i686.rpm'

    `/usr/lib'
          This relocatable directory contains the run-time shared libraries
          necessary to run applications programs and utilities developed for
          Linux Fast-STREAMS.

    `/usr/share/locale'
          This relocatable directory contains the locale information for shared
          library files.

`streams-source-0.7a.6.rc2-1.FC5.i686.rpm'

    `/usr/src'
          This relocatable directory contains the source code.

`streams-util-0.7a.6.rc2-1.FC5.i686.rpm'

    `/usr/bin'
          This relocatable directory contains binary programs and utilities.

    `/usr/sbin'
          This relocatable directory contains system binary programs and
          utilities.

    `/usr/libexec'
          This relocatable directory contains test programs.

    `/etc'
          This relocatable directory contains init scripts and configuration
          information.


 Installation
.............

To install the binary RPM, *Note Installing the Binary RPM::.

---------- Footnotes ----------

(1) Note that the `_kversion' of `2.6.17-1.2139_FC5' is only an example.

(2) Note that the `_kversion' of `2.6.17-1.2139_FC5' is only an example.  Also,
note that the `info' subpackage is only applicable to the 2.4 kernel series.


File: STREAMS.info,  Node: Configuring the Debian DEB,  Next: Configuring the Source RPM,  Prev: Configuring the Binary RPM,  Up: Configuration

6.2.2 Configuring the Debian DEB
--------------------------------

In general the binary DEB do not require any configuration.

 Installation
.............

To install the Debian DEB, *Note Installing the Debian DEB::.


File: STREAMS.info,  Node: Configuring the Source RPM,  Next: Configuring the Debian DSC,  Prev: Configuring the Debian DEB,  Up: Configuration

6.2.3 Configuring the Source RPM
--------------------------------

When building from the source RPM (*note Building from the Source RPM::), the
rebuild process uses a number of macros from the user's `.rpmmacros' file as
described in *Note rpm(8): (*manpages*)rpm(8).

Following is an example of the `~/.rpmmacros' file that I use for rebuilding
RPMS:

     #
     # RPM macros for building rpms
     #

     %_topdir /usr/src/openss7.rpms

     %vendor OpenSS7 Corporation
     %distribution OpenSS7
     %disturl http://www.openss7.org/
     %packager Brian Bidulock <bidulock@openss7.org>
     %url http://www.openss7.org/

     %_signature gpg
     %_gpg_path /home/brian/.gnupg
     %_gpg_name openss7@openss7.org
     %_gpgbin /usr/bin/gpg

     %_source_payload w9.bzdio
     %_binary_payload w9.bzdio

     %_unpackaged_files_terminate_build 1
     %_missing_doc_files_terminate_build 1
     %_enable_debug_packages 1

     #
     # Template for debug information sub-package.
     # with our little addition of release
     #
     %debug_package \
     %ifnarch noarch\
     %global __debug_package 1\
     %package debug\
     Summary: Debug information for package %{name}\
     Group: Development/Debug\
     AutoReqProv: 0\
     %{?fullrelease:Release: %{fullrelease}}\
     %description debug\
     This package provides debug information for package %{name}.\
     Debug information is useful when developing applications that use this\
     package or when debugging this package.\
     %files debug -f debugfiles.list\
     %defattr(-,root,root)\
     %endif\
     %{nil}

When building from the source RPM (*note Building from the Source RPM::), it is
possible to pass a number of additional configuration options to the `rpmbuild'
process.

The additional configuration options are described below.

Note that distributions that use older versions of rpm do not have the `--with'
or `--without' options defined.  To acheive the same effect as:
     --with someparm=somearg
do:
     --define "_with_someparm --with-someparm=somearg"

`--define "_kversion $PACKAGE_KVERSION"'
     Specifies the kernel version other than the running kernel for which to
     build.  If `_kversion' is not defined when rebuilding, the environment
     variable PACKAGE_KVERSION is used.  If the environment variable
     PACKAGE_KVERSION is not defined, then the version of the running kernel
     (i.e. discovered with `uname -r') is used as the target version for
     kernel-dependent packages.  This option can also be defined in an
     `.rpmspec' file using the macro name `_kversion'.

`--with checks'
`--without checks'
     Enable or disable preinstall checks.  Each packages supports a number of
     preinstall checks that can be performed by invoking the `check' target with
     `make'.  These currently consist of checking each kernel module for
     unresolved kernel symbols, checking for documentation for exported kernel
     module symbols, checking for documentation for exported library symbols,
     checking for standard options for build and installable programs, checking
     for documentation for built and installable programs.  Normally these
     checks are only run in maintainer mode, but can be enabled and disabled
     with this option.

`--with k-optimize=HOW'
`--without k-optimize'
     Specify `HOW' optimization, NORMAL, SIZE, SPEED or QUICK.  SIZE compiles
     kernel modules `-Os', SPEED compiles kernel modules `-O3', and QUICK
     compiles kernel modules `-O0'.  The default is NORMAL.  Use with care.

`--with cooked-manpages'
`--without cooked-manpages'
     Some systems do not like `grefer' references in manpages.(1)  This option
     will cook `soelim', `refer', `tbl' and `pic' commands from the manpages
     and also strip `groff' comments.  The default is to leave manpages
     uncooked: they are actually smaller that way.

`--with public'
`--without public'
     Release public packages or private packages.  This option has no effect on
     the `streams' package.  The default is to release public packages.

`--with k-debug'
`--without k-debug'
     Specifies whether kernel debugging is to be performed on the build kernel
     modules.  Mutually exclusive with `test' and `safe' below.  This has the
     effect of removing static and inline attributes from functions and invoking
     all debugging macros in the code.  The default is to not perform kernel
     debugging.

`--with k-test'
`--without k-test'
     Specifies whether kernel testing is to be performed.  Mutually exclusive
     with `debug' above and `safe' below.  This has the effect of removing
     static and inline attributes from functions and invoking most debugging
     macros in the code.  The default is to not perform kernel testing.

`--with k-safe'
`--without k-safe'
     Specifies whether kernel saftey is to be performed.  Mutually exclusive
     with `debug' and `test' above.  This has the effect of invoking some more
     pedantic assertion macros in the code.  The default is not to apply kernel
     safety.

`--with k-inline'
`--without k-inline'
     Specifies whether kernel `inline' functions are to be place inline.  This
     has the effect of adding the `-finline-functions' flag to CFLAGS for
     compiling kernel modules.  Linux 2.4 kernels are normally compiled `-O2'
     which does not respect the `inline' directive.  This compiles kernel
     modules with `-finline-functions' to get closer to `-O3' optimization.
     For better optimization controls, *Note Configuring the Tar Ball::.

`--with k-modversions'
`--without k-modversions'
     Specifies whether kernel symbol versioning is to be applied to symbols
     exported by package kernel modules.  The default is to version exported
     module symbols.  This package does not export symbols so this option has
     no effect.

`--with devfs'
`--without devfs'
     Specifies whether the build is for a device filesystem daemon enabled
     system with autoloading, or not.  The default is to build for devfsd
     autoloading when CONFIG_DEVFS_FS is defined in the target kernel.  The
     `reuild' target uses this option to signal to the RPM spec file that the
     `dev' subpackage need not be built.  This option does not appear when the
     package has no devices.

`--with devel'
`--without devel'
     Specifies whether to build development environment packages such as those
     that include header files, static libraries, manual pages and texinfo
     documentation.  The default is to build development environment packages.
     This option can be useful when building for an embedded target where only
     the runtime components are desired.

`--with tools'
`--without tools'
     Specifies whether user space packages are to be built.  The default is to
     build user space packages.  This option can be useful when rebuilding for
     multiple architectures and target kernels.  The `rebuild' automake target
     uses this feature when rebuilding for all available architectures and
     kernels, to rebuild user packages once per architecture instead of once
     per kernel.

`--with modules'
`--without modules'
     Specifies whether kernel modules packages are to be built.  The default is
     to build kernel module packages.  This option can be useful when
     rebuilding for multiple architectures and target kernels.  The `rebuild'
     automake target uses this feature to rebuild for all available
     architectures and kernels.


In addition, the following `rpm' options, specific to the Linux Fast-STREAMS
package are available:

`--with streams-syncqs'
     When enabled, MP syncrhonization queues are enabled for SMP kernels.  This
     option defaults to `disabled'.  This option is not tested for early
     releases.

`--without streams-kthreads'
     When enabled, the STREAMS scheduler runs as a kernel thread.  When
     disabled, the STREAMS scheduler runs as a software interrupt (bottom half).
     Running the STREAMS scheduler at bottom half instead of a kernel thread
     breaks the `strinet' driver, which must be able to invoke kernel functions
     that might sleep (but don't).  This option defaults to `enabled'.

`--without streams-utils'
     I have experimented with putting the STREAMS utilities into their own
     package, `strutil', however, this is not complete yet.  This option
     defaults to `enabled'.  Do not disable this option.

`--without big-compile'
     When enabled, the STREAMS, the Stream head, and the clone driver are all
     compiled together in one big compilation unit.  This allows the compiler
     greater opportunity to optimize.  This option defaults to `enabled'.  Do
     not disable this option.

`--with module-sth'
     Enable `sth' (stream head) module linked into `streams' object.  The
     default is to create the module as a separate loadable kernel module,
     unless option `big-compile' is specified.  This option defaults to
     `disabled'.  This option defaults to `enabled' if `big-compile' is enabled.

`--with module-bufmod'
     Enable `bufmod' module linked into `streams' object.  The default is to
     create the module as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--with module-nullmod'
     Enable `nullmod' module linked into `streams' object.  The default is to
     create the module as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--with module-pipemod'
     Enable `pipemod' module linked into `streams' object.  The default is to
     create the module as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--with module-connld'
     Enable `connld' module linked into `streams' object.  The default is to
     create the module as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--with module-sc'
     Enable `sc' module linked into `streams' object.  The default is to create
     the module as a separate loadable kernel module.  This option defaults to
     `disabled'.

`--with module-testmod'
     Enable `testmod' module linked into `streams' object.  The default is to
     create the module as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--with driver-clone'
     Enable `clone' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module, unless option
     `big-compile' is specified.  This option defaults to `disabled'.  This
     option defaults to `enabled' if `big-compile' is enabled.

`--with driver-echo'
     Enable `echo' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--with driver-fifo'
     Enable `fifo' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--with driver-log'
     Enable `log' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--with driver-loop'
     Enable `loop' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--with driver-nsdev'
     Enable `nsdev' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--with driver-mux'
     Enable `mux' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--with driver-nuls'
     Enable `nuls' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--with driver-pipe'
     Enable `pipe' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--with driver-sad'
     Enable `sad' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--with driver-sfx'
     Enable `sfx' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--with driver-spx'
     Enable `spx' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--with streams-fifos'
     Enable override of system fifos with STREAMS-based fifos.  This option
     defaults to `disabled'.  This option is not tested.  Do not enable this
     option yet.

`--without streams-bcm'
     Disable STREAMS binary compatibility mode.  When enabled, exported
     functions (and callouts) will always pass three arguments in registers on
     architectures supporting `regparm' (i.e. __I386__, __X86_64__, __K8__)
     regardless of how the kernel was compiled.  This option defaults to
     `enabled'.


In general, the default values of these options are sufficient for most purposes
and no options need be provided when rebuilding the Source RPMs.

 Build
......

To build from the source RPM, *Note Building from the Source RPM::.

---------- Footnotes ----------

(1) In particular, some `Debian' systems do not load the `groff' extensions
package and do not have `grefer' installed.  Although this is an oversight on
the configuration of the particular `Debian' system, we accomodate such
misconfiguration with this feature.


File: STREAMS.info,  Node: Configuring the Debian DSC,  Next: Configuring the Tar Ball,  Prev: Configuring the Source RPM,  Up: Configuration

6.2.4 Configuring the Debian DSC
--------------------------------

The Debian DSC can be configured by passing options in the environment variable
BUILD_DEBOPTIONS.  The options placed in this variable take the same form as
those passed to the `configure' script, *Note Configuring the Tar Ball::.  For
an example, *Note Building from the Debian DSC::.

 Build
......

To build from the Debian DSC, *Note Building from the Debian DSC::.


File: STREAMS.info,  Node: Configuring the Tar Ball,  Prev: Configuring the Debian DSC,  Up: Configuration

6.2.5 Configuring the Tar Ball
------------------------------

All of the normal GNU `autoconf' configuration options and environment
variables apply.  Additional options and environment variables are provided to
tailor or customize the build and are described below.

* Menu:

* Configure Options::		Options to `configure'
* Environment Variables::	Environment variables to `configure'


File: STREAMS.info,  Node: Configure Options,  Next: Environment Variables,  Up: Configuring the Tar Ball

6.2.5.1 Configure Options
.........................

Following are the additional `configure' options, their meaning and use:

`--enable-checks'
`--disable-checks'
     Enable or disable preinstall checks.  Each packages supports a number of
     preinstall checks that can be performed by invoking the `check' target with
     `make'.  These currently consist of checking each kernel module for
     unresolved kernel symbols, checking for documentation for exported kernel
     module symbols, checking for documentation for exported library symbols,
     checking for standard options for build and installable programs, checking
     for documentation for built and installable programs.  Normally these
     checks are only run in maintainer mode, but can be enabled and disabled
     with this option.

`--disable-compress-manpages'
     Compress manpages with `gzip -9' or `bzip2 -9' or leave them uncompressed.
     The default is to compress manpages with `gzip -9' or `bzip2 -9' if a
     single compressed manpage exists in the target installation directory
     (`--mandir').  This disables automatic compression.

`--disable-public'
     Disable public release.  Has no effect on the `streams' release.  No
     private components exist in `streams' releases.

`--disable-initscripts'
     Disables the installation of init scripts.  The default is to configure
     and install init scripts and their associated configuration files.

`--disable-devel'
     Disables the installation of development environment components such as
     header files, static libraries, manual pages and texinfo documentation.
     The default is to install development environment components.  This option
     can be useful when configuring for an embedded target where only the
     runtime components are desired.

`--enable-tools'
     Specifies whether user space programs and libraries are to be built and
     installed.  The default is to build and install user space programs and
     libraries.  This option can be useful when rebuilding for multiple
     architectures and target kernels, particularly under rpm.  The `rebuild'
     target uses this feature when rebuilding RPMs for all available
     architectures and kernels, to rebuild user packages once per architecture
     instead of once per kernel.

`--enable-modules'
     Specifies whether kernel modules are to be built and installed.  The
     default is to build and install kernel modules.  This option can be useful
     when rebuilding for multiple architectures and target kernels,
     particularly under rpm.  The `rebuild' automake target uses this feature
     to rebuild for all available architectures and kernels.

`--enable-arch'
     Specifies whether architectural dependent package components are to be
     built and installed.  This option can be useful when rebuilding for
     multiple architectures and target kernels, particularly under dpkg.  The
     default is to configure, build and install architecture dependent package
     components.

`--enable-indep'
     Specifies whether architecture independent package components are to be
     built and installed.  This option can be useful when rebuilding for
     multiple architectures and target kernels, particularly under dpkg.  The
     default is to configure, build and install architecture independent
     package components.

`--enable-k-inline'
     Enable kernel inline functions.  Most Linux kernels build without
     `-finline-functions'.  This option adds the `-finline-functions' and
     `-Winline' flags to the compilation of kernel modules.  Use with care.

`--enable-k-safe'
     Enable kernel module run-time safety checks.  Specifies whether kernel
     safety is to be performed.  This option is mutually exclusive with
     `--enable-k-test' and `--enable-k-debug' below.  This has the effect of
     invoking some more pedantic assertion macros in the code.  The default is
     not to apply kernel safety.

`--enable-k-test'
     Enable kernel module run-teim testing.  Specifies whether kernel testing
     is to be performed.  This option is mutually exclusive with
     `--enable-k-safe' above and `--enable-k-debug' below.  This has the effect
     of remove `static' and `inline' attributes from functions and invoking most
     non-performance affecting debugging macros in the code.  The default is
     not to perform kernel testing.

`--enable-k-debug'
     Enable kernel module run-time debugging.  Specifies whether kernel
     debugging is to be performed.  This option is mutuallly exclusive with
     `--enable-k-safe' and `--enable-k-test' above.  This has the effect of
     removing `static' and `inline' attributes from functions and invoking all
     debuggin macros in the code (including performance-affecting debug
     macros).  The default is to not perform kernel debugging.

`--enable-devfs'
`--disable-devfs'
     Specifies whether the build is for a device filesystem daemon enabled
     system with autoloading, or not.  The default is to build for devfsd
     autoloading when CONFIG_DEVFS_FS is defined in the target kernel.  The
     `reuild' target uses this option to signal to the RPM spec file that the
     `dev' subpackage need not be built.  This option does not appear when the
     package has no devices.

`--with-gpg-user=GNUPGUSER'
     Specify the `gpg' `GNUPGUSER' for signing RPMs and tarballs.  The default
     is the content of the environment variable GNUPGUSER.  If unspecified, the
     `gpg' program will normally use the user name of the account invoking the
     `gpg' program.  For building source RPMs, the RPM macro `_gpg_name' will
     override this setting.

`--with-gpg-home=GNUPGHOME'
     Specify the `GNUPGHOME' directory for signing RPMs and tarballs.  The
     default is the user's `~/.gpg' directory.  For building source RPMs, the
     RPM macro `_gpg_path' will override this setting.

`--with-pkg-epoch=EPOCH'
     Specifies the epoch for the package.  This is neither used for RPM nor
     Debian packages, it applies to the tarball release as a whole.  The
     default is the contents of the `.pkgepoch' file in the source directory
     or, if that file does not exist, zero (0).

`--with-pkg-release=RELEASE'
     Specifies the release for the package.  This is neither used for RPM nor
     Debian packages, it applies to the tarball release as a whole.  The
     default is the contents of the `.pkgrelease' file in the source directory
     or, if that file does not exist, one (1).  This is the number after the
     last point in ther package version number.

`--with-pkg-distdir=DIR'
     Specifies the distribution directory for the package.  This is used by the
     maintainer for building distributions of tarballs.  This is the directory
     into which archives are copied for distribution.  The default is the top
     build directory.

`--with-cooked-manpages'
     Convert manual pages to remove macro dependencies and `grefer' references.
     Some systems do not like `grefer' references in manpages.(1) This option
     will cook `soelim', `refer', `tbl' and `pic' commands from the manpages
     and also strip `groff' comments.  The default is to leave manpages
     uncooked (they are actually smaller that way).

`--with-rpm-epoch=PACKAGE_EPOCH'
     Specify the `PACKAGE_EPOCH' for the RPM spec file.  The default is to use
     the RPM epoch conatined in the file `.rpmepoch'.

`--with-rpm-release=PACKAGE_RPMRELEASE'
     Specify the `PACKAGE_RPMRELEASE' for the RPM rspec file.  The default is to
     use the RPM release contained in the file `.rpmrelease'.

`--with-rpm-extra=PACKAGE_RPMEXTRA'
     Specify the `PACKAGE_RPMEXTRA' extra release information for the RPM spec
     file.  The default is to use the RPM extra release information contained
     in the file `.rpmextra'.  Otherwise, this value will be determined from
     automatic detection of the RPM distribution.

`--with-rpm-topdir=PACKAGE_RPMTOPDIR'
     Specify the `PACKAGE_RPMTOPDIR' top directory for RPMs.  If specified with
     a null `PACKAGE_RPMTOPDIR', the default directory for the RPM distribution
     will be used.  If this option is not provided on the command line, the top
     build directory will be used as the RPM top directory as well.

`--with-deb-epoch=EPOCH'
     Specify the `PACKAGE_DEBEPOCH' for the DEB control file.  The default is to
     use the DEB epoch contained int he file `.debepoch'.

`--with-deb-release=RELEASE'
     Specify the `PACKAGE_DEBRELEASE' for the DEB control file.  The default is
     to use the DEB release contained in the file `.debrelease'.

`--with-deb-topdir=DIR'
     Specify the `PACKAGE_DEBTOPDIR' top directory for DEBs.  If specified with
     a null `PACKAGE_DEBTOPDIR', the default directory for the DEB distribution
     will be used.  If this option is not provided on the command line, the top
     build directory will be used as the DEB top directory as well.

`--with-k-release=PACKAGE_KRELEASE'
     Specify the `PACKAGE_KRELEASE' release of the Linux kernel for which the
     build is targeted.  When not cross compiling, if this option is not set,
     the build will be targeted at the kernel running in the build environment
     (e.g., `uname -r').  When cross-compiling this option must be specified or
     the configure script will generate an error and terminate.

`--with-k-linkage=PACKAGE_KLINKAGE'
     Specify the `PACKAGE_KLINKAGE' for kernel module linkage.  This can be one
     of the following:
        * `loadable' - loadable kernel modules

        * `linkable' - linkable kernel objects
     The default is to build loadable kernel modules.

`--with-k-modules=K-MODULES-DIR'
     Specify the `K-MODULES-DIR' directory to which kernel modules will be
     installed.  The default is based on the option `--with-k-release',
     `--with-k-prefix' and `--with-k-rootdir'.  The default is
     `DESTDIR'/`K-MODULES-DIR' which is typically
     `DESTDIR/lib/modules/PACKAGE_KRELEASE/'.  This directory is normally
     located by the `configure' script and need only be provided for special
     cross-build environments or when requested by a `configure' script error
     message.

`--with-k-build=K-BUILD-DIR'
     Specify the `K-BUILD-DIR' base kernel build directory in which configured
     kernel source resides.  The default is `DESTDIR/K-MODULES-DIR/build'.
     This directory is normally located by the `configure' script and need only
     be provided for special cross-build environments or when requested by a
     `configure' script error message.

`--with-k-source=K-SOURCE-DIR'
     Specify the `K-SOURCE-DIR' base kernel build directory in which configured
     kernel source resides.  The default is `DESTDIR/K-MODULES-DIR/source'.
     This directory is normally located by the `configure' script and need only
     be provided for special cross-build environments or when requested by a
     `configure' script error message.

`--with-k-modver=K-MODVER-FILE'
     Specify the `K-MODVER-FILE' kernel module versions file.  The default is
     `K-BUILD-DIR/Module.symvers'.  This file is normally located by the
     `configure' script and need only be provided for special cross-build
     environments or when requested by a `configure' script error message.

`--with-k-sysmap=K-SYSMAP-FILE'
     Specify the `K-SYSMAP-FILE' kernel system map file.  The default is
     `K-BUILD-DIR/System.map'.  This file is normally located by the
     `configure' script and need only be provided for special cross-build
     environments or when requested by a `configure' script error message.

`--with-k-archdir=K-ARCHDIR'
     Specify the `K-ARCHDIR' kernel source architecture specific directory.  The
     default is `DESTDIR/K-SOURCE-DIR/arch'.  This directory is normally
     located by the `configure' script and need only be provided for special
     cross-build environments or when requested by a `configure' script error
     message.

`--with-k-machdir=K-MACHDIR'
     Specify the `K-MACHDIR' kernel source machine specific directory.  The
     default is `DESTDIR/K-SOURCE-DIR/TARGET_CPU'.  This directory is normally
     located by the `configure' script and need only be provided for special
     cross-build environments or when requested by a `configure' script error
     message.

`--with-k-config=K-CONFIG'
     Specify the `K-CONFIG' kernel configuration file.  The default is
     `BOOT/config-K-RELEASE'.  This configuration file is normally located by
     the `configure' script and need only be provided forspecial cross-build
     environments or when requested by a `configure' script error message.

`--with-k-optimize=HOW'
`--without-k-optimize'
     Specify `HOW' optimization, NORMAL, SIZE, SPEED or QUICK.  SIZE compiles
     kernel modules `-Os', SPEED compiles kernel modules `-O3', and QUICK
     compiles kernel modules `-O0'.  The default is NORMAL.  Use with care.

`--with-strconf-master=STRCONF_CONFIG'
     Specify the `STRCONF_CONFIG' file name to which the configuration master
     file is written.  The default is `Config.master'.

`--with-base-major=STRCONF_MAJBASE'
     Start numbering for major devices at `STRCONF_MAJBASE'.  The default is
     `230'.


In addition, the following `configure' options, specific to the Linux
Fast-STREAMS package are available:

`--enable-streams-syncqs'
     When enabled, MP syncrhonization queues are enabled for SMP kernels.  This
     option defaults to `disabled'.  This option is not tested for early
     releases.

`--disable-streams-kthreads'
     When enabled, the STREAMS scheduler runs as a kernel thread.  When
     disabled, the STREAMS scheduler runs as a software interrupt (bottom half).
     Running the STREAMS scheduler at bottom half instead of a kernel thread
     breaks the `strinet' driver, which must be able to invoke kernel functions
     that might sleep (but don't).  This option defaults to `enabled'.

`--disable-streams-utils'
     I have experimented with putting the STREAMS utilities into their own
     package, `strutil', however, this is not complete yet.  This option
     defaults to `enabled'.  Do not disable this option.

`--disable-big-compile'
     When enabled, the STREAMS, the Stream head, and the clone driver are all
     compiled together in one big compilation unit.  This allows the compiler
     greater opportunity to optimize.  This option defaults to `enabled'.  Do
     not disable this option.

`--enable-module-sth'
     Enable `sth' (stream head) module linked into `streams' object.  The
     default is to create the module as a separate loadable kernel module,
     unless option `big-compile' is specified.  This option defaults to
     `disabled'.  This option defaults to `enabled' if `big-compile' is enabled.

`--enable-module-bufmod'
     Enable `bufmod' module linked into `streams' object.  The default is to
     create the module as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--enable-module-nullmod'
     Enable `nullmod' module linked into `streams' object.  The default is to
     create the module as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--enable-module-pipemod'
     Enable `pipemod' module linked into `streams' object.  The default is to
     create the module as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--enable-module-connld'
     Enable `connld' module linked into `streams' object.  The default is to
     create the module as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--enable-module-sc'
     Enable `sc' module linked into `streams' object.  The default is to create
     the module as a separate loadable kernel module.  This option defaults to
     `disabled'.

`--enable-module-testmod'
     Enable `testmod' module linked into `streams' object.  The default is to
     create the module as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--enable-driver-clone'
     Enable `clone' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module, unless option
     `big-compile' is specified.  This option defaults to `disabled'.  This
     option defaults to `enabled' if `big-compile' is enabled.

`--enable-driver-echo'
     Enable `echo' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--enable-driver-fifo'
     Enable `fifo' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--enable-driver-log'
     Enable `log' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--enable-driver-loop'
     Enable `loop' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--enable-driver-nsdev'
     Enable `nsdev' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--enable-driver-mux'
     Enable `mux' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--enable-driver-nuls'
     Enable `nuls' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--enable-driver-pipe'
     Enable `pipe' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--enable-driver-sad'
     Enable `sad' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--enable-driver-sfx'
     Enable `sfx' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--enable-driver-spx'
     Enable `spx' driver linked into `streams' object.  The default is to
     create the driver as a separate loadable kernel module.  This option
     defaults to `disabled'.

`--enable-streams-fifos'
     Enable override of system fifos with STREAMS-based fifos.  This option
     defaults to `disabled'.  This option is not tested.  Do not enable this
     option yet.

`--disable-streams-bcm'
     Disable STREAMS binary compatibility mode.  When enabled, exported
     functions (and callouts) will always pass three arguments in registers on
     architectures supporting `regparm' (i.e. __I386__, __X86_64__, __K8__)
     regardless of how the kernel was compiled.  This option defaults to
     `enabled'.


---------- Footnotes ----------

(1) In particular, some `Debian' systems do not load the `groff' extensions
package and do not have `grefer' installed.  Although this is an oversight on
the configuration of the particular `Debian' system, we accomodate such
misconfiguration with this feature.


File: STREAMS.info,  Node: Environment Variables,  Prev: Configure Options,  Up: Configuring the Tar Ball

6.2.5.2 Environment Variables
.............................

Following are additional environment variables to `configure', their meaning
and use:

GPG
     GPG signature command.  This is used for signing distributions by the
     maintainer.  By default, `configure' will search for this tool.

GNUPGUSER
     GPG user name.  This is used for signing distributions by the maintainer.

GNUPGHOME
     GPG home directory.  This is used for signing distributions by the
     maintainer.

GPGPASSWD
     GPG password for signing.  This is used for signing distributions by the
     maintainer.  This environment variable is not maintained by the
     `configure' script and should only be used on an isolated system.

SOELIM
     Roff source elimination command.  This is only necessary when the option
     `--with-cooked-manpages' has been specified and `configure' cannot find
     the proper `soelim' command.  By default, `configure' will search for this
     tool.

REFER
     Roff references command.  This is only necessary when the option
     `--with-cooked-manpages' has been specified and `configure' cannot find
     the proper `refer' command.  By default, `configure' will search for this
     tool.

TBL
     Roff table command.  This is only necessary when the option
     `--with-cooked-manpages' has been specified and `configure' cannot find
     the proper `tbl' command.  By default, `configure' will search for this
     tool.

PIC
     Roff picture command.  This is only necessary when the option
     `--with-cooked-manpages' has been specified and `configure' cannot find
     the proper `pic' command.  By default, `configure' will search for this
     tool.

GZIP
     Default compression options provided to `GZIP_CMD'.

GZIP_CMD
     Manpages (and kernel modules) compression commands.  This is only
     necessary when the option `--without-compressed-manpages' has _not_ been
     specified and `configure' cannot find the proper `gzip' command.  By
     default, `configure' will search for this tool.

BZIP2
     Default compression options provided to `BZIP2_CMD'

BZIP2_CMD
     Manpages compression commands.  This is only necessary when the option
     `--without-compressed-manpages' has _not_ been specified and `configure'
     cannot find the proper `bzip2' command.  By default, `configure' will
     search for this tool.

MAKEWHATIS
     Manpages apropros database rebuild command.  By default, `configure' will
     search for this tool.  By default, `configure' will search for this tool.

CHKCONFIG
     Chkconfig command.  This was used for installation of init scripts.  All
     pacakges now come with `init_install' and `init_remove' scripts used to
     install and remove init scripts on both RPM and debian systems.

RPM
     Rpm command.  This is only necessary for RPM builds.  By default,
     `configure' will search for this tool.

RPMBUILD
     Build RPM command.  This is only necessary for RPM builds.  By default,
     `configure' will search for this tool.  `rpm' will be used instead of
     `rpmbuild' only if `rpmbuild' cannot be found.

DPKG
     Dpkg comand.  This command is used for building debian packages.  By
     default, `configure' will search for this tool.

DPKG_SOURCE
     Dpkg-source command.  This command is used for building debian dsc
     packages.  By default, `configure' will search for this tool.

DPKG_BUILDPACKAGE
     Dpkg-buildpackage command.  This command is used for building debian deb
     packages.  By default, `configure' will search for this tool.

DEB_BUILD_ARCH
     Debian build architecture.  This variable is used for building debian
     packages.  The default is the autoconf build architecutre.

DEB_BUILD_GNU_CPU
     Debian build cpu.  This variable is used for building debian packages.
     The default is the autoconf build cpu.

DEB_BUILD_GNU_SYSTEM
     Debian build os.  This variable is used for building debian packages.  The
     default is the autoconf build os.

DEB_BUILD_GNU_TYPE
     Debian build alias.  This variable is used for building debian packages.
     The default is the autoconf build alias.

DEB_HOST_ARCH
     Debian host architecture.  This variable is used for building debian
     packages.  The default is the autoconf host architecture.

DEB_HOST_GNU_CPU
     Debian host cpu.  This variable is used for building debian packages.  The
     default is the autoconf host cpu.

DEB_HOST_GNU_SYSTEM
     Debian host os.  This variable is used for building debian packages.  The
     default is the autoconf host os.

DEB_HOST_GNU_TYPE
     Debian host alias.  This variable is used for building debian packages.
     The default is the autoconf host alias.

LDCONFIG
     Configure loader command.  Command used to configure the loader when
     libraries are installed.  By default, `configure' will search for this
     tool.

DESTDIR
     Cross build root directory.  Specifies the root directory for build and
     installation.  For example, for `NexusWare' cross-builds, this is set to
     environment variable NEXUSWARE_PREFIX on configuration to point to the
     root of the cross-build tree for both configuration and installation.

DEPMOD
     Build kernel module dependencies command.  This is used during
     installation of kernel modules to a running kernel to rebuild the modules
     dependency database.  By default, `configure' will search for this tool.

MODPROBE
     Probe kernel module dependencies command.  This is used during
     installation of kernel modules to a running kernel to remove old modules.
     By default, `configure' will search for this tool.

LSMOD
     List kernel modules command.  This is used during installation of kernel
     modules to a running kernel to detect old modules for removal.  By default,
     `configure' will search for this tool.

LSOF
     List open files command.  This is used during installation of kernel
     modules to a running kernel to detect old modules for removal.  Processes
     owning the old kernel modules will be killed and the module removed.  If
     the process restarts, the new module will be demand loaded.  By default,
     `configure' will search for this tool.

GENKSYMS
     Generate kernel symbols command.  This is used for generating module symbol
     versions during build.  By default, `configure' will search for this tool.

KGENKSYMS
     Linux 2.6 generate kernel symbols command.  This is used for generating
     module symbol version during build.  By default, `configure' will search
     for this tool.

OBJDUMP
     Object dumping command.  This is used for listing information about object
     files.  By default, `configure' will search for this tool.

NM
     Object symbol listing command.  This is used for listing information about
     object files.  By default, `configure' will search for this tool.

MODPOST_CACHE
     Cache file for modpost.  The version of the `modpost.sh' script that ships
     with each package can cache information to a cache file to speed multiple
     builds.  This environment variable is used to specify a cache file.

AUTOM4TE
     Autom4te command.  This is the executable used by autotest for pre- and
     post-installation checks.  By default, `configure' will search for this
     tool.

AUTOTEST
     Autotest macro build command.  This is the executable used by autotest for
     pre- and post-installation checks.  By default, `configure' will search
     for this tool.

6.2.5.3 Build
.............

To build from the tar ball, *Note Building from the Tar Ball::.


File: STREAMS.info,  Node: Building,  Next: Installing,  Prev: Configuration,  Up: Installation

6.3 Building
============

* Menu:

* Building from the Source RPM::	the next best approach
* Building from the Debian DSC::	the next best approach for Debian
* Building from the Tar Ball::		last resort


File: STREAMS.info,  Node: Building from the Source RPM,  Next: Building from the Debian DSC,  Up: Building

6.3.1 Building from the Source RPM
----------------------------------

If you have downloaded the necessary source RPM (*note Downloading the Source
RPM::), then the following instructions will rebuild the binary RPMs on your
system.  Once the binary RPMs are rebuilt, you may install them as described
above (*note Installing the Binary RPM::).

The source RPM is rebuilt to binary RPMs as follows:

     % wget http://www.openss7.org/rpms/SRPMS/streams-0.7a.6.rc2-1.src.rpm
     % rpmbuild --rebuild -vv streams-0.7a.6.rc2-1.src.rpm

The rebuild process can also recognize a number of options that can be used to
tweak the resulting binaries, *Note Configuring the Source RPM::.  These options
are provided on the `rpm' command line.  For example:

     % rpmbuild --rebuild -vv --target athlon-redhat-linux \
       --define "_kversion 2.6.17-1.2139_FC5" \
       -- streams-0.7a.6.rc2-1.src.rpm

will rebuild binary RPM for the `2.6.17-1.2139_FC5' kernel for the `athlon'
architecture.  (1)

 Installation
.............

To install the resulting binary RPM, *Note Installing the Binary RPM::.

---------- Footnotes ----------

(1) Note that the `_kversion' of `2.6.17-1.2139_FC5' is only an example.


File: STREAMS.info,  Node: Building from the Debian DSC,  Next: Building from the Tar Ball,  Prev: Building from the Source RPM,  Up: Building

6.3.2 Building from the Debian DSC
----------------------------------

If you have downloaded the necessary Debian DSC (*note Downloading the Debian
DSC::), then the following instructions will rebuild the binary DEBs on your
system.  Once the binary DEBs are rebuilt, you may install them as described
above (*note Installing the Debian DEB::).

The Debian DSC is rebuilt to binary DEBs as follows:

     % wget http://www.openss7.org/debian/streams_0.7a.6.rc2-0.dsc
     % wget http://www.openss7.org/debian/streams_0.7a.6.rc2-0.tar.gz
     % dpkg-buildpackage -v streams_0.7a.6.rc2-0.dsc

The rebuild process can also recognize a number of options that can be used to
tweak the resulting binaries, *Note Configuring the Debian DSC::.  These options
are provided in the environment variable BUILD_DPKGOPTIONS and have the same
form as the options to `configure', *Note Configuring the Tar Ball::.  For
example:

     % BUILD_DEBOPTIONS='
             --with-k-release=2.6.17-1.2139_FC5
             --host=athlon-debian-linux-gnu'
       dpkg-buildpackage -v \
       streams_0.7a.6.rc2-0.dsc

will rebuild binary DEB for the `2.6.17-1.2139_FC5' kernel for the `athlon'
architecture.  (1)

 Installation
.............

To install the resulting binary DEB, *Note Installing the Debian DEB::.

---------- Footnotes ----------

(1) Note that the `_kversion' of `2.6.17-1.2139_FC5' is only an example.


File: STREAMS.info,  Node: Building from the Tar Ball,  Prev: Building from the Debian DSC,  Up: Building

6.3.3 Building from the Tar Ball
--------------------------------

If you have downloaded the tar ball (*note Downloading the Tar Ball::), then the
following instructions will rebuild the package on your system.  (Note that the
build process does not required `root' privilege.)

6.3.3.1 Native Build
....................

Folowing is an example of a native build against the running kernel:

     % wget http://www.openss7.org/streams-0.7a.6.rc2.tar.bz2
     % tar -xjvf streams-0.7a.6.rc2.tar.bz2
     % pushd streams-0.7a.6.rc2
     % ./configure
     % make
     % popd

6.3.3.2 Cross-Build
...................

Following is an example for a cross-build.  The kernel release version must
always be specified for a cross-build.(1)  If you are cross-building, specify
the root for the build with environment variable DESTDIR.  The cross-compile
host must also be specified if different from the build host.  Either the
compiler and other tools must be in the usual places where GNU `autoconf' can
find them, or they must be specified with declarations such as
`CC=/u5/NexusWare24/ppc-linux/gcc' on the `configure' command line.  Look in
the file `configure.nexusware' in the release package for an example.

     % wget http://www.openss7.org/streams-0.7a.6.rc2.tar.bz2
     % tar -xjvf streams-0.7a.6.rc2.tar.bz2
     % pushd streams-0.7a.6.rc2
     % ./configure DESTDIR="/some/other/root" \
     	--with-k-release=2.4.18 --host sparc-linux
     % make
     % popd

6.3.3.3 NexusWare Build
.......................

Additional support is provided for cross-building for the `Performance
Technologies Inc.' `NexusWare' embedded target for the CPC-384, CPC-388 and
CPC-396 cards.  A configuration script wrapper (`configure.nexusware') is
provided to simplify the cross-build operation for these targets.  The following
steps describe the process:

  1. Follow the normal `NexusWare' instructions for rebuilding a `generic'
     kernel and flash image as follows:  (Note that I keep my `NexusWare' build
     in `/u5/NexusWare24'.)

          % pushd /u5/NexusWare24
          % source SETUP.sh
          % make
          % popd

     For more recent `NexusWare' releases, the method for rebuilding a kernel
     is a little different as follows:

          % pushd /u5/NexusWare80
          % ./nexus 2.4
          % ./nexus 8260
          % ./nexus quick
          % . SETUP.sh
          % popd

  2. Next download, unpack (*note Downloading the Tar Ball::) and configure
     (*note Configuring the Tar Ball::) using the provided
     `configure.nexusware' wrapper for `configure'.  This wrapper simply tells
     the `configure' script where to find the `NexusWare' sources and which
     `NexusWare' cross-building tools to use for a cross-compile.(2)

     Any of the normal `configure' script options (*note Configuring the Tar
     Ball::) can be used on the same line as `./configure.nexusware'.  One of
     particular interest to embedded targets is `--with-k-optimize=size' to
     attempt to reduce the size of the kernel modules.

     You must specify the kernel version of the kernel for which you are
     configuring.  Add the -with-k-release=2.4.18 option for older `NexusWare'
     releases, -with-k-release=2.4.25 or -with-k-release=2.6.12 for more current
     `NexusWare' releases.

  3. Install as normal (*note Installing the Tar Ball::), however, for embedded
     targets the `install-strip' target should be used instead of the `install'
     target.  The `install-strip' target will strip unnecessary symbols from
     kernel modules and further reduce the size in the root file system flash
     image.


Following is what I use for configuration and installation: (My `NexusWare'
tree is rooted at `/u5/NexusWare'.)

     % pushd /u5/NexusWare80
     % ./nexus 2.4
     % ./nexus 8260
     % ./nexus quick
     % . SETUP.sh
     % popd
     % wget http://www.openss7.org/streams-0.7a.6.rc2.tar.bz2
     % tar -xjvf streams-0.7a.6.rc2.tar.bz2
     % pushd streams-0.7a.6.rc2
     % ./configure.nexusware --with-k-release=2.4.25 --with-k-optimize=size
     % make
     % make DESTDIR="$NEXUSWARE_PREFIX" install-strip
     % popd

Once built and installed in the `NexusWare' directory, you will have to
(currently) hand edit a `.spec' file to include the components you want in the
`NexusWare' root file system.  If you are cross-building for `NexusWare' you
should already know what that means.  Objects that you might be interested in
copying to the root file system are kernel modules that were installed in
`$NEXUSWARE_PREFIX/lib/modules/2.4.18/streams', libraries installed in
`$NEXUSWARE_PREFIX/usr/lib' and utility functions installed in
`$NEXUSWARE_PREFIX/usr/bin' and `$NEXUSWARE_PREFIX/usr/sbin' and test programs
in `$NEXUSWARE_PREFIX/usr/libexec'.  If you would prefer that these programs be
installed in `$NEXUSWARE_PREFIX/lib', `$NEXUSWARE_PREFIX/bin',
`$NEXUSWARE_PREFIX/sbin' and `$NEXUSWARE_PREFIX/libexec', (say because you want
to remote mount the `/usr' directory after boot), then specify the
`--exec-prefix=/' option to `./configure.nexusware'.

In addition, because `NexusWare' does not include an `/etc/modules.conf' file
by default, it will be necessary to add one or edit your `rc.4' file to
`insmod' the necessary `streams' modules at boot time.

Also, `NexusWare' does not configure its kernels for CONFIG_KMOD, so any kernel
modules must be loaded by the `rc.4' init script at boot.  On more recent
`NexusWare' releases, the init scripts will be installed in
`$NEXUSWARE_PREFIX/etc/rc.d/init.d/' but you must manually edit your `rc.4'
script to invoke these scripts.

Once you have completed the necessary `.spec' and `rc.4' file entries, you need
to rebuild the `generic' kernel flash image once more for these objects to be
included in the flash file system.  It is important that this second build of
the kernel image be the same as the first.

When modifying and rebuilding a `NexusWare' kernel, it will be necessary to
rebuild and install `streams'.  Simply perform the last `make install-strip'
stage or start again with `./configure.nexusware'.  You can place the unpacked
tarball in `$NEXUSWARE_PREFIX/usr/src/streams', and add the following to the
top-level `NexusWare' `Makefile' to make the build process a single step
process instead of dual pass:

     all:
     ...
             (cd kernels/generic; $(MAKE) depend)
             (cd usr/src/pcmcia-cs-3.2.1; $(MAKE) config)
             (cd kernels/generic; $(MAKE))
             (cd usr/src/pcmcia-cs-3.2.1; $(MAKE) pti)
             (cd usr/src/pti; $(MAKE))
             (cd drivers; $(MAKE))
             (cd utility; $(MAKE))
     #       uncomment for streams build
     #       (cd usr/src/streams; ./configure.nexusware; $(MAKE) install-strip)
             (cd build/generic; $(MAKE))
     ...

Another, perhaps simpler approach, is to make the necessary edits to the
`NexusWare' top-level `Makefile' and `.spec' and `rc.4' files, download and
unpack the tar ball into the `NexusWare' directory, and build the `NexusWare'
flash image as normal:

     % wget http://www.openss7.org/streams-0.7a.6.rc2.tar.bz2
     % pushd /u5/NexusWare24
     % source SETUP.sh
     % pushd usr/src
     % tar -xjvf ${DIRSTACK[2]}/streams-0.7a.6.rc2.tar.bz2
     % ln -sf streams-0.7a.6.rc2 streams
     % popd
     % make
     % popd

The situation is a little more complex for recent `NexusWare' releases.

---------- Footnotes ----------

(1) Because it _is_ a cross-build, the kernel version on the build machine is
unlikely to be the kernel version of the target machine, except by coincidence.

(2) Although I have not tried it, because we use GNU `autoconf' for
configuration, these instructions should work equally well for the Solaris
`NexusWare' cross-building environment as it does for the Linux `NexusWare'
cross-building environment.


File: STREAMS.info,  Node: Installing,  Next: Removing,  Prev: Building,  Up: Installation

6.4 Installing
==============

* Menu:

* Installing the Binary RPM::		the easiest approach
* Installing the Debian DEB::		the easiest approach for Debian
* Installing the Tar Ball::		last resort


File: STREAMS.info,  Node: Installing the Binary RPM,  Next: Installing the Debian DEB,  Up: Installing

6.4.1 Installing the Binary RPM
-------------------------------

If you have downloaded the necessary binary RPMs (*note Downloading the Binary
RPM::), or have rebuilt binary RPMs using the source RPM (*note Building from
the Source RPM::), then the following instructions will install the RPMs on your
system. For additional information on `rpm', see *Note rpm(8):
(*manpages*)rpm(8).

     % pushd RPMS/i686
     % rpm -ihv streams-*-0.7a.6.rc2-1.FC5.i686.rpm

You must have the correct binary RPMs downloaded or built for this to be
successful.

Some of the packages are relocatable and can have final installation directories
altered with the `--relocate' option to `rpm', see *Note rpm(8): (rpm(8))rpm.
The Manual Pages.  For example, the following will relocate the documentation
and info directories:

     % pushd RPMS/i686
     % rpm -ihv \
             --relocate '/usr/share/doc=/usr/local/share/doc' \
             --relocate '/usr/share/info=/usr/local/share/info' \
             -- streams-doc-0.7a.6.rc2-1.FC5.i686.rpm

The previous example will install the `streams-doc' package by will relocate
the documentation an info directory contents to the `/usr/local' version.


File: STREAMS.info,  Node: Installing the Debian DEB,  Next: Installing the Tar Ball,  Prev: Installing the Binary RPM,  Up: Installing

6.4.2 Installing the Debian DEB
-------------------------------

If you have downloaded the necessary Debian DEBs (*note Downloading the Debian
DEB::), or have rebuild binary DEBs using the Debian DSC (*note Building from
the Debian DSC::), then the following instructions will install the DEBs on your
system.  For additional information on `dpkg', see *Note dpkg(8):
(*manpages*)dpkg(8).

     % pushd debian
     % dpkg -iv streams-*_0.7a.6.rc2-0_*.deb

You must have the correct `.deb' files downloaded or build for this to be
successful.


File: STREAMS.info,  Node: Installing the Tar Ball,  Prev: Installing the Debian DEB,  Up: Installing

6.4.3 Installing the Tar Ball
-----------------------------

After the build process (*note Building from the Tar Ball::), installation only
requires execution of one of two `make' targets:

`make install'
     The `install' `make' target will install all the components of the
     package.  Root privilege is required to successfully invoke this target.

`make install-strip'
     The `install-strip' `make' target will install all the components of the
     package, but will strip unnecessary information out of the objects and
     compress manual pages.  Root privilege is required to successfully invoke
     this target.


File: STREAMS.info,  Node: Removing,  Next: Loading,  Prev: Installing,  Up: Installation

6.5 Removing
============

* Menu:

* Removing the Binary RPM::		the easiest approach
* Removing the Debian DEB::		the easiest approach for Debian
* Removing the Source RPM::		the next best approach
* Removing the Debian DSC::		the next best approach for Debian
* Removing the Tar Ball::		last resort


File: STREAMS.info,  Node: Removing the Binary RPM,  Next: Removing the Debian DEB,  Up: Removing

6.5.1 Removing the Binary RPM
-----------------------------

To remove an installed version of the binary RPMs (whether obtained from the
OpenSS7 binary RPM releases, or whether created by the source RPM), execute the
following command:

     % rpm -evv `rpm -qa | grep '^streams-'`

For more information on `rpm', see *Note rpm(8): (*manpages*)rpm(8).


File: STREAMS.info,  Node: Removing the Debian DEB,  Next: Removing the Source RPM,  Prev: Removing the Binary RPM,  Up: Removing

6.5.2 Removing the Debian DEB
-----------------------------

To remove and installed version of the debian DEB (whether obtained from the
OpenSS7 binary DEB releases, or whether created by the Debian DSC), execute the
following command:

     % dpkg -ev `dpkg -l | grep '^streams-'`

For more information on `dpkg', see *Note dpkg(8): (*manpages*)dpkg(8).


File: STREAMS.info,  Node: Removing the Source RPM,  Next: Removing the Debian DSC,  Prev: Removing the Debian DEB,  Up: Removing

6.5.3 Removing the Source RPM
-----------------------------

To remove all the installed binary RPM build from the source RPM, see *Note
Removing the Binary RPM::.  Then simply remove the binary RPM package files and
source RPM file.  A command such as:

     % find / -name 'streams-*.rpm' -type f -print0 | xargs --null rm -f

should remove all `streams' RPMs from your system.


File: STREAMS.info,  Node: Removing the Debian DSC,  Next: Removing the Tar Ball,  Prev: Removing the Source RPM,  Up: Removing

6.5.4 Removing the Debian DSC
-----------------------------

To remove all the installed binary DEB build from the Debian DSC, see *Note
Removing the Debian DEB::.  Then simply remove the binary DEB package files and
Debian DSC file.  A command such as:

     % find / \( -name 'streams-*.deb' \
              -o -name 'streams-*.dsc' \
              -o -name 'streams-*.tar.* \
              \) -type f -print0 | xargs --null rm -f

should remove all `streams' DEBs, DSCs and TARs from your system.


File: STREAMS.info,  Node: Removing the Tar Ball,  Prev: Removing the Debian DSC,  Up: Removing

6.5.5 Removing the Tar Ball
---------------------------

To remove a version installed from tar ball, change to the build directory where
the package was built and use the `uninstall' `make' target as follows:

     % cd /usr/src/streams
     % make uninstall
     % cd ..
     % rm -fr streams-0.7a.6.rc2
     % rm -f streams-0.7a.6.rc2.tar.gz
     % rm -f streams-0.7a.6.rc2.tar.bz2

If you have inadvertently removed the build directory and, therefore, no longer
have a configured directory from which to execute `make uninstall', then
perform all of the steps for configuration and installation (*note Installing
the Tar Ball::) except the final installation and then perform the steps above.


File: STREAMS.info,  Node: Loading,  Next: Maintenance,  Prev: Removing,  Up: Installation

6.6 Loading
===========

6.6.1 Normal Module Loading
---------------------------

When `streams' installs, modules and drivers are normally configured for demand
loading.  The `install' and `install-strip' `make' targets will make the
necessary changes to the `/etc/modules.conf' file and place the modules in an
appropriate place in `/lib/modules/2.6.17-1.2139_FC5/streams'.  The `make
install' process should have copied the kernel module files `streams-*.o' to
the directory `/lib/modules/2.6.17-1.2139_FC5/streams'.  This means that to
load any of these modules, you can simply execute, for example, `modprobe
stream-SOMEDRIVER'.(1)

6.6.1.1 Linux STREAMS Module Loading
....................................

The `streams' demand load system supports both the old kerneld and the new kmod
mechanisms for demand loading kernel modules.

The convention for `streams' kernel loadable object files is:
   * Their name start with "streams-".

   * They are placed in `/lib/modules/2.6.17-1.2139_FC5/streams/', where
     `2.6.17-1.2139_FC5' is an example kernel version.  

If your kernel has been built using the `kerneld' daemon, then `streams' kernel
modules will automatically load as soon as the STREAMS module is pushed or the
driver is opened.  The `make install' process makes the necessary changes to the
`/etc/modules.conf' file.  After the install, you will see lines like the
following added to your `/etc/modules.conf' file:

     prune modules.streams
     if -f /lib/modules/`uname -r`/modules.streams
     include /lib/modules/`uname -r`/modules.streams
     endif

which will provide for demand loading of the modules if they have been built and
installed for the running kernel.  The `/lib/modules/``uname
-r`'/modules.streams' file looks like this:

     alias char-major-245  streams-SOME_DRIVER
     alias char-major-246  streams-OTHER_DRIVER

Note that STREAMS modules are not listed in this file, but will be loaded by
name using `kerneld' if available.

6.6.1.2 Linux Fast-STREAMS Module Loading
.........................................

`Linux Fast-STREAMS' has a wider range of kernel module loading mechanisms than
is provided by `LiS'.  For mechanisms used for kernel module loading under
`Linux Fast-STREAMS', *Note About This Manual: (STREAMS)Top.

6.6.2 NexusWare Module Loading
------------------------------

Under exceptional circumstances, such as a `NexusWare' build, it is necessary
to hand-edit a `.spec' and `rc.4' file to load the modules at boot time.(2)

---------- Footnotes ----------

(1) Note that the `_kversion' of `2.6.17-1.2139_FC5' is only an example.

(2) At some time I expect to create an `install-nexusware' target that will
make the necessary modifications to the `.spec' and `rc.4' files automatically.


File: STREAMS.info,  Node: Maintenance,  Prev: Loading,  Up: Installation

6.7 Maintenance
===============

* Menu:

* Makefile Targets::


File: STREAMS.info,  Node: Makefile Targets,  Up: Maintenance

6.7.1 Makefile Targets
----------------------

Automake has many targets, not all of which are obvious to the casual user.  In
addition, `OpenSS7' automake files have additional rules added to make
maintaining and releasing a package somewhat easier.  This list of targets
provides some help with what targets can be invoked, what they do, and what
they hope to acheive.  The available targets are as follows:

* Menu:

* User Targets::
* Maintainer Targets::
* Clean Targets::
* Release Targets::
* Logging Targets::
* Problem Report Targets::
* Release Archive Targets::
* RPM Build Targets::
* Debian Build Targets::


File: STREAMS.info,  Node: User Targets,  Next: Maintainer Targets,  Up: Makefile Targets

6.7.1.1 User Targets
....................

The following are normal targets intended to be invoked by installers of the
package.  They are concerned with compiling, checking the compile, installing,
checking the installation, and uninstalling the package.

`[all]'
     This is also the default target.  It compiles the package.  This is
     performed after configuring the source with `configure'.  A makefile stub
     is provided so that if the package has not had autoreconf run (such as
     when checked out from CVS, the package will attempt to run `autoreconf
     -fiv'.

     All `OpenSS7 Project' packages are configured without maintainer mode and
     without dependency tracking by default.  This speed compilation of the
     package for one-time builds.  This also means that if you are developing
     using the source package (edit-compile-test-cycle), changes made to source
     files will not cause the automatic rebuilding due to dependencies.  There
     are two ways to enable dependency tracking: specify
     `--enable-maintainer-mode' to `configure'; or, specify
     `--enable-dependency-tracking' to `configure'.  I use the former during my
     edit-compile-test cycle.

     This is a standard `GNU' `automake' makefile target.  This target does not
     require root privilege.

`check'
     All `OpenSS7 Project' packages provide check scripts for the check target.
     This step is performed after compiling the package and will run all of
     the check programs against the compiled binaries.  Which checks are
     performed depends on whether `--enable-maintainer-mode' was specified to
     configure.  If in maintainer mode, checks that assist with the release of
     the package will be run (such as checking that all manual pages load
     properly and that they have required sections.)  We recommend running the
     check stage before installing, because it catches problems that might keep
     the installed package from functioning properly.

     Another way to enable the greater set of checks, without invoking
     maintainer mode, is to specify `--enable-checks' to `configure'.

     This is a standard `GNU' `automake' makefile target, although the
     functions performed are customized for the `OpenSS7 Project'.  This target
     does not require root privilege.

`install'
`install-strip'
     The `install' target installs the package.  This target also performs some
     actions similar to the pre- and post-install scripts used by packaging
     tools such as `rpm' or `dpkg'.  The `install-strip' target strips
     unnecessary symbols from executables and kernel modules before installing.

     This is a standard `GNU' `automake' makefile target.  This target requires
     root privilege.

`installcheck'
     All `OpenSS7 Project' packages provide test scripts for the `installcheck'
     target.  Test scripts are created and run using autotest (part of the
     autoconf package).  Which test suites are run and how extensive they are
     depends on whether `--enable-maintainer-mode' was specified to
     `configure'.  When in maintainer mode, all test suites will be run.  When
     not in maintainer mode, only a few post-install checks will be performed,
     but the test suites themselves will be installed in
     `/usr/libexec/streams'(1) for later use.

     This is a standard `GNU' `automake' makefile target.  This target might
     require root privilege.  Tests requiring root privilege will be skipped
     when run as a regular user.  Tests requiring regular account privileges
     will be skipped when run as root.

`retest'
     To complement the `installcheck' target above, all `OpenSS7 Project'
     packages provide the `retest' target as a means to rerun failed
     conformance testsuite test cases.  The retest target is provided because
     some test cases in the testsuites have delicate timing considerations that
     allow them to fail sporadically.  Invoking this target will retest the
     failed cases until no cases that are not expected failures remain.

     This is an `OpenSS7 Project' specific makefile target.  As with
     `installcheck', this target might require root privilege.  Tests requiring
     root privilege will be skpped when run as a regular user.  Tests requiring
     regular account privileges will be skipped when run as root.

`uninstall'
     This target will reverse the steps taken to install the package.  This
     target also performs pre- and post- erase scripts used by packaging tools
     such as `rpm' or `dpkg'.  You need to have a configured build directory
     from which to execute this target, however, you do not need to have
     compiled any of the files in that build directory.(2)

     This is a standard `GNU' `automake' makefile target.  This target requires
     root privilege.

`remove'
     This target is like `uninstall' with the exception that it uninstalls in
     the reverse order that installation was performed.(3)

     This is an `OpenSS7 Project' specific makefile target.

---------- Footnotes ----------

(1) `/usr/libexec/streams' is just an example, the actual location is
`${libexecdir}/${PACKAGE}', which varies from distribution to distribution (as
some distributions such as Mandriva do not have a libexec directory).

(2) Therefore, it is possible to download the package, configure it, and then
uninstall it.  This is handy if you do not have the sources used to build and
install the package immediately available.

(3) This is useful from the `OpenSS7 Master Package'.


File: STREAMS.info,  Node: Maintainer Targets,  Next: Clean Targets,  Prev: User Targets,  Up: Makefile Targets

6.7.1.2 Maintainer Targets
..........................

The following targets are targets intended for use by maintainers of the
package, or those responsible for rerelease and packaging of a derivative work
of the package.  Some of these targets are only effective when maintainer mode
has been invoked (`--enable-maintainer-mode' specified to `configure'.)

`dist'
     Creates a distribution package (tarball) in the top level build directory.
     `OpenSS7 Project' packages distribute two archives: a `gzip tar' archive
     and a `bzip tar' archive.  These archives will have the name
     `streams-0.7a.6.rc2.tar.gz' and `streams-0.7a.6.rc2.tar.bz2'.

     This is a standard `GNU' `automake' makefile target.  This target does not
     require root privilege.

`distcheck'
     This target is intended for use when releasing the package.  It creates
     the `tar' archives above and then unpacks the tarball in a source
     directory, configures in a separate build directory, compiles the package,
     installs the package in a separate install directory, tests the install
     package to ensure that some components work, and, finally, uses the
     unpacked source tree to build another tarball.  If you have added or
     removed files from the package, this is a good way to ensure that
     everything is still stable for release.

     This is a standard `GNU' `automake' makefile target.  This target does not
     require root privilege.


File: STREAMS.info,  Node: Clean Targets,  Next: Release Targets,  Prev: Maintainer Targets,  Up: Makefile Targets

6.7.1.3 Clean Targets
.....................

`mostlyclean'
     Cleans out most of the files from the compile stage.  This target is
     helpful if you have not enabled dependency tracking and need to recompile
     with changes.

     This is a standard `GNU' `automake' makefile target.  This target does not
     require root privilege.

`clean'
     Cleans all the files from the build directory generated during the `make
     [all]' phase.  It does not, however, remove files from the directory left
     there from the `configure' run.  Use the `distclean' target to remove
     those too.

     This is a standard `GNU' `automake' makefile target.  This target might
     require root privilege if the `installcheck' target or the `testsuite' was
     invoked with root privilege (leaving files belonging to root).

`distclean'
     This target cleans out the directories left behind by `distcheck' and
     removes all the `configure' and generated files from the build directory.
     This will effectively remove all the files in the build directory, with
     the except of files that belong to you or some other process.

     This is a standard `GNU' `automake' makefile target.  This target might
     require root privilege if the `installcheck' target or the `testsuite' was
     invoked with root privilege (leaving files belonging to root).

`maintainer-clean'
     This target not only removes files from the build directory, it removes
     generated files from the source directory as well.  Care should be taken
     when invoking this target, because it removes files generated by the
     maintainer and distributed with the archive that might require special
     tools to regenerate.  These special tools might only be available to the
     maintainer (but they aren't).  It also means that you probably need a full
     blown Linux system to rebuild the package.

     This is a standard `GNU' `automake' makefile target.  This target might
     require root privilege if the `installcheck' target or the `testsuite' was
     invoked with root privilege (leaving files belonging to root).

`check-clean'
     This target removes log files left behind by the `check' target.  By
     default, the check scripts append to log files in the top level build
     directory.  This target can be used to clean out those log files before
     the next run.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.


File: STREAMS.info,  Node: Release Targets,  Next: Logging Targets,  Prev: Clean Targets,  Up: Makefile Targets

6.7.1.4 Release Targets
.......................

The following are targets used to generate complete releases into the package
distribution directory.  These are good for unattended and NFS builds, which is
what I use them for.  Also, when building from atop multiple packages, these
targets also recurse down through each package.

`release'
     Build all of the things necessary to generate a release.  On an `rpm'
     system this is the distribution archives, the source rpm, and the
     architecture dependent and architecture independent binary rpms.  All
     items are placed in the package distribution directory that can be
     specified with the `--with-pkg-distdir=DIR' option to `configure'.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.

`forced-release'
     The `release' target will not regenerate any files that already exist in
     the package distribution directory.  This forced target will.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.

`release-sign'
     You will be prompted for a password, unless to specify it to make with the
     GNUPGPASS variable.  For unattended or non-interactive builds with
     signing, you can do that as: `make GNUPGPASS=mypasswd release-sign'

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.

`forced-release-sign'
     The `release-sign' target will not regenerate any files that already exist
     in the package distribution directory.  This forced target will.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.

`release-clean'
     This target will remove all distribution files for the current package
     from the package distribution directory.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.


File: STREAMS.info,  Node: Logging Targets,  Next: Problem Report Targets,  Prev: Release Targets,  Up: Makefile Targets

6.7.1.5 Logging Targets
.......................

For convenience, to log the output of a number of targets to a file, log
targets are defined.  The log file itself is used as the target to make, but
make invokes the target minus a `.log' suffix.  So, for example, to log the
results of target `foo', invoke the target `foo.log'.  The only target that
this does not apply to is `compile.log'.  When you invoke the target
`compile.log' a simple `make' is invoked and logged to the file `compile.log'.
The `foo.log' rule applies to all other targets.  This does not work for all
targets, just a selected few.(1) Following are the logging targets:

 Common Logging Targets
.......................

Common logging targets correspond to normal user `automake' makefile targets as
follows:

`compile.log'
     This is an `OpenSS7 Project' specific makefile target, but it invokes the
     standard `GNU' `automake' makefile target `[all]'.

`check.log'
     This is an `OpenSS7 Project' specific makefile target, but it invokes the
     standard `GNU' `automake' makefile target `check'.

`install.log'
     This is an `OpenSS7 Project' specific makefile target, but it invokes the
     standard `GNU' `automake' makefile target `install'.

`installcheck.log'
     This is an `OpenSS7 Project' specific makefile target, but it invokes the
     standard `GNU' `automake' makefile target `installcheck'.

`uninstall.log'
     This is an `OpenSS7 Project' specific makefile target, but it invokes the
     standard `GNU' `automake' makefile target `uninstall'.

`remove.log'
     This is an `OpenSS7 Project' specific makefile target, that invokes the
     `OpenSS7 Project' `remove' target.

 Maintainer Logging Targets
...........................

Maintainer logging targets correspond to maintainer mode `automake' makefile
targets as follows:

`dist.log'
     This is an `OpenSS7 Project' specific makefile target, but it invokes the
     standard `GNU' `automake' makefile target `dist'.

`distcheck.log'
     This is an `OpenSS7 Project' specific makefile target, but it invokes the
     standard `GNU' `automake' makefile target `distcheck'.

`srpm.log'
     This is an `OpenSS7 Project' specific makefile target, that invokes the
     `OpenSS7 Project' `remove' target.

`rebuild.log'
     This is an `OpenSS7 Project' specific makefile target, that invokes the
     `OpenSS7 Project' `remove' target.

`resign.log'
     This is an `OpenSS7 Project' specific makefile target, that invokes the
     `OpenSS7 Project' `remove' target.

`release.log'
     This is an `OpenSS7 Project' specific makefile target, that invokes the
     `OpenSS7 Project' `remove' target.

`release-sign.log'
     This is an `OpenSS7 Project' specific makefile target, that invokes the
     `OpenSS7 Project' `remove' target.

If you want to add one, simply add it to LOGGING_TARGETS in `Makefile.am'.

---------- Footnotes ----------

(1) Note that because logging targets invoke a pipe, `make' does not return the
correct return status (always returns success if the `tee' operation is
successful).  Therefore, these targets should not be invoked by scripts that
need to use the return value from `make'.


File: STREAMS.info,  Node: Problem Report Targets,  Next: Release Archive Targets,  Prev: Logging Targets,  Up: Makefile Targets

6.7.1.6 Problem Report Targets
..............................

To ease problem report generation, all logging targets will automatically
generate a problem report suitable for mailing in the file `target.pr' for
target `target.log'.  This problem report file is in the form of an email and
can be sent using the included `send-pr' script or by invoking the `send-pr'
makefile target.

There are two additional problem report targets:

`pr'
     The `pr' target is for independently generating a problem report outside
     of the build or installation process.  The target will automatically
     generate a problem report skeleton suitable for editting and mailing in
     the file `problem.pr'.  This problem report file is in the form of an
     email and can be editted and sent directly, or sent using the included
     `send-pr' script or by invoking the `send-pr' target.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.

`send-pr'
     The `send-pr' target is for finalizing and mailing a problem report
     generated either inside or outside the build and installation process.
     The target will automatically finalize and mail the `problem.pr' problem
     report if it has changed since the last time that `send-pr' was invoked.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege (unless the problem report file was generated
     as root).


File: STREAMS.info,  Node: Release Archive Targets,  Next: RPM Build Targets,  Prev: Problem Report Targets,  Up: Makefile Targets

6.7.1.7 Release Archive Targets
...............................

The following targets are used to generate and clean distribution archive and
signature files.  Whereas the `dist' target affects archives in the top build
directory, the `release-archive' targets affects archives in the package
distribution directory (either the top build directory or that specified with
`--with-pkg-distdir=DIR' to `configure').

You can change the directory to which packages are distributed by using the
`--with-pkg-distdir=DIR' option to `configure'.  The default directory is the
top build directory.

`release-archives'
     This target creates the distribution archive files if they have not
     already been created.  This not only runs the `dist' target, but also
     copies the files to the distribution directory, which, by default is the
     top build directory.

     The files generated are named:

     `streams-0.7a.6.rc2.tar.gz' and `streams-0.7a.6.rc2.tar.bz2'

     You can change this distribution directory with the `--with-pkg-distdir'
     option to `configure'.  See `./configure --help' for more details on
     options.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.

`release-sign-archives'
     This target is like `release-archives', except that it also signs the
     archives using a `GPG' detached signature.  You will be prompted for a
     password unless you pass the GNUPGPASS variable to make.  For automated or
     unattended builds, pass the GNUPGPASS variable like so:

     `make GNUPGPASS=mypasswd release-sign-archives'

     Signature files will be named:

     `streams-0.7a.6.rc2.tar.gz.asc' and `streams-0.7a.6.rc2.tar.bz2.asc'

     These files will be moved to the package distribution directory with the
     plaintext archives.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.

`release-clean-archives'
     This target will clean the release archives and signature files from the
     package distribution directory.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.


File: STREAMS.info,  Node: RPM Build Targets,  Next: Debian Build Targets,  Prev: Release Archive Targets,  Up: Makefile Targets

6.7.1.8 RPM Build Targets
.........................

On `rpm' systems, or systems sporting rpm packaging tools, the following
targets are used to generate `rpm' release packages.  The epoch and release
number can be controlled by the contents of the `.rpmepoch' and `.rpmrelease'
files, or with the `--with-rpm-epoch=EPOCH' and `--with-rpm-release=RELEASE'
options to `configure'.  See `configure --help' for more information on
options.  We always use release number `1'.  You can use release numbers above
`1'.

`srpm'
     This target generates the source rpm for the package (without signing the
     source rpm).  The source rpm will be named: `streams-0.7a.6.rc2-1.srpm'.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.

`rpms'
     This target is responsible for generating all of the package binary rpms
     for the architecture.  The binary rpms will be named:

     `streams-*-0.7a.6.rc2-1.*.rpm'

     where the stars indicate the subpackage and the architecture.  Both the
     architecture specific subpackages (binary objects) and the architecture
     independent (`.noarch') subpackages will be built unless the the former
     was disabled with the option `--disable-arch', or the later with the
     option `--disable-indep', passed to `configure'.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.

`sign'
`srpm-sign'
     These two targets are the same.  When invoked, they will add a signature
     to the source rpm file, provided that the file does not already have a
     signature.  You will be prompted for a password if a signature is
     required.  Automated or unattended builds can be acheived by using the
     `emake' expect script, included in `${srcdir}/scripts/emake'.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.

`rebuild'
     This target accepts searches out a list of kernel names from the
     `${DESTDIR}/lib/modules' directory and builds rpms for those kernels and
     for each of a set of architectures given in the AM_RPMTARGETS variable to
     make.  This is convenience target for building a group of rpms on a given
     build machine.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.

`resign'
     This target will search out and sign, with a `GPG' signature, the source
     rpm, and all of the binary rpms for this package that can be found in the
     package distribution directory.  This target will prompt for a `GPG'
     password.  Automated or unattended builds can be acheived with the `emake'
     expect script loccated here: `${srcdir}/scripts/emake'.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.


File: STREAMS.info,  Node: Debian Build Targets,  Prev: RPM Build Targets,  Up: Makefile Targets

6.7.1.9 Debian Build Targets
............................

On debian systems, or systems sporting debian packaging tools, the following
targets are used to generate debian release packages.  The release number can
be controlled by the contents of the `.debrelease' file, or with the
`--with-debrelease=RELEASENUMBER' option to `configure'.  See `configure
--help' for more information on options.

`dsc'
     This target will build the debian source change package (`.dsc' file).  We
     use release number `0' so that the entire tarball is included in the `dsc'
     file.  You can use release number `1' for the same purposes.  Release
     numbers above `1' will not include the entire tarball.  The `.dsc' file
     will be named: `streams_0.7a.6.rc2-0.dsc'.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.

`sigs'
     This target signs the `.deb' files.  You will be prompted for a password,
     unless to specify it to make with the GNUPGPASS variable.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.

`debs'
     This target will build the debian binary package (`.deb' file) from the
     `.dsc' created above.  (This target will also create the `.dsc' if it has
     not been created already.)  The subpackage `.deb' files will be named:
     `streams-*_0.7a.6.rc2-0_*.deb', where the stars indicate the subpackage
     and the architecture.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.

`csig'
     This target signs the `.dsc' file.  You will be prompted for a password,
     unless to specify it to make with the GNUPGPASS variable.

     This is an `OpenSS7 Project' specific makefile target.  This target does
     not require root privilege.


File: STREAMS.info,  Node: Troubleshooting,  Next: Copying,  Prev: Installation,  Up: Top

7 Troubleshooting
*****************

* Menu:

* Test Suites::			Test Suites for the package
* Problem Reports::		Problem Reports for the package
* Known Problems::		Known Problems with the package


File: STREAMS.info,  Node: Test Suites,  Next: Problem Reports,  Up: Troubleshooting

7.1 Test Suites
===============

* Menu:

* Pre-installation Checks::	Tests performed before installation.
* Post-installation Checks::	Tests performed after installation.


File: STREAMS.info,  Node: Pre-installation Checks,  Next: Post-installation Checks,  Up: Test Suites

7.1.1 Pre-installation Checks
-----------------------------

Most `OpenSS7' packages, including the `Linux Fast-STREAMS' package, ship with
pre-installation checks integral to the build system.  Pre-installation checks
include check scripts that are shipped in the `scripts' subdirectory as well as
specialized `make' targets that perform the checks.

When building and installing the package from "RPM" or "DEB" source packages
(*note Building from the Source RPM::; and *Note Building from the Debian
DSC::), a fundamental set of post-compile, pre-installation checks are
performed prior to building binary packages.  This is performed automagically
and does not require any special actions on the part of the user creating
binary packages from source packages.

When building and installing the package from "tarball" (*note Building from
the Tar Ball::; and *Note Installing the Tar Ball::), however, pre-installation
checks are only performed if specifically invoked by the builder of the
package.  Pre-installation checks are invoked after building the package and
before installing the package.  Pre-installation checks are performed by
invoking the `check' or `check.log' target to `make' when building the package,
as shown in *Note testsuite:ex0::.

     % wget http://www.openss7.org/streams-0.7a.6.rc2.tar.bz2
     % tar -xjvf streams-0.7a.6.rc2.tar.bz2
     % pushd streams-0.7a.6.rc2
     % ./configure
     % make
     % make check  # <------- invoke pre-installation checks
     % popd

Example 7.1: _Invoking Pre-Installation Checks_


Pre-installation checks fall into two categories: "System Checks" and
"Maintenance Checks".

7.1.1.1 Pre-Installation System Checks
......................................

"System Checks" are post-compilation checks that can be performed before
installing the package that check to ensure that the compiled objects function
and will be successfully installed.  When the `--enable-maintainer-mode' option
has not been passed to `configure', only "System Checks" will be performed.

For example, the steps shown in *Note testsuite:ex1:: will perform "System"
checks.

     % wget http://www.openss7.org/streams-0.7a.6.rc2.tar.bz2
     % tar -xjvf streams-0.7a.6.rc2.tar.bz2
     % pushd streams-0.7a.6.rc2
     % ./configure
     % make
     % make check  # <------ invokes System pre-installation checks
     % popd

Example 7.2: _Invoking System Checks_


7.1.1.2 Pre-Installation Maintenance Checks
...........................................

"Maintenance Checks" include all "System Checks", but also checks to ensure
that the kernel modules, applications programs, header files, development
tools, test programs, documentation, and manual pages conform to "OpenSS7"
standards.  When the `--enable-maintainer-mode' option has been passed to
`configure', "Maintenance Checks" will be performed.

For example, the steps shown in *Note testsuite:ex2:: will perform
"Maintenance" checks.

     % wget http://www.openss7.org/streams-0.7a.6.rc2.tar.bz2
     % tar -xjvf streams-0.7a.6.rc2.tar.bz2
     % pushd streams-0.7a.6.rc2
     % ./configure --enable-maintainer-mode
     % make
     % make check  # <------ invokes Maintenance pre-installation checks
     % popd

Example 7.3: _Invoking Maintenace Checks_


7.1.1.3 Specific Pre-Installation Checks
........................................

A number of check scripts are provided in the `scripts' subdirectory of the
distribution that perform both "System" and "Maintenance" checks.  These are as
follows:

`check_commands'
     This check performs both "System" and "Maintainance" checks.

     When performing "System" tests, the following tests are performed:

     Unless cross-compiling, or unless a program is included in
     `AM_INSTALLCHECK_STD_OPTIONS_EXEMPT' every program in `bin_PROGRAMS',
     `sbin_PROGRAMS', and `libexec_PROGRAMS' is tested to ensure that the
     `--help', `--version', and `--copying' options are accepted.  When
     cross-compiling is is not possible to execute cross-compiled binaries, and
     these checks are skpped in that case.

     Script executables, on the other hand, can be executed on the build host,
     so, unless listed in `AM_INSTALLCHECK_STD_OPTIONS_EXEMPT', every program
     in `dist_bit_SCRIPTS', `dist_sbin_SCRIPTS', and `pkglibexec_SCRIPTS' are
     tested to ensure that the `--help', `--version', and `--copying' options
     are accepted.

     When performing "Maintenance" tests, `check_commands' also checks to
     ensure that a manual page exists in section 1 for every executable binary
     or script that will be installed from `bin_PROGRAMS' and
     `dist_bin_SCRIPTS'.  It also checks to ensure that a manual page exists in
     section 8 for every executable binary or script that wil be installed from
     `sbin_PROGRAMS', `dist_sbin_SCRIPTS', `libexec_PROGRAMS', and
     `pkglibexec_SCRIPTS'.

`check_decls'
     This check only performs "Maintenance" checks.

     It collects the results from the `check_libs', `check_modules' and
     `check_headers' check scripts and tests to ensure every declaration of a
     function prototype or external variable contained in installed header
     files has a corresponding exported symbol from either a to be installed
     shared object library or a to be installed kernel module.  Declarations
     are exempted from this requirement if their identifiers have been
     explicitly added to the `EXPOSED_SYMBOL' variable.  If `WARN_EXCESS' is
     set to `yes', then the check script will only warn when excess
     declarations exist (without a corresponding exported symbol); otherwise,
     the check script will generate an error and the check will fail.

`check_headers'
     This check only performs "Maintenance" checks.

     When performing "Maintenance" tests, it identifies all of the declarations
     included in to be installed header files.  It then checks to ensure that a
     manual page exists in sections 2, 3, 7 or 9, as appropriate, for the type
     of declaration.  It also checks to see if a manual page source file exists
     in the source directory for a declaration that has not been included in
     the distribution.  Function or prototype declarations that do not have a
     manual page in sections 2, 3, or 9 will cause the check to fail.  Other
     declarations (variable, externvar, macro, enumerate, enum, struct, union,
     typedef, member, etc.) will only warn if a manual page does not exist, but
     will not fail the check.

`check_libs'
     This check only performs "Maintenance" checks.

     When performing "Maintenance" tests, it checks that each exported symbol
     in each to be installed shared object library has a manual page in section
     3.  It also checks that each exported symbol has a function, prototype or
     externvar declaration in the to be installed header files.  A missing
     declaration or manual page will cause this check to fail.

`check_mans'
     This check only performs "Maintenance" checks.

     When performing "Maintenance" tests, it checks that to be install manual
     pages can be formatted for display without any errors or warnings from the
     build host `man' program.  It also checks that required headings exist for
     manual pages according to the section in which the manual page will be
     installed.  It warns if recommended headings are not included in the
     manual pages.  Because some "RPM" distributions have manual pages that
     might conflict with the package manual pages, this check script also
     checks for conflicts with installed manual pages on the build host.  This
     check script also checks to ensure that all to be installed manual pages
     are used in some fashion, that is, they have a declaration, or exported
     symbol, or are the name of a kernel module or STREAMS module or driver,
     possibly capitalized.

     Note that checking for conflicts with the build host should probably be
     included in the "System" checks (because "System" checks are performed
     before the source "RPM" `%install' scriptlet).

`check_modules'
     This check performs both "System" and "Maintenance" checks.

     When performing "System" tests, it checks each to be installed kernel
     module to ensure that all undefined symbols can be resolved to either the
     kernel or another module.  It also checks whether an exported or
     externally declared symbol conflicts with an exported or externally
     declared symbol present in the kernel or another module.(1)

     When performing "Maintenance" tests, this check script tests that each to
     be installed kernel module has a manual page in section 9 and that each
     exported symbol that does not begin with an underscore, and that belongs
     to an exported function or exported variable, has a manual page in section
     9.  It also checks to ensure that each exported symbol that does not begin
     with an underscore, and that blongs to an exported function or exported
     variable, has a function, prototype or externvar declaration in the to be
     installed header files.

`check_streams'
     This check performs only "Maintenance" checks.

     When performing "Maintenance" tests, it checks that for each configured
     "STREAMS" module or driver, or device node, that a manual page exists in
     section 4 or section 7 as appropriate.


The output of the pre-installation tests are fairly self explanatory.  Each
check script saves some output to `_name_.log', where _name_ is the name of the
check script as listed above.  A summary of the results of the test are display
to standard output and can also be captured to the `check.log' file if the
`check.log' target is used instead of the `check' target to `make'.

Because the check scripts proliferate `_name_.log' files throughout the build
directory, a `make check-clean' `make' target has be provided to clean them
out.  `make check-clean' should be run before each successive run of `make
check'.

---------- Footnotes ----------

(1) This particular check has caught some namespace polution that has occurred
in the 2.6.11 kernel.


File: STREAMS.info,  Node: Post-installation Checks,  Prev: Pre-installation Checks,  Up: Test Suites

7.1.2 Post-installation Checks
------------------------------

* Menu:

* Running Test Suites::		Running Test Suites in the package

Most OpenSS7 packages ship with a combatibility and conformance test suite
built using the `autotest' capabilities of `autoconf 2.59'.  These test suites
act as a wrapper for the compatibility and conformance test programs that are
shipped with the package.

Unlike the pre-installation checks, the post-installation checks are always run
complete.  The only check that post-installation test scripts perform is to
test whether they have been invoked with root privileges or not.  When invoked
as root, or as a plain user, some tests might be skipped that require root
privileges, or that require plain user privileges, to complete successfully.


File: STREAMS.info,  Node: Running Test Suites,  Up: Post-installation Checks

7.1.2.1 Running Test Suites
...........................

There are several ways of invoking the conformance test suites:

  1. The test suites can be run after installation of the package by invoking
     the `make installcheck' or `make installcheck.log' target.  Some packages
     require that root privileges be acquired before invoking the package.

  2. The test suites can be run from the distribution subdirectory after
     installation of the package by invoking the `testsuite' shell script
     directly.

  3. The test suites can be run standalone from the `libexec' (`/usr/libexec')
     installation directory by invoking the `testsuite' shell script directly.


Typical steps for invoking the testsuites directly from `make' are shown in
*Note testsuite:ex3::.

     % wget http://www.openss7.org/streams-0.7a.6.rc2.tar.bz2
     % tar -xjvf streams-0.7a.6.rc2.tar.bz2
     % pushd streams-0.7a.6.rc2
     % ./configure
     % make
     % make check  # <------ invokes System pre-installation checks
     % make install
     % sudo make installcheck # <------- invokes post-installation tests
     % popd

Example 7.4: _Invoking System Checks_


When performing post-installation checks for the purposes of generating a
problem report, the checks should always be performed from the build directory,
either with `make installcheck' or by invoking `testsuite' directly from the
`tests' subdirectory of the build directory.  This ensures that all of the
information known to `configure' and pertinent to the configuration of the
system for which a test case failed, will be collected in the resulting
`testsuite.log' file depositied upon test suite failure in the `tests'
directory.  This `testsuite.log' file can then be attached as part of the
problem report and provides rich details to maintainers of the package.  See
also *Note Problem Reports::, below.

Typical steps for invoking and installed `testsuite' standalone are shown in
*Note testsuite:ex4::.

     % [sudo] /usr/libexec/streams/testsuite

Example 7.5: _Invoking `testsuite' Directly_


When invoked directly, `testsuite' will generate a `testsuite.log' file in the
current directory, and a `testsuite.dir' directory of failed tests cases and
debugging scripts.  For generating a problem report for failed test cases, see
*Note Stand Alone Problem Reports::.


File: STREAMS.info,  Node: Problem Reports,  Next: Known Problems,  Prev: Test Suites,  Up: Troubleshooting

7.2 Problem Reports
===================

* Menu:

* Problem Report Guidelines::
* Generating Problem Reports::
* Automatic Problem Reports::
* Stand Alone Problem Reports::


File: STREAMS.info,  Node: Problem Report Guidelines,  Next: Generating Problem Reports,  Up: Problem Reports

7.2.1 Problem Report Guidelines
-------------------------------

Problem reports in the following categories should include a log file as
indicated in the table below:

`./configure'
     A problem with the configuration process occurs that causes the
     `./configure' command to fail.  The problem report must include the
     `config.log' file that was generated by `configure'.

`make compile.log'
     A problem with the build process occurs that causes the `make' command to
     fail.  Perform `make clean' and then `make compile.log' and attach the
     `config.log' and `compile.log' files to the problem report.

`make check.log'
     A problem occurs with the `make check' target that causes it to fail.
     Perform `make check-clean check.log' and attach the `config.log',
     `compile.log' and `check.log' files to the problem report.

`sudo make install.log'
     A problem occurs with `sudo make install' that causes it to fail.  Perform
     `sudo make uninstall' and `sudo make install.log' and attach the
     `config.log', `compile.log', `check.log', and `install.log' files to the
     problem report.

`[sudo] make installcheck.log'
     A problem occurs with the `make installcheck' target that causes the test
     suite to fail.  Attach the resulting `tests/testsuite.log' and
     `installcheck.log' file to the problem report.  There is no need to attach
     the other files as they are included in `tests/testsuite.log'.

`[sudo] make uninstall.log'
     A problem occurs with the `make uninstall' target that causes the test
     suite to fail.  Perform `sudo make uninstall.log' and attach the
     `config.log', `compile.log', `check.log', `install.log',
     `installcheck.log', `tests/testsuite.log' and `uninstall.log' file to the
     problem report.

`[sudo] make remove.log'
     A problem occurs with the `make remove' target that causes the test suite
     to fail.  Perform `sudo make remove.log' and attach the `config.log',
     `compile.log', `check.log', `install.log', `installcheck.log',
     `tests/testsuite.log' and `remove.log' file to the problem report.


For other problems that occur during the use of the `Linux Fast-STREAMS'
package, please write a test case for the test suite that recreates the problem
if one does not yet exist and provide a test program patch with the problem
report.  Also include whatever log files are generated by the kernel
(`cmn_err(9)') or by the `strerr(8)' or `strace(1)' facilities (`strlog(9)').


File: STREAMS.info,  Node: Generating Problem Reports,  Next: Automatic Problem Reports,  Prev: Problem Report Guidelines,  Up: Problem Reports

7.2.2 Generating Problem Reports
--------------------------------

`The OpenSS7 Project' uses the `GNU GNATS' system for problem reporting.
Although the `send-pr' tool from the `GNU GNATS' package can be used for bug
reporting to the project's `GNATS' database using electronic mail, it is not
always convenient to download and install the `GNATS' system to gain access to
the `send-pr' tool.

Therefore, the `Linux Fast-STREAMS' package provides the `send-pr' shell script
that can be used for problem reporting.  The `send-pr' shell script can invoked
directly and is a workalike for the `GNU' `send-pr' tool.

The `send-pr' tool takes the same flags and can be used in the same fashion,
however, whereas `send-pr' is an interactive tool(1), `send-pr' is also able to
perform batch processing.  Whereas `send-pr' takes its field information from
local databases or from using the `query-pr' C-language program to query a
remote database, the `send-pr' tool has the field database internal to the tool.

Problem reports can be generate using `make', *Note Problem Report Targets::.
An example of how simple it is to generate a problem report is illustrated in
*Note autopr:ex0::.  

     % make pr
     SEND-PR:
     SEND-PR: send-pr:  send-pr was invoked to generate an external report.  An
     SEND-PR: automated problem report has been created in the file named
     SEND-PR: 'problem.pr' in the current directory.  This problem report can
     SEND-PR: be sent to bugs@openss7.org by calling this script as
     SEND-PR: '/home/brian/os7/scripts/send-pr --file="problem.pr"'.
     SEND-PR:
     SEND-PR: It is possible to edit some of the fields before sending on the
     SEND-PR: problem report.  Please remember that there is NO WARRANTY.  See
     SEND-PR: the file 'COPYING' in the top level directory.
     SEND-PR:
     SEND-PR: Please do not send confidential information to the bug report
     SEND-PR: address.  Inspect the file 'problem.pr' for confidential
     SEND-PR: information before mailing.
     SEND-PR:
     % vim problem.pr  # <--- follow instructions at head of file
     % make send-pr

Example 7.6: _Invoking Problem Report Generation_


Using the `make pr' target to generate a problem report has the advantages that
it will assemble any available `*.log' files in the build directory and attach
them to the problem report.

---------- Footnotes ----------

(1) `send-pr' launches the user's EDITOR to edit the problem report before
submitting it.


File: STREAMS.info,  Node: Automatic Problem Reports,  Next: Stand Alone Problem Reports,  Prev: Generating Problem Reports,  Up: Problem Reports

7.2.3 Automatic Problem Reports
-------------------------------

The `Linux Fast-STREAMS' package also provides a feature for automatic problem
report generation that meets the problem report submission guidelines detailed
in the preceding sections.

Whenever a logging makefile target (*note Logging Targets::) is invoked, if the
primary target fails, the `send-pr' shell script is invoked to automatically
generate a problem report file suitable for the corresponding target (as
described above under *note Problem Report Guidelines::).  An example is shown
in *Note autopr:ex2::.

     % make compile.log
     ...
     ...
     make[5]: *** [libXNSdrvs_a-ip.o] Error 1
     make[5]: Leaving directory `/u6/buildel4/strxns'
     make[4]: *** [all-recursive] Error 1
     make[4]: Leaving directory `/u6/buildel4/strxns'
     make[3]: *** [all] Error 2
     make[3]: Leaving directory `/u6/buildel4/strxns'
     make[2]: *** [all-recursive] Error 1
     make[2]: Leaving directory `/u6/buildel4'
     make[1]: *** [all] Error 2
     make[1]: Leaving directory `/u6/buildel4'
     SEND-PR:
     SEND-PR: send-pr:  Make target compile.log failed in the compile stage.  An
     SEND-PR: automated problem report has been created in the file named
     SEND-PR: 'problem.pr' in the current directory.  This problem report can
     SEND-PR: be sent to bugs@openss7.org by calling 'make send-pr'.
     SEND-PR:
     SEND-PR: It is possible to edit some of the fields before sending on the
     SEND-PR: problem report.  Please remember that there is NO WARRANTY.  See
     SEND-PR: the file 'COPYING' in the top level directory.
     SEND-PR:
     SEND-PR: Please do not send confidential information to the bug report
     SEND-PR: address.  Inspect the file 'problem.pr' for confidential
     SEND-PR: information before mailing.
     SEND-PR:
     % vim problem.pr  # <--- follow instructions at head of file
     % make send-pr

Example 7.7: _Problem Report from Failed Logging Target_



File: STREAMS.info,  Node: Stand Alone Problem Reports,  Prev: Automatic Problem Reports,  Up: Problem Reports

7.2.4 Stand Alone Problem Reports
---------------------------------

The `Linux Fast-STREAMS' package installs the `send-pr' script and its
configuration file `send-pr.config' in `${libexecdir}/streams' along with the
validation `testsuite', see *Note Test Suites::.  As with the `testsuite', this
allows the `send-pr' script to be used for problem report generation on an
installed system that does not have a build directory.

An example of invoking the package `testsuite' and then generating a problem
report for failed cases is shown in *Note Example 7.7: autopr:ex2.

     % [sudo] /usr/libexec/streams/testsuite
     % # test cases failed...
     % /usr/libexec/streams/send-pr
     SEND-PR:
     SEND-PR: send-pr:  send-pr was invoked to generate an external report.  An
     SEND-PR: automated problem report has been created in the file named
     SEND-PR: 'problem.pr' in the current directory.  This problem report can
     SEND-PR: be sent to bugs@openss7.org by calling this script as
     SEND-PR: '/usr/libexec/streams/send-pr --file problem.pr'.
     SEND-PR:
     SEND-PR: It is possible to edit some of the fields before sending on the
     SEND-PR: problem report.  Please remember that there is NO WARRANTY.  See
     SEND-PR: the file 'COPYING' in the top level directory.
     SEND-PR:
     SEND-PR: Please do not send confidential information to the bug report
     SEND-PR: address.  Inspect the file 'problem.pr' for confidential
     SEND-PR: information before mailing.
     SEND-PR:
     % vim problem.pr  # <--- follow instructions at head of file
     % /usr/libexec/streams/send-pr --file problem.pr

Example 7.8: _Invoking `send-pr' Directly_


The advantage of the approach shown in the example is that the `send-pr' script
is capable of collecting the `testsuite.log' file and the failed test cases and
debugging scripts from the `testsuite.dir' directory and including them in the
problem report, as well as all package pertinent information from the installed
`send-pr.config'.


File: STREAMS.info,  Node: Known Problems,  Prev: Problem Reports,  Up: Troubleshooting

7.3 Known Problems
==================

`The OpenSS7 Project' does not ship software with known bugs.  All bugs are
unknown.

Verified behaviour is that behaviour that has been verified by conformance test
suites that are shipped with the `Linux Fast-STREAMS' package.

Unverified behaviour may contain unknown bugs.

Please remember that there is *NO WARRANTY*.

See also *Note Bugs::.


File: STREAMS.info,  Node: Copying,  Next: Documentation License,  Prev: Troubleshooting,  Up: Top

Appendix A Copying
******************

* Menu:

* GNU General Public License::


File: STREAMS.info,  Node: GNU General Public License,  Up: Copying

A.1 GNU General Public License
==============================



                          GNU GENERAL PUBLIC LICENSE
                             Version 2, June 1991

     Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     675 Mass Ave, Cambridge, MA 02139, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

A.1.1 Preamble
--------------

  The licenses for most software are designed to take away your freedom to share
and change it.  By contrast, the GNU General Public License is intended to
guarantee your freedom to share and change free software--to make sure the
software is free for all its users.  This General Public License applies to
most of the Free Software Foundation's software and to any other program whose
authors commit to using it.  (Some other Free Software Foundation software is
covered by the GNU Library General Public License instead.)  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not price.  Our
General Public Licenses are designed to make sure that you have the freedom to
distribute copies of free software (and charge for this service if you wish),
that you receive source code or can get it if you want it, that you can change
the software or use pieces of it in new free programs; and that you know you
can do these things.

  To protect your rights, we need to make restrictions that forbid anyone to deny
you these rights or to ask you to surrender the rights.  These restrictions
translate to certain responsibilities for you if you distribute copies of the
software, or if you modify it.

  For example, if you distribute copies of such a program, whether gratis or for
a fee, you must give the recipients all the rights that you have.  You must
make sure that they, too, receive or can get the source code.  And you must
show them these terms so they know their rights.

  We protect your rights with two steps: (1) copyright the software, and (2)
offer you this license which gives you legal permission to copy, distribute
and/or modify the software.

  Also, for each author's protection and ours, we want to make certain that
everyone understands that there is no warranty for this free software.  If the
software is modified by someone else and passed on, we want its recipients to
know that what they have is not the original, so that any problems introduced
by others will not reflect on the original authors' reputations.

  Finally, any free program is threatened constantly by software patents.  We
wish to avoid the danger that redistributors of a free program will
individually obtain patent licenses, in effect making the program proprietary.
To prevent this, we have made it clear that any patent must be licensed for
everyone's free use or not licensed at all.

  The precise terms and conditions for copying, distribution and modification
follow.

        TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
  1. This License applies to any program or other work which contains a notice
     placed by the copyright holder saying it may be distributed under the
     terms of this General Public License.  The "Program", below, refers to any
     such program or work, and a "work based on the Program" means either the
     Program or any derivative work under copyright law: that is to say, a work
     containing the Program or a portion of it, either verbatim or with
     modifications and/or translated into another language.  (Hereinafter,
     translation is included without limitation in the term "modification".)
     Each licensee is addressed as "you".

     Activities other than copying, distribution and modification are not
     covered by this License; they are outside its scope.  The act of running
     the Program is not restricted, and the output from the Program is covered
     only if its contents constitute a work based on the Program (independent
     of having been made by running the Program).  Whether that is true depends
     on what the Program does.

  2. You may copy and distribute verbatim copies of the Program's source code
     as you receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice and
     disclaimer of warranty; keep intact all the notices that refer to this
     License and to the absence of any warranty; and give any other recipients
     of the Program a copy of this License along with the Program.

     You may charge a fee for the physical act of transferring a copy, and you
     may at your option offer warranty protection in exchange for a fee.

  3. You may modify your copy or copies of the Program or any portion of it,
     thus forming a work based on the Program, and copy and distribute such
     modifications or work under the terms of Section 1 above, provided that
     you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices stating
          that you changed the files and the date of any change.

       b. You must cause any work that you distribute or publish, that in whole
          or in part contains or is derived from the Program or any part
          thereof, to be licensed as a whole at no charge to all third parties
          under the terms of this License.

       c. If the modified program normally reads commands interactively when
          run, you must cause it, when started running for such interactive use
          in the most ordinary way, to print or display an announcement
          including an appropriate copyright notice and a notice that there is
          no warranty (or else, saying that you provide a warranty) and that
          users may redistribute the program under these conditions, and
          telling the user how to view a copy of this License.  (Exception: if
          the Program itself is interactive but does not normally print such an
          announcement, your work based on the Program is not required to print
          an announcement.)

     These requirements apply to the modified work as a whole.  If identifiable
     sections of that work are not derived from the Program, and can be
     reasonably considered independent and separate works in themselves, then
     this License, and its terms, do not apply to those sections when you
     distribute them as separate works.  But when you distribute the same
     sections as part of a whole which is a work based on the Program, the
     distribution of the whole must be on the terms of this License, whose
     permissions for other licensees extend to the entire whole, and thus to
     each and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or contest your
     rights to work written entirely by you; rather, the intent is to exercise
     the right to control the distribution of derivative or collective works
     based on the Program.

     In addition, mere aggregation of another work not based on the Program
     with the Program (or with a work based on the Program) on a volume of a
     storage or distribution medium does not bring the other work under the
     scope of this License.

  4. You may copy and distribute the Program (or a work based on it, under
     Section 2) in object code or executable form under the terms of Sections 1
     and 2 above provided that you also do one of the following:

       a. Accompany it with the complete corresponding machine-readable source
          code, which must be distributed under the terms of Sections 1 and 2
          above on a medium customarily used for software interchange; or,

       b. Accompany it with a written offer, valid for at least three years, to
          give any third party, for a charge no more than your cost of
          physically performing source distribution, a complete
          machine-readable copy of the corresponding source code, to be
          distributed under the terms of Sections 1 and 2 above on a medium
          customarily used for software interchange; or,

       c. Accompany it with the information you received as to the offer to
          distribute corresponding source code.  (This alternative is allowed
          only for noncommercial distribution and only if you received the
          program in object code or executable form with such an offer, in
          accord with Subsection b above.)

     The source code for a work means the preferred form of the work for making
     modifications to it.  For an executable work, complete source code means
     all the source code for all modules it contains, plus any associated
     interface definition files, plus the scripts used to control compilation
     and installation of the executable.  However, as a special exception, the
     source code distributed need not include anything that is normally
     distributed (in either source or binary form) with the major components
     (compiler, kernel, and so on) of the operating system on which the
     executable runs, unless that component itself accompanies the executable.

     If distribution of executable or object code is made by offering access to
     copy from a designated place, then offering equivalent access to copy the
     source code from the same place counts as distribution of the source code,
     even though third parties are not compelled to copy the source along with
     the object code.

  5. You may not copy, modify, sublicense, or distribute the Program except as
     expressly provided under this License.  Any attempt otherwise to copy,
     modify, sublicense or distribute the Program is void, and will
     automatically terminate your rights under this License.  However, parties
     who have received copies, or rights, from you under this License will not
     have their licenses terminated so long as such parties remain in full
     compliance.

  6. You are not required to accept this License, since you have not signed it.
     However, nothing else grants you permission to modify or distribute the
     Program or its derivative works.  These actions are prohibited by law if
     you do not accept this License.  Therefore, by modifying or distributing
     the Program (or any work based on the Program), you indicate your
     acceptance of this License to do so, and all its terms and conditions for
     copying, distributing or modifying the Program or works based on it.

  7. Each time you redistribute the Program (or any work based on the Program),
     the recipient automatically receives a license from the original licensor
     to copy, distribute or modify the Program subject to these terms and
     conditions.  You may not impose any further restrictions on the
     recipients' exercise of the rights granted herein.  You are not
     responsible for enforcing compliance by third parties to this License.

  8. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent issues),
     conditions are imposed on you (whether by court order, agreement or
     otherwise) that contradict the conditions of this License, they do not
     excuse you from the conditions of this License.  If you cannot distribute
     so as to satisfy simultaneously your obligations under this License and
     any other pertinent obligations, then as a consequence you may not
     distribute the Program at all.  For example, if a patent license would not
     permit royalty-free redistribution of the Program by all those who receive
     copies directly or indirectly through you, then the only way you could
     satisfy both it and this License would be to refrain entirely from
     distribution of the Program.

     If any portion of this section is held invalid or unenforceable under any
     particular circumstance, the balance of the section is intended to apply
     and the section as a whole is intended to apply in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of any such
     claims; this section has the sole purpose of protecting the integrity of
     the free software distribution system, which is implemented by public
     license practices.  Many people have made generous contributions to the
     wide range of software distributed through that system in reliance on
     consistent application of that system; it is up to the author/donor to
     decide if he or she is willing to distribute software through any other
     system and a licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed to be a
     consequence of the rest of this License.

  9. If the distribution and/or use of the Program is restricted in certain
     countries either by patents or by copyrighted interfaces, the original
     copyright holder who places the Program under this License may add an
     explicit geographical distribution limitation excluding those countries,
     so that distribution is permitted only in or among countries not thus
     excluded.  In such case, this License incorporates the limitation as if
     written in the body of this License.

 10. The Free Software Foundation may publish revised and/or new versions of
     the General Public License from time to time.  Such new versions will be
     similar in spirit to the present version, but may differ in detail to
     address new problems or concerns.

     Each version is given a distinguishing version number.  If the Program
     specifies a version number of this License which applies to it and "any
     later version", you have the option of following the terms and conditions
     either of that version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version number of
     this License, you may choose any version ever published by the Free
     Software Foundation.

 11. If you wish to incorporate parts of the Program into other free programs
     whose distribution conditions are different, write to the author to ask
     for permission.  For software which is copyrighted by the Free Software
     Foundation, write to the Free Software Foundation; we sometimes make
     exceptions for this.  Our decision will be guided by the two goals of
     preserving the free status of all derivatives of our free software and of
     promoting the sharing and reuse of software generally.

                                    NO WARRANTY

 12. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR
     THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
     OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
     PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
     OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
     TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
     REPAIR OR CORRECTION.

 13. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL
     ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
     REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
     INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
     OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
     TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
     YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
     POSSIBILITY OF SUCH DAMAGES.

                          END OF TERMS AND CONDITIONS

A.1.2 How to Apply These Terms to Your New Programs
---------------------------------------------------

  If you develop a new program, and you want it to be of the greatest possible
use to the public, the best way to achieve this is to make it free software
which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest to attach
them to the start of each source file to most effectively convey the exclusion
of warranty; and each file should have at least the "copyright" line and a
pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND AN IDEA OF WHAT IT DOES.
     Copyright (C) 19YY  NAME OF AUTHOR

     This program is free software; you can redistribute it and/or
     modify it under the terms of the GNU General Public License
     as published by the Free Software Foundation; either version 2
     of the License, or (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

Also add information on how to contact you by electronic and paper mail.

If the program is interactive, make it output a short notice like this when it
starts in an interactive mode:

     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
     type `show w'.  This is free software, and you are welcome
     to redistribute it under certain conditions; type `show c'
     for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, the commands you use may be
called something other than `show w' and `show c'; they could even be
mouse-clicks or menu items--whatever suits your program.

You should also get your employer (if you work as a programmer) or your school,
if any, to sign a "copyright disclaimer" for the program, if necessary.  Here
is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright
     interest in the program `Gnomovision'
     (which makes passes at compilers) written
     by James Hacker.

     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

This General Public License does not permit incorporating your program into
proprietary programs.  If your program is a subroutine library, you may
consider it more useful to permit linking proprietary applications with the
library.  If this is what you want to do, use the GNU Library General Public
License instead of this License.


File: STREAMS.info,  Node: Documentation License,  Next: Indices,  Prev: Copying,  Up: Top

Appendix B Documentation License
********************************

* Menu:

* GNU Free Documentation License::


File: STREAMS.info,  Node: GNU Free Documentation License,  Up: Documentation License

B.1 GNU Free Documentation License
==================================



                        GNU FREE DOCUMENTATION LICENSE
                            Version 1.1, March 2000

     Copyright (C) 2000 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

B.1.1 Preamble
--------------

The purpose of this License is to make a manual, textbook, or other written
document "free" in the sense of freedom: to assure everyone the effective
freedom to copy and redistribute it, with or without modifying it, either
commercially or noncommercially.  Secondarily, this License preserves for the
author and publisher a way to get credit for their work, while not being
considered responsible for modifications made by others.

This License is a kind of "copyleft", which means that derivative works of the
document must themselves be free in the same sense.  It complements the GNU
General Public License, which is a copyleft license designed for free software.

We have designed this License in order to use it for manuals for free software,
because free software needs free documentation: a free program should come with
manuals providing the same freedoms that the software does.  But this License
is not limited to software manuals; it can be used for any textual work,
regardless of subject matter or whether it is published as a printed book.  We
recommend this License principally for works whose purpose is instruction or
reference.

        TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work that contains a notice
     placed by the copyright holder saying it can be distributed under the
     terms of this License.  The "Document", below, refers to any such manual
     or work.  Any member of the public is a licensee, and is addressed as
     "you".

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with modifications
     and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section of the
     Document that deals exclusively with the relationship of the publishers or
     authors of the Document to the Document's overall subject (or to related
     matters) and contains nothing that could fall directly within that overall
     subject.  (For example, if the Document is in part a textbook of
     mathematics, a Secondary Section may not explain any mathematics.)  The
     relationship could be a matter of historical connection with the subject
     or with related matters, or of legal, commercial, philosophical, ethical
     or political position regarding them.

     The "Invariant Sections" are certain Secondary Sections whose titles are
     designated, as being those of Invariant Sections, in the notice that says
     that the Document is released under this License.

     The "Cover Texts" are certain short passages of text that are listed, as
     Front-Cover Texts or Back-Cover Texts, in the notice that says that the
     Document is released under this License.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the general
     public, whose contents can be viewed and edited directly and
     straightforwardly with generic text editors or (for images composed of
     pixels) generic paint programs or (for drawings) some widely available
     drawing editor, and that is suitable for input to text formatters or for
     automatic translation to a variety of formats suitable for input to text
     formatters.  A copy made in an otherwise Transparent file format whose
     markup has been designed to thwart or discourage subsequent modification
     by readers is not Transparent.  A copy that is not "Transparent" is called
     "Opaque".

     Examples of suitable formats for Transparent copies include plain ASCII
     without markup, Texinfo input format, LaTeX input format, SGML or XML
     using a publicly available DTD, and standard-conforming simple HTML
     designed for human modification.  Opaque formats include PostScript, PDF,
     proprietary formats that can be read and edited only by proprietary word
     processors, SGML or XML for which the DTD and/or processing tools are not
     generally available, and the machine-generated HTML produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself, plus
     such following pages as are needed to hold, legibly, the material this
     License requires to appear in the title page.  For works in formats which
     do not have any title page as such, "Title Page" means the text near the
     most prominent appearance of the work's title, preceding the beginning of
     the body of the text.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the copyright
     notices, and the license notice saying this License applies to the
     Document are reproduced in all copies, and that you add no other
     conditions whatsoever to those of this License.  You may not use technical
     measures to obstruct or control the reading or further copying of the
     copies you make or distribute.  However, you may accept compensation in
     exchange for copies.  If you distribute a large enough number of copies
     you must also follow the conditions in section 3.

     You may also lend copies, under the same conditions stated above, and you
     may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies of the Document numbering more than 100, and
     the Document's license notice requires Cover Texts, you must enclose the
     copies in covers that carry, clearly and legibly, all these Cover Texts:
     Front-Cover Texts on the front cover, and Back-Cover Texts on the back
     cover.  Both covers must also clearly and legibly identify you as the
     publisher of these copies.  The front cover must present the full title
     with all words of the title equally prominent and visible.  You may add
     other material on the covers in addition.  Copying with changes limited to
     the covers, as long as they preserve the title of the Document and satisfy
     these conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit legibly,
     you should put the first ones listed (as many as fit reasonably) on the
     actual cover, and continue the rest onto adjacent pages.

     If you publish or distribute Opaque copies of the Document numbering more
     than 100, you must either include a machine-readable Transparent copy
     along with each Opaque copy, or state in or with each Opaque copy a
     publicly-accessible computer-network location containing a complete
     Transparent copy of the Document, free of added material, which the
     general network-using public has access to download anonymously at no
     charge using public-standard network protocols.  If you use the latter
     option, you must take reasonably prudent steps, when you begin
     distribution of Opaque copies in quantity, to ensure that this Transparent
     copy will remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of the
     Document well before redistributing any large number of copies, to give
     them a chance to provide you with an updated version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document under the
     conditions of sections 2 and 3 above, provided that you release the
     Modified Version under precisely this License, with the Modified Version
     filling the role of the Document, thus licensing distribution and
     modification of the Modified Version to whoever possesses a copy of it.
     In addition, you must do these things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title distinct
          from that of the Document, and from those of previous versions (which
          should, if there were any, be listed in the History section of the
          Document).  You may use the same title as a previous version if the
          original publisher of that version gives permission.

       B. List on the Title Page, as authors, one or more persons or entities
          responsible for authorship of the modifications in the Modified
          Version, together with at least five of the principal authors of the
          Document (all of its principal authors, if it has less than five).

       C. State on the Title page the name of the publisher of the Modified
          Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications adjacent
          to the other copyright notices.

       F. Include, immediately after the copyright notices, a license notice
          giving the public permission to use the Modified Version under the
          terms of this License, in the form shown in the Addendum below.

       G. Preserve in that license notice the full lists of Invariant Sections
          and required Cover Texts given in the Document's license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section entitled "History", and its title, and add to it
          an item stating at least the title, year, new authors, and publisher
          of the Modified Version as given on the Title Page.  If there is no
          section entitled "History" in the Document, create one stating the
          title, year, authors, and publisher of the Document as given on its
          Title Page, then add an item describing the Modified Version as
          stated in the previous sentence.

       J. Preserve the network location, if any, given in the Document for
          public access to a Transparent copy of the Document, and likewise the
          network locations given in the Document for previous versions it was
          based on.  These may be placed in the "History" section.  You may
          omit a network location for a work that was published at least four
          years before the Document itself, or if the original publisher of the
          version it refers to gives permission.

       K. In any section entitled "Acknowledgments" or "Dedications", preserve
          the section's title, and preserve in the section all the substance
          and tone of each of the contributor acknowledgments and/or
          dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered in
          their text and in their titles.  Section numbers or the equivalent
          are not considered part of the section titles.

       M. Delete any section entitled "Endorsements".  Such a section may not
          be included in the Modified Version.

       N. Do not retitle any existing section as "Endorsements" or to conflict
          in title with any Invariant Section.

     If the Modified Version includes new front-matter sections or appendices
     that qualify as Secondary Sections and contain no material copied from the
     Document, you may at your option designate some or all of these sections
     as invariant.  To do this, add their titles to the list of Invariant
     Sections in the Modified Version's license notice.  These titles must be
     distinct from any other section titles.

     You may add a section entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various parties--for
     example, statements of peer review or that the text has been approved by
     an organization as the authoritative definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text, and a
     passage of up to 25 words as a Back-Cover Text, to the end of the list of
     Cover Texts in the Modified Version.  Only one passage of Front-Cover Text
     and one of Back-Cover Text may be added by (or through arrangements made
     by) any one entity.  If the Document already includes a cover text for the
     same cover, previously added by you or by arrangement made by the same
     entity you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous publisher
     that added the old one.

     The author(s) and publisher(s) of the Document do not by this License give
     permission to use their names for publicity for or to assert or imply
     endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under this
     License, under the terms defined in section 4 above for modified versions,
     provided that you include in the combination all of the Invariant Sections
     of all of the original documents, unmodified, and list them all as
     Invariant Sections of your combined work in its license notice.

     The combined work need only contain one copy of this License, and multiple
     identical Invariant Sections may be replaced with a single copy.  If there
     are multiple Invariant Sections with the same name but different contents,
     make the title of each such section unique by adding at the end of it, in
     parentheses, the name of the original author or publisher of that section
     if known, or else a unique number.  Make the same adjustment to the
     section titles in the list of Invariant Sections in the license notice of
     the combined work.

     In the combination, you must combine any sections entitled "History" in
     the various original documents, forming one section entitled "History";
     likewise combine any sections entitled "Acknowledgments", and any sections
     entitled "Dedications".  You must delete all sections entitled
     "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other documents
     released under this License, and replace the individual copies of this
     License in the various documents with a single copy that is included in
     the collection, provided that you follow the rules of this License for
     verbatim copying of each of the documents in all other respects.

     You may extract a single document from such a collection, and distribute
     it individually under this License, provided you insert a copy of this
     License into the extracted document, and follow this License in all other
     respects regarding verbatim copying of that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other separate and
     independent documents or works, in or on a volume of a storage or
     distribution medium, does not as a whole count as a Modified Version of
     the Document, provided no compilation copyright is claimed for the
     compilation.  Such a compilation is called an "aggregate", and this
     License does not apply to the other self-contained works thus compiled
     with the Document, on account of their being thus compiled, if they are
     not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these copies
     of the Document, then if the Document is less than one quarter of the
     entire aggregate, the Document's Cover Texts may be placed on covers that
     surround only the Document within the aggregate.  Otherwise they must
     appear on covers around the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may distribute
     translations of the Document under the terms of section 4.  Replacing
     Invariant Sections with translations requires special permission from
     their copyright holders, but you may include translations of some or all
     Invariant Sections in addition to the original versions of these Invariant
     Sections.  You may include a translation of this License provided that you
     also include the original English version of this License.  In case of a
     disagreement between the translation and the original English version of
     this License, the original English version will prevail.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document except as
     expressly provided for under this License.  Any other attempt to copy,
     modify, sublicense or distribute the Document is void, and will
     automatically terminate your rights under this License.  However, parties
     who have received copies, or rights, from you under this License will not
     have their licenses terminated so long as such parties remain in full
     compliance.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of the GNU
     Free Documentation License from time to time.  Such new versions will be
     similar in spirit to the present version, but may differ in detail to
     address new problems or concerns.  See `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version number.  If
     the Document specifies that a particular numbered version of this License
     "or any later version" applies to it, you have the option of following the
     terms and conditions either of that specified version or of any later
     version that has been published (not as a draft) by the Free Software
     Foundation.  If the Document does not specify a version number of this
     License, you may choose any version ever published (not as a draft) by the
     Free Software Foundation.

                          END OF TERMS AND CONDITIONS

B.1.2 How to use this License for your documents
------------------------------------------------

To use this License in a document you have written, include a copy of the
License in the document and put the following copyright and license notices
just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.1
       or any later version published by the Free Software Foundation;
       with the Invariant Sections being LIST THEIR TITLES, with the
       Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
       A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

If you have no Invariant Sections, write "with no Invariant Sections" instead
of saying which ones are invariant.  If you have no Front-Cover Texts, write
"no Front-Cover Texts" instead of "Front-Cover Texts being LIST"; likewise for
Back-Cover Texts.

If your document contains nontrivial examples of program code, we recommend
releasing these examples in parallel under your choice of free software
license, such as the GNU General Public License, to permit their use in free
software.


File: STREAMS.info,  Node: Indices,  Prev: Documentation License,  Up: Top

 Indices
********

* Menu:

* Concept Index::		Index of Concepts
* Type Index::			Index of Data Types
* Function Index::		Index of Functions and Macros
* Variable Index::		Index of Variables and Constants
* File Index::			Index of Files and Programs
* Option Index::		Index of Configuration Options
* Makefile Target Index::	Index of Makefile Targets


File: STREAMS.info,  Node: Concept Index,  Next: Type Index,  Up: Indices

 Index of Concepts
==================

 [index ]
* Menu:

* Architectures:                         Linux Architectures.          (line  6)
* binary debs <1>:                       Removing the Debian DEB.      (line  6)
* binary debs <2>:                       Installing the Debian DEB.    (line  6)
* binary debs <3>:                       Configuring the Debian DEB.   (line  6)
* binary debs:                           Downloading the Debian DEB.   (line  6)
* binary rpms <1>:                       Removing the Binary RPM.      (line  6)
* binary rpms <2>:                       Installing the Binary RPM.    (line  6)
* binary rpms <3>:                       Configuring the Binary RPM.   (line  6)
* binary rpms:                           Downloading the Binary RPM.   (line  6)
* bug reports, automatic generation:     Automatic Problem Reports.    (line  6)
* bug reports, generating:               Generating Problem Reports.   (line  6)
* bug reports, stand along generation:   Stand Alone Problem Reports.  (line  6)
* bugs:                                  Bugs.                         (line  6)
* bugs, known:                           Known Defects.                (line  6)
* bugs, reporting:                       Problem Reports.              (line  6)
* building:                              Building.                     (line  6)
* building, source dscs:                 Building from the Debian DSC. (line  6)
* building, source srpm:                 Building from the Source RPM. (line  6)
* building, tar ball:                    Building from the Tar Ball.   (line  6)
* checkout, cvs:                         Downloading from CVS.         (line  6)
* compatibility <1>:                     Compatibility.                (line  6)
* compatibility:                         STREAMS Compatibility.        (line  6)
* configuration:                         Configuration.                (line  6)
* configure environment variables:       Environment Variables.        (line  6)
* configure options:                     Configure Options.            (line  6)
* configuring, binary debs:              Configuring the Debian DEB.   (line  6)
* configuring, binary rpms:              Configuring the Binary RPM.   (line  6)
* configuring, source dscs:              Configuring the Debian DSC.   (line  6)
* configuring, source srpm:              Configuring the Source RPM.   (line  6)
* configuring, tar ball:                 Configuring the Tar Ball.     (line  6)
* conformance:                           Conformance.                  (line  6)
* contributors:                          Contributors.                 (line  6)
* conventions:                           Conventions.                  (line  6)
* credits:                               Acknowledgements.             (line  6)
* cvs:                                   Downloading from CVS.         (line  6)
* definitions:                           Conventions.                  (line  6)
* developing:                            Development.                  (line  6)
* downloading:                           Downloading.                  (line  6)
* downloading, binary rpms:              Downloading the Binary RPM.   (line  6)
* downloading, debian debs:              Downloading the Debian DEB.   (line  6)
* downloading, debian dscs:              Downloading the Debian DSC.   (line  6)
* downloading, source srpm:              Downloading the Source RPM.   (line  6)
* downloading, tar ball:                 Downloading the Tar Ball.     (line  6)
* drivers:                               Drivers.                      (line  6)
* generating bug reports <1>:            Stand Alone Problem Reports.  (line  6)
* generating bug reports:                Generating Problem Reports.   (line  6)
* generating bug reports automatically:  Automatic Problem Reports.    (line  6)
* generating problem reports:            Generating Problem Reports.   (line  6)
* generating problem reports automatically: Automatic Problem Reports. (line  6)
* generating problem reports stand alone: Stand Alone Problem Reports. (line  6)
* GNU/Linux Distributions:               GNU/Linux Distributions.      (line  6)
* headers:                               Files.                        (line  6)
* history:                               History.                      (line  6)
* installation:                          Installation.                 (line  6)
* installing:                            Installing.                   (line  6)
* installing, binary debs:               Installing the Debian DEB.    (line  6)
* installing, binary rpms:               Installing the Binary RPM.    (line  6)
* installing, tar ball:                  Installing the Tar Ball.      (line  6)
* introduction:                          Introduction.                 (line  6)
* Kernel:                                Linux Kernel.                 (line  6)
* known bugs:                            Known Defects.                (line  6)
* known problems:                        Known Problems.               (line  6)
* libraries:                             Libraries.                    (line  6)
* license, FDL:                          GNU Free Documentation License.
                                                                       (line  6)
* license, GNU Free Documentation License: GNU Free Documentation License.
                                                                       (line  6)
* license, GNU General Public License:   GNU General Public License.   (line  6)
* license, GPL:                          GNU General Public License.   (line  6)
* licensing:                             Notice.                       (line  6)
* Linux STREAMS:                         Linux STREAMS.                (line  6)
* loading:                               Loading.                      (line  6)
* loading kernel modules:                Loading.                      (line 61)
* maturity:                              Maturity.                     (line  6)
* modules:                               Modules.                      (line  6)
* NexusWare:                             Loading.                      (line 61)
* notice:                                Notice.                       (line  6)
* objective:                             Objective.                    (line  6)
* organization:                          Organization.                 (line  6)
* overview:                              Overview.                     (line  6)
* porting:                               Porting.                      (line  6)
* post-installation checks:              Post-installation Checks.     (line  6)
* pre-installation checks:               Pre-installation Checks.      (line  6)
* prerequisites:                         Prerequisites.                (line  6)
* problem reports:                       Problem Reports.              (line  6)
* problems, known:                       Known Problems.               (line  6)
* reference:                             Reference.                    (line  6)
* release notes:                         Release Notes.                (line  6)
* release streams-0.7a-1:                Release streams-0.7a-1.       (line  6)
* release streams-0.7a-2:                Release streams-0.7a-2.       (line  6)
* release streams-0.7a-3:                Release streams-0.7a-3.       (line  6)
* release streams-0.7a.3:                Release streams-0.7a.3.       (line  6)
* release streams-0.7a.4:                Release streams-0.7a.4.       (line  6)
* release streams-0.7a.5:                Release streams-0.7a.5.       (line  6)
* release streams-0.7a.6.rc2:            Release streams-0.7a.6.rc2.   (line  6)
* releases:                              Releases.                     (line  6)
* removing:                              Removing.                     (line  6)
* removing, binary debs:                 Removing the Debian DEB.      (line  6)
* removing, binary rpms:                 Removing the Binary RPM.      (line  6)
* removing, source dscs:                 Removing the Debian DSC.      (line  6)
* removing, source srpm:                 Removing the Source RPM.      (line  6)
* removing, tar ball:                    Removing the Tar Ball.        (line  6)
* reporting bugs:                        Problem Reports.              (line  6)
* schedule:                              Schedule.                     (line  6)
* source dscs <1>:                       Removing the Debian DSC.      (line  6)
* source dscs <2>:                       Building from the Debian DSC. (line  6)
* source dscs <3>:                       Configuring the Debian DSC.   (line  6)
* source dscs:                           Downloading the Debian DSC.   (line  6)
* source rpms <1>:                       Removing the Source RPM.      (line  6)
* source rpms <2>:                       Building from the Source RPM. (line  6)
* source rpms <3>:                       Configuring the Source RPM.   (line  6)
* source rpms:                           Downloading the Source RPM.   (line  6)
* sponsors:                              Sponsors.                     (line  6)
* streams-core-2.6.17-1.2139_FC5-0.7a.6.rc2-1.FC5.i686.rpm: Configuring the Binary RPM.
                                                                       (line 12)
* streams-dev-0.7a.6.rc2-1.FC5.i686.rpm: Configuring the Binary RPM.   (line 25)
* streams-devel-0.7a.6.rc2-1.FC5.i686.rpm: Configuring the Binary RPM. (line 28)
* streams-doc-0.7a.6.rc2-1.FC5.i686.rpm: Configuring the Binary RPM.   (line 36)
* streams-info-2.6.17-1.2139_FC5-0.7a.6.rc2-1.FC5.i686.rpm: Configuring the Binary RPM.
                                                                       (line 18)
* streams-lib-0.7a.6.rc2-1.FC5.i686.rpm: Configuring the Binary RPM.   (line 50)
* streams-source-0.7a.6.rc2-1.FC5.i686.rpm: Configuring the Binary RPM.
                                                                       (line 61)
* streams-util-0.7a.6.rc2-1.FC5.i686.rpm: Configuring the Binary RPM.  (line 66)
* tar ball <1>:                          Removing the Tar Ball.        (line  6)
* tar ball <2>:                          Installing the Tar Ball.      (line  6)
* tar ball <3>:                          Building from the Tar Ball.   (line  6)
* tar ball <4>:                          Configuring the Tar Ball.     (line  6)
* tar ball:                              Downloading the Tar Ball.     (line  6)
* test suites:                           Test Suites.                  (line  6)
* test suites, running:                  Running Test Suites.          (line  6)
* troubleshooting:                       Troubleshooting.              (line  6)
* utilities:                             Utilities.                    (line  6)


File: STREAMS.info,  Node: Type Index,  Next: Function Index,  Prev: Concept Index,  Up: Indices

 Index of Data Types
====================

 [index ]
* Menu:

File: STREAMS.info,  Node: Function Index,  Next: Variable Index,  Prev: Type Index,  Up: Indices

 Index of Functions and Macros
==============================

 [index ]
* Menu:

File: STREAMS.info,  Node: Variable Index,  Next: File Index,  Prev: Function Index,  Up: Indices

 Index of Variables and Constants
=================================

 [index ]
* Menu:

* AUTOM4TE:                              Environment Variables.       (line 184)
* AUTOTEST:                              Environment Variables.       (line 189)
* BZIP2:                                 Environment Variables.       (line  58)
* BZIP2_CMD:                             Environment Variables.       (line  61)
* CHKCONFIG:                             Environment Variables.       (line  71)
* DEB_BUILD_ARCH:                        Environment Variables.       (line  97)
* DEB_BUILD_GNU_CPU:                     Environment Variables.       (line 101)
* DEB_BUILD_GNU_SYSTEM:                  Environment Variables.       (line 105)
* DEB_BUILD_GNU_TYPE:                    Environment Variables.       (line 109)
* DEB_HOST_ARCH:                         Environment Variables.       (line 113)
* DEB_HOST_GNU_CPU:                      Environment Variables.       (line 117)
* DEB_HOST_GNU_SYSTEM:                   Environment Variables.       (line 121)
* DEB_HOST_GNU_TYPE:                     Environment Variables.       (line 125)
* DEPMOD:                                Environment Variables.       (line 140)
* DESTDIR:                               Environment Variables.       (line 134)
* DPKG:                                  Environment Variables.       (line  85)
* DPKG_BUILDPACKAGE:                     Environment Variables.       (line  93)
* DPKG_SOURCE:                           Environment Variables.       (line  89)
* GENKSYMS:                              Environment Variables.       (line 162)
* GNUPGHOME:                             Environment Variables.       (line  16)
* GNUPGUSER:                             Environment Variables.       (line  13)
* GPG:                                   Environment Variables.       (line   9)
* GPGPASSWD:                             Environment Variables.       (line  20)
* GZIP:                                  Environment Variables.       (line  49)
* GZIP_CMD:                              Environment Variables.       (line  52)
* KGENKSYMS:                             Environment Variables.       (line 166)
* LDCONFIG:                              Environment Variables.       (line 129)
* LSMOD:                                 Environment Variables.       (line 150)
* LSOF:                                  Environment Variables.       (line 155)
* MAKEWHATIS:                            Environment Variables.       (line  67)
* MODPOST_CACHE:                         Environment Variables.       (line 179)
* MODPROBE:                              Environment Variables.       (line 145)
* NM:                                    Environment Variables.       (line 175)
* OBJDUMP:                               Environment Variables.       (line 171)
* PACKAGE_KVERSION:                      Configuring the Source RPM.  (line  71)
* PIC:                                   Environment Variables.       (line  43)
* REFER:                                 Environment Variables.       (line  31)
* RPM:                                   Environment Variables.       (line  76)
* RPMBUILD:                              Environment Variables.       (line  80)
* SOELIM:                                Environment Variables.       (line  25)
* TBL:                                   Environment Variables.       (line  37)


File: STREAMS.info,  Node: File Index,  Next: Option Index,  Prev: Variable Index,  Up: Indices

 Index of Files and Prorams
===========================

 [index ]
* Menu:

* /lib/modules/2.6.17-1.2139_FC5/streams/: Loading.                    (line 28)
* specfs.o:                              Files.                        (line  7)
* streams-aixcompat.o:                   Files.                        (line 11)
* streams-clone.o:                       Drivers.                      (line 14)
* streams-connld.o:                      Modules.                      (line 14)
* streams-echo.o:                        Drivers.                      (line 17)
* streams-fifo.o:                        Drivers.                      (line 20)
* streams-hpuxcompat.o:                  Files.                        (line 13)
* streams-liscompat.o:                   Files.                        (line 15)
* streams-log.o:                         Drivers.                      (line 23)
* streams-nsdev.o:                       Drivers.                      (line 26)
* streams-nuls.o:                        Drivers.                      (line 29)
* streams-osfcompat.o:                   Files.                        (line 17)
* streams-pipe.o:                        Drivers.                      (line 32)
* streams-pipemod.o:                     Modules.                      (line 17)
* streams-sad.o:                         Drivers.                      (line 35)
* streams-sc.o:                          Modules.                      (line 20)
* streams-sth.o:                         Modules.                      (line 23)
* streams-suncompat.o:                   Files.                        (line 19)
* streams-svr4compat.o:                  Files.                        (line 21)
* streams-uw7compat.o:                   Files.                        (line 23)
* streams.o:                             Files.                        (line  9)


File: STREAMS.info,  Node: Option Index,  Next: Makefile Target Index,  Prev: File Index,  Up: Indices

 Index of Configuration Options
===============================

 [index ]
* Menu:

* arch:                                  Configure Options.           (line  58)
* base-major:                            Configure Options.           (line 262)
* big-compile <1>:                       Configure Options.           (line 287)
* big-compile:                           Configuring the Source RPM.  (line 203)
* checks <1>:                            Configure Options.           (line  10)
* checks:                                Configuring the Source RPM.  (line  81)
* compress-manpages:                     Configure Options.           (line  21)
* cooked-manpages <1>:                   Configure Options.           (line 140)
* cooked-manpages:                       Configuring the Source RPM.  (line  99)
* deb-epoch:                             Configure Options.           (line 167)
* deb-release:                           Configure Options.           (line 171)
* deb-topdir:                            Configure Options.           (line 175)
* devel <1>:                             Configure Options.           (line  35)
* devel:                                 Configuring the Source RPM.  (line 158)
* devfs:                                 Configure Options.           (line 101)
* driver-clone <1>:                      Configure Options.           (line 329)
* driver-clone:                          Configuring the Source RPM.  (line 245)
* driver-echo <1>:                       Configure Options.           (line 335)
* driver-echo:                           Configuring the Source RPM.  (line 251)
* driver-fifo <1>:                       Configure Options.           (line 340)
* driver-fifo:                           Configuring the Source RPM.  (line 256)
* driver-log <1>:                        Configure Options.           (line 345)
* driver-log:                            Configuring the Source RPM.  (line 261)
* driver-loop <1>:                       Configure Options.           (line 350)
* driver-loop:                           Configuring the Source RPM.  (line 266)
* driver-mux <1>:                        Configure Options.           (line 360)
* driver-mux:                            Configuring the Source RPM.  (line 276)
* driver-nsdev <1>:                      Configure Options.           (line 355)
* driver-nsdev:                          Configuring the Source RPM.  (line 271)
* driver-nuls <1>:                       Configure Options.           (line 365)
* driver-nuls:                           Configuring the Source RPM.  (line 281)
* driver-pipe <1>:                       Configure Options.           (line 370)
* driver-pipe:                           Configuring the Source RPM.  (line 286)
* driver-sad <1>:                        Configure Options.           (line 375)
* driver-sad:                            Configuring the Source RPM.  (line 291)
* driver-sfx <1>:                        Configure Options.           (line 380)
* driver-sfx:                            Configuring the Source RPM.  (line 296)
* driver-spx <1>:                        Configure Options.           (line 385)
* driver-spx:                            Configuring the Source RPM.  (line 301)
* gpg-home:                              Configure Options.           (line 116)
* gpg-user:                              Configure Options.           (line 109)
* indep:                                 Configure Options.           (line  65)
* initscripts:                           Configure Options.           (line  31)
* k-archdir:                             Configure Options.           (line 232)
* k-build:                               Configure Options.           (line 206)
* k-config:                              Configure Options.           (line 246)
* k-debug <1>:                           Configure Options.           (line  92)
* k-debug:                               Configuring the Source RPM.  (line 111)
* k-inline <1>:                          Configure Options.           (line  72)
* k-inline:                              Configuring the Source RPM.  (line 133)
* k-linkage:                             Configure Options.           (line 188)
* k-machdir:                             Configure Options.           (line 239)
* k-modules:                             Configure Options.           (line 196)
* k-modversions:                         Configuring the Source RPM.  (line 142)
* k-optimize <1>:                        Configure Options.           (line 253)
* k-optimize:                            Configuring the Source RPM.  (line  93)
* k-release <1>:                         Configure Options.           (line 181)
* k-release:                             Configuring the Source RPM.  (line  71)
* k-safe <1>:                            Configure Options.           (line  77)
* k-safe:                                Configuring the Source RPM.  (line 126)
* k-sysmap:                              Configure Options.           (line 220)
* k-test <1>:                            Configure Options.           (line  84)
* k-test:                                Configuring the Source RPM.  (line 119)
* module-bufmod <1>:                     Configure Options.           (line 299)
* module-bufmod:                         Configuring the Source RPM.  (line 215)
* module-connld <1>:                     Configure Options.           (line 314)
* module-connld:                         Configuring the Source RPM.  (line 230)
* module-nullmod <1>:                    Configure Options.           (line 304)
* module-nullmod:                        Configuring the Source RPM.  (line 220)
* module-pipemod <1>:                    Configure Options.           (line 309)
* module-pipemod:                        Configuring the Source RPM.  (line 225)
* module-sc <1>:                         Configure Options.           (line 319)
* module-sc:                             Configuring the Source RPM.  (line 235)
* module-sth <1>:                        Configure Options.           (line 293)
* module-sth:                            Configuring the Source RPM.  (line 209)
* module-testmod <1>:                    Configure Options.           (line 324)
* module-testmod:                        Configuring the Source RPM.  (line 240)
* modules <1>:                           Configure Options.           (line  51)
* modules:                               Configuring the Source RPM.  (line 175)
* pkg-distdir:                           Configure Options.           (line 134)
* pkg-epoch:                             Configure Options.           (line 121)
* pkg-release:                           Configure Options.           (line 127)
* public <1>:                            Configure Options.           (line  27)
* public:                                Configuring the Source RPM.  (line 106)
* rpm-epoch:                             Configure Options.           (line 147)
* rpm-extra:                             Configure Options.           (line 155)
* rpm-release:                           Configure Options.           (line 151)
* rpm-topdir:                            Configure Options.           (line 161)
* strconf-master:                        Configure Options.           (line 258)
* streams-bcm <1>:                       Configure Options.           (line 395)
* streams-bcm:                           Configuring the Source RPM.  (line 311)
* streams-fifos <1>:                     Configure Options.           (line 390)
* streams-fifos:                         Configuring the Source RPM.  (line 306)
* streams-kthreads <1>:                  Configure Options.           (line 275)
* streams-kthreads:                      Configuring the Source RPM.  (line 191)
* streams-syncqs <1>:                    Configure Options.           (line 270)
* streams-syncqs:                        Configuring the Source RPM.  (line 186)
* streams-utils <1>:                     Configure Options.           (line 282)
* streams-utils:                         Configuring the Source RPM.  (line 198)
* tools <1>:                             Configure Options.           (line  42)
* tools:                                 Configuring the Source RPM.  (line 166)


File: STREAMS.info,  Node: Makefile Target Index,  Prev: Option Index,  Up: Indices

 Index of Makefile Targets
==========================

 [index ]
* Menu:

* all <1>:                               User Targets.                 (line 11)
* all:                                   Loading.                      (line 10)
* check:                                 User Targets.                 (line 31)
* check-clean:                           Clean Targets.                (line 48)
* check.log:                             Logging Targets.              (line 26)
* clean:                                 Clean Targets.                (line 15)
* compile.log:                           Logging Targets.              (line 22)
* csig:                                  Debian Build Targets.         (line 40)
* debs:                                  Debian Build Targets.         (line 30)
* dist:                                  Maintainer Targets.           (line 12)
* dist.log:                              Logging Targets.              (line 52)
* distcheck:                             Maintainer Targets.           (line 21)
* distcheck.log:                         Logging Targets.              (line 56)
* distclean:                             Clean Targets.                (line 25)
* dsc:                                   Debian Build Targets.         (line 13)
* forced-release:                        Release Targets.              (line 22)
* forced-release-sign:                   Release Targets.              (line 37)
* install <1>:                           User Targets.                 (line 50)
* install:                               Loading.                      (line 10)
* install-strip <1>:                     User Targets.                 (line 50)
* install-strip:                         Loading.                      (line 10)
* install.log:                           Logging Targets.              (line 30)
* installcheck:                          User Targets.                 (line 59)
* installcheck.log:                      Logging Targets.              (line 34)
* maintainer-clean:                      Clean Targets.                (line 35)
* mostlyclean:                           Clean Targets.                (line  7)
* pr <1>:                                Generating Problem Reports.   (line 24)
* pr:                                    Problem Report Targets.       (line 15)
* rebuild:                               RPM Build Targets.            (line 48)
* rebuild.log:                           Logging Targets.              (line 64)
* release:                               Release Targets.              (line 12)
* release-archives:                      Release Archive Targets.      (line 17)
* release-clean:                         Release Targets.              (line 44)
* release-clean-archives:                Release Archive Targets.      (line 52)
* release-sign:                          Release Targets.              (line 29)
* release-sign-archives:                 Release Archive Targets.      (line 34)
* release-sign.log:                      Logging Targets.              (line 76)
* release.log:                           Logging Targets.              (line 72)
* remove:                                User Targets.                 (line 97)
* remove.log:                            Logging Targets.              (line 42)
* resign:                                RPM Build Targets.            (line 58)
* resign.log:                            Logging Targets.              (line 68)
* retest:                                User Targets.                 (line 74)
* rpms:                                  RPM Build Targets.            (line 22)
* send-pr:                               Problem Report Targets.       (line 26)
* sign:                                  RPM Build Targets.            (line 38)
* sigs:                                  Debian Build Targets.         (line 23)
* srpm:                                  RPM Build Targets.            (line 15)
* srpm-sign:                             RPM Build Targets.            (line 38)
* srpm.log:                              Logging Targets.              (line 60)
* uninstall:                             User Targets.                 (line 87)
* uninstall.log:                         Logging Targets.              (line 38)



Tag Table:
Node: Top1190
Node: Acknowledgements2090
Node: Sponsors2480
Node: Contributors3011
Node: Introduction3511
Node: Notice3895
Node: Overview4493
Node: Organization4747
Node: Conventions5752
Node: Objective5952
Node: Reference8008
Node: Files8415
Node: Drivers8692
Node: Modules9598
Node: Libraries10321
Node: Utilities10440
Node: Development10563
Node: Conformance10753
Node: STREAMS Compatibility10917
Node: Porting13301
Node: Releases16779
Node: Prerequisites17629
Ref: Prerequisites-Footnote-118219
Ref: Prerequisites-Footnote-218279
Node: Compatibility18494
Node: GNU/Linux Distributions18928
Ref: GNU/Linux Distributions-Footnote-120766
Node: Linux Kernel20942
Ref: Linux Kernel-Footnote-122614
Node: Linux Architectures22808
Node: Linux STREAMS23561
Node: Release Notes23877
Node: Release streams-0.7a.6.rc224397
Node: Release streams-0.7a.524702
Node: Release streams-0.7a.426051
Node: Release streams-0.7a.326324
Node: Release streams-0.7a-327261
Node: Release streams-0.7a-227585
Node: Release streams-0.7a-128246
Node: Maturity29389
Node: Pre-Alpha Releases29937
Node: Alpha Releases30532
Node: Beta Releases31308
Node: Gamma Releases32201
Node: Production Releases33120
Node: Bugs33984
Node: Defect Notices34200
Ref: Defect Notices-Footnote-135450
Node: Known Defects35521
Node: Schedule35886
Node: History35996
Node: Installation36091
Node: Downloading36504
Node: Downloading the Binary RPM37902
Ref: Downloading the Binary RPM-Footnote-143301
Ref: Downloading the Binary RPM-Footnote-243731
Ref: Downloading the Binary RPM-Footnote-344027
Ref: Downloading the Binary RPM-Footnote-444201
Ref: Downloading the Binary RPM-Footnote-544457
Node: Downloading the Debian DEB44531
Ref: Downloading the Debian DEB-Footnote-149553
Ref: Downloading the Debian DEB-Footnote-249748
Ref: Downloading the Debian DEB-Footnote-349897
Ref: Downloading the Debian DEB-Footnote-450193
Ref: Downloading the Debian DEB-Footnote-550367
Ref: Downloading the Debian DEB-Footnote-650623
Node: Downloading the Source RPM50697
Node: Downloading the Debian DSC51410
Node: Downloading the Tar Ball52191
Node: Downloading from CVS53767
Ref: Downloading from CVS-Footnote-158393
Node: Configuration58429
Node: Configuring the Binary RPM58856
Ref: Configuring the Binary RPM-Footnote-161670
Ref: Configuring the Binary RPM-Footnote-261744
Node: Configuring the Debian DEB61902
Node: Configuring the Source RPM62269
Ref: Configuring the Source RPM-Footnote-175984
Node: Configuring the Debian DSC76247
Node: Configuring the Tar Ball76830
Node: Configure Options77328
Ref: Configure Options-Footnote-196581
Node: Environment Variables96844
Node: Building104523
Node: Building from the Source RPM104826
Ref: Building from the Source RPM-Footnote-1106068
Node: Building from the Debian DSC106142
Ref: Building from the Debian DSC-Footnote-1107615
Node: Building from the Tar Ball107689
Ref: Building from the Tar Ball-Footnote-1115253
Ref: Building from the Tar Ball-Footnote-2115412
Node: Installing115660
Node: Installing the Binary RPM115951
Node: Installing the Debian DEB117245
Node: Installing the Tar Ball117928
Node: Removing118663
Node: Removing the Binary RPM119058
Node: Removing the Debian DEB119513
Node: Removing the Source RPM120003
Node: Removing the Debian DSC120517
Node: Removing the Tar Ball121149
Node: Loading121946
Ref: Loading-Footnote-1124570
Ref: Loading-Footnote-2124644
Node: Maintenance124801
Node: Makefile Targets124942
Node: User Targets125628
Ref: User Targets-Footnote-1130807
Ref: User Targets-Footnote-2131027
Ref: User Targets-Footnote-3131227
Node: Maintainer Targets131282
Node: Clean Targets132856
Node: Release Targets135465
Node: Logging Targets137565
Ref: Logging Targets-Footnote-1140599
Node: Problem Report Targets140871
Node: Release Archive Targets142483
Node: RPM Build Targets144815
Node: Debian Build Targets147835
Node: Troubleshooting149791
Node: Test Suites150082
Node: Pre-installation Checks150343
Ref: testsuite:ex0151708
Ref: testsuite:ex1152567
Ref: testsuite:ex2153389
Ref: Pre-installation Checks-Footnote-1160489
Node: Post-installation Checks160591
Node: Running Test Suites161476
Ref: testsuite:ex3162335
Ref: testsuite:ex4163532
Node: Problem Reports163898
Node: Problem Report Guidelines164183
Node: Generating Problem Reports166784
Ref: autopr:ex0168115
Ref: Generating Problem Reports-Footnote-1169322
Node: Automatic Problem Reports169413
Ref: autopr:ex2170146
Node: Stand Alone Problem Reports171549
Ref: autopr:ex2172237
Node: Known Problems173679
Node: Copying174157
Node: GNU General Public License174339
Node: Documentation License193444
Node: GNU Free Documentation License193650
Node: Indices213434
Node: Concept Index213864
Node: Type Index224766
Node: Function Index224929
Node: Variable Index225113
Node: File Index228626
Node: Option Index230586
Node: Makefile Target Index238960

End Tag Table
