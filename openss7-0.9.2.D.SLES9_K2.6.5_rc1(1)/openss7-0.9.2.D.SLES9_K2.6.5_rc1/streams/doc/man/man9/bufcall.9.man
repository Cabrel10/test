'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) bufcall.9.man,v 0.9.2.24 2006/04/05 09:44:09 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:09 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" bufcall.9.man,v
.\" Revision 0.9.2.24  2006/04/05 09:44:09  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH BUFCALL 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B bufcall
\- install a buffer callback
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP
.BI "bcid_t bufcall(unsigned " size ", int " pri ", void (*" func ")(long), long " arg );
.\"
.\"
.SH ARGUMENTS
.PP
.TP \w'\ func\ 'u
.I size
The size of the requested data buffer.
.TP
.I pri
The priority of the requested message.  The priority can be one of the
following values:
.sp
.TS
tab(:);
lblss.
BPRI_LO:T{
requests a low priority buffer.
T}
BPRI_MED:T{
requests a medium priority buffer.
T}
BPRI_HI:T{
requests a high priority buffer.
T}
BPRI_WAITOK:T{
requests a low priority buffer and can block.
T}
.TE
.sp
The
.I pri
argument is ignored by
.I SVR 4.2
.[
svr42
.]
and later implementations.
.TP
.I func
The callback function to call when a buffer of the requested size and message of the
requested priority becomes available.  This is normally the
.IR qi_srvp (9)
procedure
which failed a call to
.BR allocb (9)
or it is a function pointer to
.BR qenable (9).
.TP
.I arg
The argument to pass to the callback function.  This is normally a pointer to
the queue whose
.IR qi_srvp (9)
procedure failed the
.BR allocb (9).
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.\".PP
.\".BR bufcall ()
.\"is provided to assis in the event of a block allocation failure.  If
.\".BR allocb (9)
.\"returns
.\".BR NULL ,
.\"indicating that a message block is not currently available,
.\".BR bufcall ()
.\"may be invoked.
.\".PP
.\".BR bufcall ()
.\"arranges for
.\".B (*func)(arg)
.\"to be called when a buffer of
.\".I size
.\"bytes is avialable.
.\".I pri
.\"is as described in
.\".BR allocb (9).
.\"When
.\".I func
.\"is called, it has no user context.  It cannot reference the current
.\".B task_struct
.\"structure, and must return without sleeping.
.\".BR bufcall ()
.\"does not guarantee that the desired buffer will be available when
.\".I func
.\"is called since interrupt processing may require it.
.\".PP
.\".BR bufcall ()
.\"returns
.\".B 1
.\"on success, indicating that the request has been successfully recorded, and
.\".B 0
.\"on failure.  On a failure return,
.\".I func
.\"will never be called.  A failure indicates a (temporary) inability to allocate required internal
.\"data structures.
.PP
When allocation of a buffer fails as a result of a failed call to
.BR allocb (9),
the
.IR qi_srvp (9)
procedure should place the message that invoked the
.BR allocb (9)
call back on the queue with
.BR putbq (9)
and call the
.BR bufcall ()
function with the queue's
.IR qi_srvp (9)
procedure as the
.I func
argument and a pointer to the queue as the
.I arg
argument to the call.
The
.I size
and
.I pri
arguments should be the same as the
.I size
and
.I pri
arguments that were issued to
.BR allocb (9).
.PP
In this way, the queue
.IR qi_srvp (9)
procedure will be recalled once there is
sufficient memory to allocate the requested buffer and message blocks.
.\"
.\"
.SH RETURN
.PP
.BR bufcall ()
returns a
.B bcid_t
defined as follows:
.nf
\fC\s-2
typedef int bcid_t;
typedef int bufcall_id_t;
\s+1\fP
.fi
.PP
Upon success,
.BR bufcall ()
returns a non-zero bufcall id and the specified
.I func
will be called with the specified
.I arg
at a later time when buffers of the necessary
.I size
become available.
.PP
Upon failure,
.BR bufcall ()
returns zero (0) and no call will be generated to the specified
.IR func .
.\"
.\"
.SH ERRORS
.PP
When
.BR bufcall ()
encounters an error, it returns zero (0).
.PP
.BR bufcall ()
returns zero (0) when the function pointer to the callback function,
.I func
is
.BR NULL ,
or
.BR bufcall ()
cannot allocate the necessary internal structures.
.\"
.\"
.SH CONTEXT
.PP
.BR bufcall ()
can be called from any context, including user context,
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_putp (9),
.IR qi_srvp (9)
procedures,
.BR bufcall (9),
.BR qbufcall (9),
.BR timeout (9),
.BR qtimeout (9)
callbacks,
and interrupt service routines.
.\"
.\"
.SH MP-STREAMS
.PP
.BR bufcall ()
is MP-safe.
.PP
Considerations should be given when writing the callback function that a
.BR bufcall ()
callback function could execute at the same time as any
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_putp (9),
or
.IR qi_srvp (9)
procedure,
.BR bufcall (9),
.BR qbufcall (9),
.BR timeout (9),
.BR qtimeout (9)
callback or interrupt service routine.
.PP
Nevertheless, the
.BR bufcall ()
callback function will be serviced by the same thread as the thread from which
the
.BR bufcall ()
was issued.  Therefore, the callback function will not execute
until after
.BR bufcall ()
returns.
Because the servicing thread and the current thread are the same, the
.BR bufcall ()
callback will not be invoked until after the function that called
.BR bufcall ()
returns.
This means that it is safe to store the returned bufcall id in global
variables accessed by the callback function.
This is the same situation for
.BR qtimeout (9),
.BR qbufcall (9),
.BR timeout (9),
.BR bufcall (9)
and
.BR esbbcall (9)
functions.
.PP
However, if the
.BR bufcall ()
was generated from a 
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedure, or was generated from within a 
.BR mi_bufcall (9),
.BR qbufcall (9),
.BR qtimeout (9),
callback, or other
queue referenced
.BR bufcall (),
.BR esbbcall (9),
.BR timeout (9),
callback, then the
.I STREAMS
executive is aware of the queue to which the callback function is to be
referenced and will generate a buffer call internally that is referenced
against the queue within whose synchronization context the call was invoked.
This makes the
.BR bufcall ()
function safer than the normal
.I "SVR 4.2 MP"
equivalent.
.PP
See
.BR mp-streams (9)
for additional information.
.\"
.\"
.SH NOTICES
.PP
.BR bcid_t " and " bufcall_id_t
should be treated as an opaque type that can be tested to equality to zero.
The value should not otherwise be manipulated.
.BR bufcall ()
implements bufcall id values internally as a compressed out dating pointer to a
.B strevent
structure containing the bufcall callback function and argument.  On 64-bit
architectures this value should not be stored as an
.BR int ,
nor converted to any integer type with less bits than a pointer.
.PP
All outstanding buffer calls allocated with
.BR bufcall ()
must be cancelled with a call to
.BR unbufcall (9)
before invalidating any of the references passed as an argument to the
callback function.  When the argument is a
.BR queue (9)
pointer, all outstanding buffer calls must be cancelled with
.BR unbufcall (9)
before the queue is deallocated (i.e. before returning from the
.IR qi_qclose (9))
procedure.
.\"
.\"
.SH EXAMPLES
.PP
It is typical to see
.BR bufcall ()
used to merely enable a queue from a
.IR qi_srvp (9)
procedure as follows:
.nf
\fC\s-2
int xxx_srvp(queue_t *q)
{
   mblk_t *mp, *dp;
   while ((mp = get(q))) {
      switch (mp->b_datap->db_type) {
      case M_PROTO:
	 if ((dp = allocb(somesize, BPRI_MED)) == NULL) {
	    putbq(mp);
	    bufcall(somesize, BPRI_MED, (void *) qenable,
		    (long) q);
	    return (0);
	 }
      ...
      }
   }
   return (0);
}
\s+2\fP
.fi
.\"
.\"
.SH "SEE ALSO"
.PP
.BR putbq (9),
.BR allocb (9),
.BR unbufcall (9),
.BR qbufcall (9),
.BR qunbufcall (9),
.BR mp-streams (9),
.BR STREAMS (9).
.\"
.\"
.SH BUGS
.PP
.BR bufcall ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR bufcall ()
is compatible with
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
and systems based on
.IR "SVR 4"
.[
svr4spg
.]
with the folllowing portability considerations:
.IP \(em \w'\(em\(em'u
.BR bufcall ()
allocates a
.B strevent
structure which is then linked into the
.I strbcalls
system variable and set the
.I strbcwait
flag which causes
.BR kmem_free (9)
to set the
.IR qrunflag .
The bufcall list is thus scheduled to run on the next invocation of
.BR runqueues (9).
This procedure is consistent with that described for
.IR "SVR 4" .
.[
magic
.]
.IP ""
Under
.IR LiS ,
.BR bufcall ()
does not actually generate a callback function once a buffer of the
appropriate size becomes available.  Instead
.I LiS
starts a timer.  When the timer expires, the ability to allocate the necessary
buffers is checked and the callback function invoked if it is now possible to
allocate the necessary structures and buffers.  This is not entirely
consistent with
.I SVR 4.2
.[
svr42
.]
operation.
.\"
.\"
.IP \(em
.BR bufcall ()
assign a packed out dating pointer into the integer
.B bcid_t
returned.  This pointer is a sequenced pointer to a
.B strevent
object that expires when the event's sequence number is incremented.
This permits unpacking and dereferencing of the pointer instead of searches
for id numbers in
.B strevent
lists for speed.
.IP ""
.I LiS
builds a linked list of buffer call structures and assigns an integer id
to each structure.  Searches for unique buffer ids when ids are assigned and
searches for buffer ids when
.BR unbufcall (9)
is called are linear searches that are slow and inefficient.  In fact,
\*(lqThe Magic Garden\*(rq explains that in SVR 4.2
.[
svr42
.]
a
.BR bufcall ()
results in the creation of a
.B strevent
structure which is linked to the
.I strbcalls
system variable
and sets the
.I strbcwait
flag which is then causes
.BR kmem_free ()
to set the
.IR qrunflag .
At no point in this process is an integer id assigned to the
.B strevent
structure.  This means that
.I LiS
meaninglessly assigns an integer id to the buffer call structure and the
inefficiencies of linear searches are pointless.
.\".IP \(em
.\"Symbol
.\".BR lis_bufcall ()
.\"is provided for compatibility with
.\".IR LiS .
.\"See
.\".BR liscompat (9).
.\".BR lis_bufcall ()
.\"returns
.\".BR int .
.IP \(em
Depending on the system,
.BR bufcall ()
returns
.BR int ", " bcid_t ", " bufcall_id_t " or even " toid_t .
.B Linux Fast-STREAMS
assigns a type of
.B int
to
.BR bcid_t ", " bufcall_id_t " and " toid_t
to avoid compatibility issues.
.IP \(em
.IR IRIX \(rg
documents
.[
irixdoc
.]
.BR bufcall ()
as returning a
.BR toid_t .
.B Linux Fast-STREAMS
also defines a
.B toid_t
as
.BR int .
See
.BR timeout (9).
.IP \(em
.IR IRIX \(Rg
documents
.[
irixdoc
.]
that the callback function will be called with local
.I STREAMS
driver interrupts disabled.
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP DDI/DKI" .
.[
usldk
.]
.\"
.\"
.SH HISTORY
.PP
.BR bufcall ()
appears as part of
.IR "SVR 4.0 STREAMS" .
.[
svr4spg
.]
.PP
.BR bufcall ()
first appeared in
.IR "SVR 3" .
.[
svr3spg
.]
.\"
.\"
.[
$LIST$
.]
.TI
