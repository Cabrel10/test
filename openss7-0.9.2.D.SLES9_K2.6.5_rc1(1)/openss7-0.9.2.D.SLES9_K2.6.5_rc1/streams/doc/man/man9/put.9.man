'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) put.9.man,v 0.9.2.26 2006/04/05 09:44:14 brian Exp
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified 2006/04/05 09:44:14 by brian
.\"
.\" -------------------------------------------------------------------------
.\"
.\" put.9.man,v
.\" Revision 0.9.2.26  2006/04/05 09:44:14  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so streams.macros
.\"
.\"
.TH PUT 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B put, puthere, streams_put
\- invoke the put procedure for a \fISTREAMS\fP driver or module with a \fISTREAMS\fP message
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP
.BI "void put(queue_t *" q ", mblk_t *" mp );
.\"
.\"
.SH ARGUMENTS
.TP
.I q
the queue to which to put the message.
.PD 0
.TP
.I mp
the message to put to the queue.
.PD
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
.BR put ()
calls the
.I q->q_info->qi_putp
procedure associated with the passed in queue, with the arguments
.IR q " and " mp .
.PP
As a side-effect,
.BR put ()
will wake up any processes waiting with
.BR qwait (9)
or
.BR qwait_sig (9)
on the specified queue.
.\"
.\"
.SH USAGE
.PP
.BR put ()
is used by a device, pseudo-device, or multiplexing driver to place a message on
one of its own queues: either an upper multiplex read queue or a lower multiplex
write queue.
.PP
.BR put ()
can be called from outside the
.I STREAMS
framework, for example, from an interrupt service procedure.
.PP
For guidelines on writing module put procedures, see
.IR qi_putp (9).
.\".PP
.\"The following guidelines provide best practice for the writing of safe and
.\"portable
.\".IR qi_putp (9)
.\"procedures for drivers an modules:
.\".IP \(em \w'\(em\(em'u
.\"Modules and drivers should process all recognized and handled
.\"high-priority message types directly from the
.\".IR qi_putp (9)
.\"procedure without delay.  Where access to module private data is required to
.\"complete processing, mutual exclusion must be performed to ensure that the
.\".IR qi_putp (9)
.\"procedure remains MP-safe.
.\".IP \(em
.\"Modules and drivers should process all recognized and handled
.\"normal-priority message types other than
.\".BR M_DATA (9),
.\".BR M_PROTOC (9)
.\"and
.\".BR M_DELAY (9)
.\"directly from the
.\".IR qi_putp (9)
.\"procedure, without delay, provided that consideration is given to message
.\"ordering, queued messages and mutual exclusion of shared module private
.\"state information.
.\".IP \(em
.\"Modules and drivers may process all recognized and handled
.\"normal-priority message types
.\".BR M_DATA (9),
.\".BR M_PROTOC (9)
.\"and
.\".BR M_DELAY (9)
.\"directly from the
.\".IR qi_putp (9)
.\"procedure, without delay, provided that consideration is given to message
.\"ordering, queued messages and mutual exclusion of shared module private
.\"state information.
.\".IP \(em
.\"Modules should pass unrecognized or unhandled message types (and unhandled
.\".BR M_IOCTL
.\"messages) upstream and downstream using
.\".BR putnext (9)
.\"directly from the
.\".IR qi_putp (9)
.\"procedure, without delay, given that there are no queued messages.
.\".IP \(em
.\"Drivers should delete unrecognized or unhandled message types using
.\".BR freemsg (9)
.\"directly from the
.\".IR qi_putp (9)
.\"procedure without delay.
.\".IP \(em
.\"Drivers should respond with
.\".BR M_IOCNAK (9)
.\"to unhandled
.\".BR M_IOCTL
.\"messages directly from the
.\".IR qi_putp (9)
.\"procedure without delay.
.\".IP \(em
.\".BR M_FLUSH (9)
.\"is a high-priority message
.\"that should be handled directly from the
.\".IR qi_putp (9)
.\"procedure, without delay.
.\"See
.\".BR M_FLUSH (9)
.\"for more information on cannonical processing of this message.
.\".IP \(em
.\".BR M_DATA (9),
.\".BR M_PROTO (9)
.\"and
.\".BR M_DELAY (9)
.\"are normal priority messages that
.\"may be handled directly from the 
.\".IR qi_putp (9)
.\"procedure if there are no queued messages.
.\".IP \(em
.\".BR M_IOCTL (9),
.\".BR M_IOCDATA (9),
.\".BR M_IOCACK (9),
.\".BR M_IOCNAK (9),
.\".BR M_COPYIN (9)
.\"and
.\".BR M_COPYOUT (9)
.\"messages should be acted upon immediately from the
.\".IR qi_putp (9)
.\"procedure.
.\".IP ""
.\"If the
.\".BR M_IOCTL (9)
.\"message is not handled, the driver should delete it using
.\".BR freemsg (9).
.\"The module should pass it along using
.\".BR putnext (9).
.\".IP ""
.\"If the
.\".BR M_IOCTL (9)
.\"message is handled, cannonical
.\".BR M_IOCTL (9)
.\"processing mechanisms should be used to avoid holding input output control state
.\"information in the module's private structures during
.\".BR M_COPYIN (9)
.\"and
.\".BR M_COPYOUT (9)
.\"operations.  Final results that change module private structure state should use
.\"mutual exclusion mechanisms to keep the
.\".IR qi_putp (9)
.\"procedure MP-safe.
.\".IP \(em
.\".BR M_PCPROTO (9)
.\"is a high-priority message
.\"that should be handled directly from the
.\".IR qi_putp (9)
.\"procedure, without delay.
.\"See
.\".BR M_PCPROTO (9)
.\"for more information on cannonical processing of this message.
.\".IP \(em
.\".BR M_READ (9)
.\"is a high-priority message
.\"that should be handled directly from the
.\".IR qi_putp (9)
.\"procedure, without delay.
.\"See
.\".BR M_READ (9)
.\"for more information on cannonical processing of this message.
.\".IP \(em
.\".BR M_LETSPLAY (9),
.\".BR M_DONTPLAY (9)
.\"and
.\".BR M_BACKDONE (9)
.\"are high-priority messages that
.\"should be processed immediated from the
.\".IR qi_putp (9)
.\"procedure.
.\"See
.\".BR M_LETSPLAY (9)
.\"for more information on cannonical processing of these messages.
.\".IP \(em
.\".BR M_BREAK (9)
.\"messages should be processed immediated from the
.\".IR qi_putp (9)
.\"procedure.
.\".IP \(em
.\".BR M_STOP (9),
.\".BR M_START (9),
.\".BR M_STOPI (9)
.\"and
.\".BR M_STARTI (9)
.\"are high-priority messages that
.\"should be processed immediated from the
.\".IR qi_putp (9)
.\"procedure.
.\"See
.\".BR M_STOP (9),
.\".BR M_START (9),
.\".BR M_STOPI (9)
.\"and
.\".BR M_STARTI (9)
.\"for more information on cannonical processing of these messages.
.\".IP \(em
.\".BR M_ERROR (9)
.\"and
.\".BR M_HANGUP (9)
.\"are high-priority messages that
.\"should be processed immediated from the
.\".IR qi_putp (9)
.\"procedure.
.\"
.\"
.SH RETURN
.PP
.BR put ()
returns
.BR void .
.\"
.\"
.SH ERRORS
.PP
.BR put ()
always succeeds.  Any error conditions are handled within the invoked queue
.IR qi_putp (9)
put procedure.
.\"
.\"
.SH CONTEXT
.PP
.BR put ()
can be called from any context, including user context, module procedures,
callouts, callbacks, soft interrupts (tasklets and bottom halves), and interrupt
service routines.
.\"
.\"
.SH MP-STREAMS
.PP
.BR put ()
is MP-safe when called from any context; however, the caller is responsible for
the validity of the passed in queue pointer,
.I q ,
across the call,
and exclusive access to the passed in message,
.I mp .
.PP
The validity of either queue in the pair, and either
.I q_next
pointer for a queue in the pair, for the queue pointer passed to a module
procedure, callout or synchronous callback functions, is guaranteed by
.BR "@PACKAGE_TITLE@" .
Any queue pointer in the pair passed as an argument to an asynchronous callback
function are also valid, providing the driver or module observes the rules for
cancellation of asynchronous callbacks on close.
.BR "@PACKAGE_TITLE@"
also provides that a queue pointer in the pair within whose procedures an
asynchronous callback was invoked, and either
.I q_next
pointer, are also valid in an asynchronous callback.
.PP
The driver or module
.IR qi_putp (9)
procedures invoked must also be MP-safe, either by design or through
synchronization [see
.BR mp-streams (9)].
.PP
Under
.B @PACKAGE_TITLE@
any
.IR qi_putp (9)
procedure could be executed concurrently with any queue
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_putp (9),
.IR qi_srvp (9)
procedure,
.BR esbbcall (9),
.BR bufcall (9),
.BR qbufcall (9),
.BR timeout (9),
.BR qtimeout (9)
callback function,
soft interrupt (tasklets or bottom halves),
or interrupt service routine.
The
.IR qi_putp (9)
procedure itself must perform its own mutual exclusion on data structures shared
across these procedures.
.PP
Although
.BI put( q->q_next )
is functionally equivalent to
.BI putnext( q )\c
, for the
.BR put()
form, the dereference of the
.I q->q_next
pointer is not protected on some implementations of
.I STREAMS
for MP architectures: on which
.I q_next
may change as a result of a concurrent reconfiguration of the Stream (e.g., an
.BR I_PUSH (7)
or
.BR I_POP (7)
.BR streamio (7)
operation).  For MP operation, portable
.I STREAMS
drivers and modules will always call
.BR putnext (9)
instead of
.BI put( q->q_next ).
.PP
For maximum portability and compatibility,
.BI put( q->q_next )
under
.B "@PACKAGE_TITLE@"
is always MP-safe from a module procedure or callout, or synchronous callback
function that was passed
.IR q ,
or the queue pair containing
.IR q ,
(and is even safe for an asynchronous callback function passing
.I q
or
.I q->q_next
that was invoked from a procedure, callout or synchronous callback on
.IR q ).
.PP
See
.BR mp-streams (9)
for general
.I MP-STREAMS
considerations.
.\"
.\"
.SH NOTICES
.PP
It is the responsibility of a
.I STREAMS
driver passing a normal priority message to a driver queue to check for flow
control, using
.BR bcanput (9)
or
.BR bcanputnext (9),
before passing the message with
.BR put ()
or
.BR putnext (9).
.\".PP
.\".BR puthere ()
.\"is an
.\".IR OSF/1 \(rg-specific
.\"function:
.\".B _OSF_SOURCE
.\"must be defined before including DDI/DKI include files to expose this symbol.
.\".B @PACKAGE_TITLE@
.\".[
.\"lfs
.\".]
.\"must also have been compiled with
.\".B CONFIG_STREAMS_COMPAT_OSF
.\"or
.\".B CONFIG_STREAMS_COMPAT_OSF_MODULE
.\"defined.
.\".PP
.\".BR streams_put ()
.\"is an
.\".IR HP-UX \(rg-specific
.\"function:
.\".B _HPUX_SOURCE
.\"must be defined before including DDI/DKI include files to expose this symbol.
.\".B @PACKAGE_TITLE@
.\".[
.\"lfs
.\".]
.\"must also have been compiled with
.\".B CONFIG_STREAMS_COMPAT_HPUX
.\"or
.\".B CONFIG_STREAMS_COMPAT_HPUX_MODULE
.\"defined.
.\"
.\"
.SH EXAMPLES
.\"
.SS Example #1
.PP
Following is an example of canonical
.IR qi_putp (9)
procedure processing for drivers or modules:
.PP
.nf
\fC\s-2\
 1  int
 2  xxx_put(queue_t *q, mblk_t *mp)
 3  {
 4      if (pcmsg(mp->b_datap->db_type)
 5          || q->q_count == 0) {
 6          priv_t p;
 7  
 8          p = q->q_ptr;
 9          switch (mp->b_datap->db_type) {
10          case M_FLUSH:
11          {
12              /* 
13               * perform canonial M_FLUSH handling without locks
14               */
15              return (0);
16          }
17          case M_DATA:
18          case M_PROTO:
19          case M_PCPROTO:
20          {
21              pl_t pl;
22  
23              if ((pl =
24                   TRYLOCK(&p->priv_lock,
25                           plstr)) == invpl)
26                  putq(q, mp);
27              else {
28                  /* 
29                   * process message
30                   */
31                  UNLOCK(&p->priv_lock, pl);
32              }
33              return (0);
34          }
35          }
36      }
37      putq(q, mp);
38      return (0);
39  }
\s+2\fP
.fi
.PP
Note that checking
.I q->q_count
in this fashion introduces a race condition between messages arriving at the
queue from other concurrent invocations of
.BR xxx_put ,
however, if such concurrent execution can occur, then the message ordering is of
no consequence, or can already be disrupted.
.PP
Note that if the driver or module does not have a
.IR qi_srvp (9)
procedure,
.BR LOCK (9)
should be used instead of
.BR TRYLOCK (9).
Of course, reader writer locks, synchronization levels, or any other
non-blocking mutual exclusion mechanism could have been used.
.\"
.SS Example #2 - put() across a Multiplexing Driver
.PP
The following example illustrates the use of
.BR put ()
and
.BR bcanput (9)
used across a multiplexing driver instead of
.BR putnext (9)
and
.BR bcanputnext (9)
that should only be invoked within one of
.IR q 's
procedures (put or service).
.PP
Following is the lower multiplex read queue put procedure:
.PP
.nf
\fC\s-2\
 1  static int
 2  mux_lrput(queue_t *q, mblk_t *mp)
 3  {
 4      struct mux *mux = q->q_ptr;
 5  
 6      switch (mp->b_datap->db_type) {
 7      case M_FLUSH:
 8          /* left as an exercise */
 9          /* ... */
10          break;
11      default:
12          if (!q->q_first && !(q->q_flag & QSVCBUSY)) {
13              read_lock(&mux_lock);
14              if (mux->other) {
15                  queue_t *rq;
16  
.B "17                  if ((rq = mux->other->rq)
.B "18                      && (mp->b_datap->db_type >= QPCTL
.B "19                          || bcanput(rq, mp->b_band))) {
.B "20                      put(rq, mp);
21                      read_unlock(&mux_lock);
22                      return (0);
23                  }
24              }
25              read_unlock(&mux_lock);
26          }
27          putq(q, mp);
28          break;
29      }
30      return (0);
31  }
\s+2\fP
.fi
.PP
Note that at
.BR "Line 17"
through
.BR "Line 20" ,
.BR bcanput (9)
is use to test flow control on the upper multiplexer read queue (that has a
service procedure).
.BR put ()
is used to pass the message on the upper multiplexer read
.IR qi_putp (9)
put procedure.
.PP
Following is the lower multiplex service procedure:
.PP
.nf
\fC\s-2\
 1  static int
 2  mux_lrsrv(queue_t *q)
 3  {
 4      struct mux *mux = q->q_ptr;
 5      queue_t *rq = NULL;
 6      mblk_t *mp;
 7  
 8      read_lock(&mux_lock);
 9      if (mux->other && (rq = mux->other->rq)) {
10          while ((mp = getq(q))) {
.B "11              if (mp->b_datap->db_type >= QPCTL
.B "12                  || bcanput(rq, mp->b_band)) {
.B "13                  put(rq, mp);
.B "14                  continue;
15              }
16              putbq(q, mp);
17              break;
18          }
19      } else
20          noenable(q);
21      read_unlock(&mux_lock);
22      return (0);
23  }
\s+2\fP
.fi
.PP
Note also that at
.BR "Line 11"
through
.BR "Line 14" ,
.BR bcanput (9)
and
.BR put ()
are used again to test and pass messages across the multiplexing driver.
.PP
The following is the upper multiplex read put procedure:
.PP
.nf
\fC\s-2\
 1  static int
 2  mux_urput(queue_t *q, mblk_t *mp)
 3  {
.B " 4      if (mp->b_datap->db_type >= QPCTL ||
.B " 5          (!q->q_first && !(q->q_flag & QSVCBUSY)
.B " 6           && bcanputnext(q, mp->b_band))) {
.B " 7          putnext(q, mp);
.B " 8          return (0);
.B " 9      }
10      putq(q, mp);
11      return (0);
12  }
\s+2\fP
.fi
.PP
Now, within the upper Stream procedures, sychronous to the upper Stream, the
procedure can use the
.BR bcanputnext (9)
and
.BR putnext (9)
utilities.
.PP
Following is the upper multiplex read service procedure:
.PP
.nf
\fC\s-2\
 1  static int
 2  mux_ursrv(queue_t *q)
 3  {
 4      {
 5          mblk_t *mp;
 6  
 7          /* first drain the queue */
 8          while ((mp = getq(q))) {
.B " 9              if (mp->b_datap->db_type >= QPCTL
.B "10                  || bcanputnext(q, mp->b_band)) {
.B "11                  putnext(q, mp);
.B "12                  continue;
.B "13              }
14              putbq(q, mp);
15              return (0);
16          }
17      }
18      {
19          struct mux *mux = q->q_ptr;
20          struct mux *bot;
21          bool found = false;
22  
23          /* Find the lower queues feeding this one and 
24             enable them. */
25          read_lock(&mux_lock);
26          for (bot = mux_links; bot; bot = bot->next)
27              if (bot->other == mux) {
28                  qenable(bot->rq);
29                  found = true;
30              }
31          read_unlock(&mux_lock);
32  
33          /* echo behaviour otherwise */
34          if (!found)
35              qenable(WR(q));
36  
37          return (0);
38      }
39  }
\s+2\fP
.fi
.PP
The service procedure can also use
.BR bcanputnext (9)
and
.BR putnext (9).
The lower part of the procedure above is used to enable flow control across the
multiplexing driver.  If the upper read queue service procedure ever runs until
the message queue is empty, it will manually enable the lower multiplex read
queue.
.\"
.\"
.SH "SEE ALSO"
.PP
.IR qi_qopen (9),
.IR qi_qclose (9),
.BR qprocson (9),
.BR qprocsoff (9),
.BR freezestr (9),
.BR unfreezestr (9),
.IR qi_srvp (9),
.BR esbbcall (9),
.BR bufcall (9),
.BR qbufcall (9),
.BR timeout (9),
.BR qtimeout (9).
.\"
.\"
.SH BUGS
.PP
.BR put ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR put ()
is compatible with
.IR "SVR 4.2 DDI/DKI" ,
.[
usldk
.]
and implementations based on
.IR "SVR 4" ,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.BR put ()
called with invalid arguments will have undefined results.
.I LiS
fails silently when
.IR mp " or " q
is
.BR NULL ,
or
.I q
does not reference a valid queue structure,
or
.I q->q_info
is
.BR NULL ,
or
.I q->q_info->qi_putp
is
.BR NULL .
When
.I LiS
fails silently, it frees
.I mp
using
.BR freemsg (9).
.IP \(em
.BR put ()
cannot be invoked while
.BR qprocsoff (9)
is in effect for
.IR q
because no other queue has a references to the queue for which
.BR qprocsoff (9)
has been executed, or for which
.BR qprocson (9)
has not yet been executed.
.I LiS
discards messages passed to
.BR lis_safe_putmsg ()
when 
.BR qprocsoff (9)
has been executed for
.IR q .
It is invalid to call
.BR put ()
for a queue that has not had
.BR qprocson (9)
called, or which has called
.BR qprocsoff (9),
so this difference should not present a problem.
.IP \(em
.BR put (),
.BR putnext (9),
.BR qreply (9)
will invoke a queue's
.IR qi_putp (9)
procedure shared and multi-threaded.
This is equivalent to
.IR Solaris \(rg
drivers with the
.B D_MP
flag set or with the
.B D_MTPUTSHARED
flag set.
.IP \(em
.BR put ()
may be called on a Stream frozen with
.BR freezestr (9).
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
.IR Solaris \(rg,
.[
solspg
.]
.IR SUPER-UX \(rg
.[
suxspg
.]
and
.IR UnixWare \(rg
.[
uw7spg
.]
do not permit
.BR put ()
to be called on a Stream frozen with
.BR freezestr (9).
Portable
.I STREAMS
drivers and modules should not call
.BR put ()
on a Stream frozen with
.BR freezestr (9).
.IP \(em
Under
.IR OSF/1 \(rg
this function is called
.BR puthere ().
.IP ""
.BR puthere ()
is an
.IR OSF/1 \(rg-specific
function and should not be used by portable
.I STREAMS
drivers and modules.  The more common
.BR put ()
function should be called instead.
.\".IP \(em
.\".BR puthere ()
.\"is provided for source level compatibility with
.\".IR OSF/1 \(rg
.\"for the purpose of porting
.\".IR OSF/1 \(rg
.\"drivers to
.\".BR Linux .
.\"Because internal structure and definitions for
.\".B @PACKAGE_TITLE@
.\"differ from that of
.\".IR OSF/1 \(rg,
.\"binaries are incompatible.
.\".IP \(em
.\".BR puthere ()
.\"only provides functionality comparable to
.\".IR OSF/1 \(rg
.\"for use by
.\".I STREAMS
.\"drivers and modules.  Any and all functionality provided by
.\".BR puthere ()
.\"in support of
.\".RI non- STREAMS
.\"devices are not supported.
.IP \(em
Under
.IR HP-UX \(rg
this function is called
.BR streams_put ().
.IP ""
.BR streams_put ()
is an
.IR HP-UX \(rg-specific
function and should not be used by portable
.I STREAMS
drivers and modules.  The more common
.BR put ()
function should be called instead.
.\".IP \(em
.\".BR streams_put ()
.\"is provided for source level compatibility with
.\".IR HP-UX \(rg
.\"for the purpose of porting
.\".IR HP-UX \(rg
.\"drivers to
.\".BR Linux .
.\"Because internal structure and definitions for
.\".B @PACKAGE_TITLE@
.\".[
.\"lfs
.\".]
.\"differ from that of
.\".IR HP-UX \(rg,
.\"binaries are incompatible.
.\".IP \(em
.\".BR streams_put ()
.\"only provides functionality comparable to
.\".IR HP-UX \(rg
.\"for use by
.\".I STREAMS
.\"drivers and modules.  Any and all functionality provided by
.\".BR streams_put ()
.\"in support of
.\".RI non- STREAMS
.\"devices are not supported.
.IP \(em
Older versions of
.I LiS
hold an exclusive nesting queue procedures lock while calling
.BR put ().
Unfortunately, these locks disable interrupts, meaning that interrupts are
disabled while
.BR put ()
executes.
.I LiS
.BR lis_safe_putnext (9)
and
.BR lis_safe_qreply (9)
also call this function, meaning that all message passing functions in
.I LiS
lock out interrupts until the entire thread of execution completes.
.I  LiS
drivers and modules calling
.B @PACKAGE_TITLE@
.BR put ()
should notice superior interrupt service routine latency and performance.  It
is normally the case that
.IR qi_putp (9)
procedures are MP-safe as they normally use only
MP-safe queue and message utility functions.  Also, most
.IR qi_putp (9)
procedures are
inherently invoked single threaded (from a single-threaded
.IR qi_srvp (9)
procedure).
Lack of locking should not present a problem.
.IP ""
Because
.I LiS
also uses this lock for
.IR qi_srvp (9)
procedures, this means that while the
.I LiS
scheduler is running (at kernel thread priority 50), interrupts,
timeouts, bottom halves, hi tasklets and soft interrupts are indefinitely
postponed.  This is not acceptable for soft-real-time performance.  Rewrite
.I LiS
.IR qi_putp (9)
procedures to be MP-safe.
.I LiS
behaviour in this regard is not consistent with
.IR "SVR 4" .
.[
svr4spg
.]
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B "@PACKAGE_TITLE@"
instead of
.IR LiS .
.\".IP \(em
.\"Symbol
.\".BR lis_safe_putmsg ()
.\"is provided for compatibility with
.\".IR LiS .
.\"See
.\".BR liscompat (9).
.\".BR lis_safe_putmsg ()
.\"simply calls
.\".BR put ()
.\"directly.
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.BR put ():
.IR "SVR 4.2 DDI/DKI" ;
.[
usldk
.]
.[
uslspg
.]
.BR puthere ():
.IR OSF/1 \(rg
documentation;
.[
osfdoc
.]
.[
osfspg
.]
.BR streams_put ():
.IR HP-UX \(rg
documentation.
.[
hpuxdoc
.]
.[
hpuxspg
.]
.\"
.\"
.SH HISTORY
.PP
.BR put ()
first appeared in
.IR "SVR 4.0 MP" " and " "SVR 4.2 MP" ;
.[
svr4dk
.]
.[
usldk
.]
.BR puthere ()
first appeared in
.IR OSF/1 \(rg;
.BR streams_put ()
first appeared in
.IR HP-UX \(rg.
.\"
.\"
.[
$LIST$
.]
.TI
